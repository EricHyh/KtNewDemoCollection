/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040201
#define SWIGJAVA
#define SWIG_DIRECTORS

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif


#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } } while (0)

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Java proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED) || defined(DEBUG_DIRECTOR_EXCEPTION) || defined(DEBUG_DIRECTOR_THREAD_NAME)
#include <iostream>
#endif

#include <exception>

#if defined(SWIG_JAVA_USE_THREAD_NAME)

#if !defined(SWIG_JAVA_GET_THREAD_NAME)
namespace Swig {
  SWIGINTERN int GetThreadName(char *name, size_t len);
}

#if defined(__linux__)

#include <sys/prctl.h>
SWIGINTERN int Swig::GetThreadName(char *name, size_t len) {
  (void)len;
#if defined(PR_GET_NAME)
  return prctl(PR_GET_NAME, (unsigned long)name, 0, 0, 0);
#else
  (void)name;
  return 1;
#endif
}

#elif defined(__unix__) || defined(__APPLE__)

#include <pthread.h>
SWIGINTERN int Swig::GetThreadName(char *name, size_t len) {
  return pthread_getname_np(pthread_self(), name, len);
}

#else

SWIGINTERN int Swig::GetThreadName(char *name, size_t len) {
  (void)len;
  (void)name;
  return 1;
}
#endif

#endif

#endif

#if defined(SWIG_JAVA_DETACH_ON_THREAD_END)
#include <pthread.h>
#endif

namespace Swig {

  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(SWIG_NULLPTR), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = SWIG_NULLPTR;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, SWIG_NULLPTR) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = SWIG_NULLPTR;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else {
	/* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

#if defined(SWIG_JAVA_DETACH_ON_THREAD_END)
    static void detach(void *jvm) {
      static_cast<JavaVM *>(jvm)->DetachCurrentThread();
    }

    static void make_detach_key() {
      pthread_key_create(&detach_key_, detach);
    }

    /* thread-local key to register a destructor */
    static pthread_key_t detach_key_;
#endif

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

#if defined(SWIG_JAVA_DETACH_ON_THREAD_END)
  pthread_key_t JObjectWrapper::detach_key_;
#endif

  /* Local JNI reference deleter */
  class LocalRefGuard {
    JNIEnv *jenv_;
    jobject jobj_;

    // non-copyable
    LocalRefGuard(const LocalRefGuard &);
    LocalRefGuard &operator=(const LocalRefGuard &);
  public:
    LocalRefGuard(JNIEnv *jenv, jobject jobj): jenv_(jenv), jobj_(jobj) {}
    ~LocalRefGuard() {
      if (jobj_)
        jenv_->DeleteLocalRef(jobj_);
    }
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(SWIG_NULLPTR), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
        JavaVMAttachArgs args;
        args.version = JNI_VERSION_1_2;
        args.group = SWIG_NULLPTR;
        args.name = SWIG_NULLPTR;
#if defined(SWIG_JAVA_USE_THREAD_NAME)
        char thread_name[64];  // MAX_TASK_COMM_LEN=16 is hard-coded in the Linux kernel and MacOS has MAXTHREADNAMESIZE=64.
        if (Swig::GetThreadName(thread_name, sizeof(thread_name)) == 0) {
          args.name = thread_name;
#if defined(DEBUG_DIRECTOR_THREAD_NAME)
          std::cout << "JNIEnvWrapper: thread name: " << thread_name << std::endl;
        } else {
          std::cout << "JNIEnvWrapper: Couldn't set Java thread name" << std::endl;
#endif
        }
#endif
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, &args);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, &args);
#endif

#if defined(SWIG_JAVA_DETACH_ON_THREAD_END)
        // At least on Android 6, detaching after every call causes a memory leak.
        // Instead, register a thread desructor and detach only when the thread ends.
        // See https://developer.android.com/training/articles/perf-jni#threads
        static pthread_once_t once = PTHREAD_ONCE_INIT;

        pthread_once(&once, JObjectWrapper::make_detach_key);
        pthread_setspecific(JObjectWrapper::detach_key_, director->swig_jvm_);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_DETACH_ON_THREAD_END) && !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    struct SwigDirectorMethod {
      const char *name;
      const char *desc;
      jmethodID methid;
      SwigDirectorMethod(JNIEnv *jenv, jclass baseclass, const char *name, const char *desc) : name(name), desc(desc) {
        methid = jenv->GetMethodID(baseclass, name, desc);
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
      LocalRefGuard ref_deleter(jenv, jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, SWIG_NULLPTR) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

    jclass swig_new_global_ref(JNIEnv *jenv, const char *classname) {
      jclass clz = jenv->FindClass(classname);
      return clz ? (jclass)jenv->NewGlobalRef(clz) : SWIG_NULLPTR;
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) SWIG_NULLPTR), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };

  // Zero initialized bool array
  template<size_t N> class BoolArray {
    bool array_[N];
  public:
    BoolArray() {
      memset(array_, 0, sizeof(array_));
    }
    bool& operator[](size_t n) {
      return array_[n];
    }
    bool operator[](size_t n) const {
      return array_[n];
    }
  };

  // Utility classes and functions for exception handling.

  // Simple holder for a Java string during exception handling, providing access to a c-style string
  class JavaString {
  public:
    JavaString(JNIEnv *jenv, jstring jstr) : jenv_(jenv), jstr_(jstr), cstr_(SWIG_NULLPTR) {
      if (jenv_ && jstr_)
	cstr_ = (const char *) jenv_->GetStringUTFChars(jstr_, SWIG_NULLPTR);
    }

    ~JavaString() {
      if (jenv_ && jstr_ && cstr_)
	jenv_->ReleaseStringUTFChars(jstr_, cstr_);
    }

    const char *c_str(const char *null_string = "null JavaString") const {
      return cstr_ ? cstr_ : null_string;
    }

  private:
    // non-copyable
    JavaString(const JavaString &);
    JavaString &operator=(const JavaString &);

    JNIEnv *jenv_;
    jstring jstr_;
    const char *cstr_;
  };

  // Helper class to extract the exception message from a Java throwable
  class JavaExceptionMessage {
  public:
    JavaExceptionMessage(JNIEnv *jenv, jthrowable throwable) : message_(jenv, exceptionMessageFromThrowable(jenv, throwable)) {
    }

    // Return a C string of the exception message in the jthrowable passed in the constructor
    // If no message is available, null_string is return instead
    const char *message(const char *null_string = "Could not get exception message in JavaExceptionMessage") const {
      return message_.c_str(null_string);
    }

  private:
    // non-copyable
    JavaExceptionMessage(const JavaExceptionMessage &);
    JavaExceptionMessage &operator=(const JavaExceptionMessage &);

    // Get exception message by calling Java method Throwable.getMessage()
    static jstring exceptionMessageFromThrowable(JNIEnv *jenv, jthrowable throwable) {
      jstring jmsg = SWIG_NULLPTR;
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  // All Throwable classes have a getMessage() method, so call it to extract the exception message
	  jmethodID getMessageMethodID = jenv->GetMethodID(throwclz, "getMessage", "()Ljava/lang/String;");
	  if (getMessageMethodID)
	    jmsg = (jstring)jenv->CallObjectMethod(throwable, getMessageMethodID);
	}
	if (jmsg == SWIG_NULLPTR && jenv->ExceptionCheck())
	  jenv->ExceptionClear();
      }
      return jmsg;
    }

    JavaString message_;
  };

  // C++ Exception class for handling Java exceptions thrown during a director method Java upcall
  class DirectorException : public std::exception {
  public:

    // Construct exception from a Java throwable
    DirectorException(JNIEnv *jenv, jthrowable throwable) : jenv_(jenv), throwable_(throwable), classname_(SWIG_NULLPTR), msg_(SWIG_NULLPTR) {

      // Call Java method Object.getClass().getName() to obtain the throwable's class name (delimited by '/')
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  jclass clzclz = jenv->GetObjectClass(throwclz);
	  if (clzclz) {
	    jmethodID getNameMethodID = jenv->GetMethodID(clzclz, "getName", "()Ljava/lang/String;");
	    if (getNameMethodID) {
	      jstring jstr_classname = (jstring)(jenv->CallObjectMethod(throwclz, getNameMethodID));
              // Copy strings, since there is no guarantee that jenv will be active when handled
              if (jstr_classname) {
                JavaString jsclassname(jenv, jstr_classname);
                const char *classname = jsclassname.c_str(SWIG_NULLPTR);
                if (classname)
                  classname_ = copypath(classname);
              }
	    }
	  }
	}
      }

      JavaExceptionMessage exceptionmsg(jenv, throwable);
      msg_ = copystr(exceptionmsg.message(SWIG_NULLPTR));
    }

    // More general constructor for handling as a java.lang.RuntimeException
    DirectorException(const char *msg) : jenv_(SWIG_NULLPTR), throwable_(SWIG_NULLPTR), classname_(SWIG_NULLPTR), msg_(msg ? copystr(msg) : SWIG_NULLPTR) {
    }

    ~DirectorException() throw() {
      delete[] classname_;
      delete[] msg_;
    }

    const char *what() const throw() {
      return msg_ ? msg_ : "Unspecified DirectorException message";
    }

    // Reconstruct and raise/throw the Java Exception that caused the DirectorException
    // Note that any error in the JNI exception handling results in a Java RuntimeException
    void throwException(JNIEnv *jenv) const {
      if (jenv) {
        if (jenv == jenv_ && throwable_) {
          // Throw original exception if not already pending
          jthrowable throwable = jenv->ExceptionOccurred();
          if (throwable && jenv->IsSameObject(throwable, throwable_) == JNI_FALSE) {
            jenv->ExceptionClear();
            throwable = SWIG_NULLPTR;
          }
          if (!throwable)
            jenv->Throw(throwable_);
        } else {
          // Try and reconstruct original exception, but original stacktrace is not reconstructed
          jenv->ExceptionClear();

          jmethodID ctorMethodID = SWIG_NULLPTR;
          jclass throwableclass = SWIG_NULLPTR;
          if (classname_) {
            throwableclass = jenv->FindClass(classname_);
            if (throwableclass)
              ctorMethodID = jenv->GetMethodID(throwableclass, "<init>", "(Ljava/lang/String;)V");
          }

          if (ctorMethodID) {
            jenv->ThrowNew(throwableclass, what());
          } else {
            SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, what());
          }
        }
      }
    }

    // Deprecated - use throwException
    void raiseJavaException(JNIEnv *jenv) const {
      throwException(jenv);
    }

    // Create and throw the DirectorException
    static void raise(JNIEnv *jenv, jthrowable throwable) {
      throw DirectorException(jenv, throwable);
    }

  private:
    static char *copypath(const char *srcmsg) {
      char *target = copystr(srcmsg);
      for (char *c=target; *c; ++c) {
        if ('.' == *c)
          *c = '/';
      }
      return target;
    }

    static char *copystr(const char *srcmsg) {
      char *target = SWIG_NULLPTR;
      if (srcmsg) {
	size_t msglen = strlen(srcmsg) + 1;
	target = new char[msglen];
	strncpy(target, srcmsg, msglen);
      }
      return target;
    }

    JNIEnv *jenv_;
    jthrowable throwable_;
    const char *classname_;
    const char *msg_;
  };

  // Helper method to determine if a Java throwable matches a particular Java class type
  // Note side effect of clearing any pending exceptions
  SWIGINTERN bool ExceptionMatches(JNIEnv *jenv, jthrowable throwable, const char *classname) {
    bool matches = false;

    if (throwable && jenv && classname) {
      // Exceptions need to be cleared for correct behavior.
      // The caller of ExceptionMatches should restore pending exceptions if desired -
      // the caller already has the throwable.
      jenv->ExceptionClear();

      jclass clz = jenv->FindClass(classname);
      if (clz) {
	jclass classclz = jenv->GetObjectClass(clz);
	jmethodID isInstanceMethodID = jenv->GetMethodID(classclz, "isInstance", "(Ljava/lang/Object;)Z");
	if (isInstanceMethodID) {
	  matches = jenv->CallBooleanMethod(clz, isInstanceMethodID, throwable) != 0;
	}
      }

#if defined(DEBUG_DIRECTOR_EXCEPTION)
      if (jenv->ExceptionCheck()) {
        // Typically occurs when an invalid classname argument is passed resulting in a ClassNotFoundException
        JavaExceptionMessage exc(jenv, jenv->ExceptionOccurred());
        std::cout << "Error: ExceptionMatches: class '" << classname << "' : " << exc.message() << std::endl;
      }
#endif
    }
    return matches;
  }
}

namespace Swig {
  namespace {
    jclass jclass_SwigCallbackDemoJNI = NULL;
    jmethodID director_method_ids[9];
  }
}

#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#include <typeinfo>
#include <stdexcept>


#include <map>
#include <stdexcept>


#include <unordered_map>
#include <stdexcept>


#include <unordered_map>
#include <memory>
#include <mutex>
#include <list>
#include <vector>
#include <functional>


#include "SwigCallback.h"
#include "SwigCallbackData.h"
#include "TestSwigCallback.h"
#include "../JNIContext.h"


class SwigCallbackFunctionBridge {

    public:
    virtual ~SwigCallbackFunctionBridge() {}

    virtual
    void onCall(const SwigCallbackData &data) = 0;

    static const SwigCallbackFunction obtainOriginal(JNIEnv *jenv, std::shared_ptr<SwigCallbackFunctionBridge> *function_bridge, jobject j_function_bridge){
        std::lock_guard<std::mutex> lock(function_bridge->get()->m_mutex);
        if (auto original_ptr = function_bridge->get()->original.lock()) {
            // 如果原始回调函数还存在，直接返回
            return *original_ptr;
        }

        // 创建全局引用
        jobject globalRef = jenv->NewGlobalRef(j_function_bridge);
        // 创建新的 shared_ptr，使用自定义删除器
        std::shared_ptr<SwigCallbackFunctionBridge> new_function_bridge = std::shared_ptr<SwigCallbackFunctionBridge>(function_bridge->get(), [globalRef](SwigCallbackFunctionBridge* ptr) {
            JNIEnv *env = nullptr;
            JNIContext context(env);
            // 删除全局引用
            env->DeleteGlobalRef(globalRef);
        });

        std::shared_ptr<SwigCallbackFunction> p_function = std::make_shared<SwigCallbackFunction>([new_function_bridge](const SwigCallbackData &data) {
            new_function_bridge->onCall(data);
        });

        new_function_bridge->original = std::weak_ptr< SwigCallbackFunction >(p_function);

        return *p_function;
    }

    private:
    std::mutex m_mutex;

    std::weak_ptr <SwigCallbackFunction> original;

};


struct SWIG_null_deleter {
  void operator() (void const *) const {
  }
};
#define SWIG_NO_NULL_DELETER_0 , SWIG_null_deleter()
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN


class SwigCallbackFunction1Bridge {

    public:
    virtual ~SwigCallbackFunction1Bridge() {}

    virtual
    void onCall(const SwigCallbackData &data) = 0;

    static const SwigCallbackFunction1 obtainOriginal(JNIEnv *jenv, std::shared_ptr<SwigCallbackFunction1Bridge> *function_bridge, jobject j_function_bridge){
        std::lock_guard<std::mutex> lock(function_bridge->get()->m_mutex);
        if (auto original_ptr = function_bridge->get()->original.lock()) {
            // 如果原始回调函数还存在，直接返回
            return *original_ptr;
        }

        // 创建全局引用
        jobject globalRef = jenv->NewGlobalRef(j_function_bridge);
        // 创建新的 shared_ptr，使用自定义删除器
        std::shared_ptr<SwigCallbackFunction1Bridge> new_function_bridge = std::shared_ptr<SwigCallbackFunction1Bridge>(function_bridge->get(), [globalRef](SwigCallbackFunction1Bridge* ptr) {
            JNIEnv *env = nullptr;
            JNIContext context(env);
            // 删除全局引用
            env->DeleteGlobalRef(globalRef);
        });

        std::shared_ptr<SwigCallbackFunction1> p_function = std::make_shared<SwigCallbackFunction1>([new_function_bridge](const SwigCallbackData &data) {
            new_function_bridge->onCall(data);
        });

        new_function_bridge->original = std::weak_ptr< SwigCallbackFunction1 >(p_function);

        return *p_function;
    }

    private:
    std::mutex m_mutex;

    std::weak_ptr <SwigCallbackFunction1> original;

};


class InnerObserver2Bridge {

    public:
    virtual ~InnerObserver2Bridge() {}

    virtual
    void onCall(const SwigCallbackData &data) = 0;

    static const InnerObserver2 obtainOriginal(JNIEnv *jenv, std::shared_ptr<InnerObserver2Bridge> *function_bridge, jobject j_function_bridge){
        std::lock_guard<std::mutex> lock(function_bridge->get()->m_mutex);
        if (auto original_ptr = function_bridge->get()->original.lock()) {
            // 如果原始回调函数还存在，直接返回
            return *original_ptr;
        }

        // 创建全局引用
        jobject globalRef = jenv->NewGlobalRef(j_function_bridge);
        // 创建新的 shared_ptr，使用自定义删除器
        std::shared_ptr<InnerObserver2Bridge> new_function_bridge = std::shared_ptr<InnerObserver2Bridge>(function_bridge->get(), [globalRef](InnerObserver2Bridge* ptr) {
            JNIEnv *env = nullptr;
            JNIContext context(env);
            // 删除全局引用
            env->DeleteGlobalRef(globalRef);
        });

        std::shared_ptr<InnerObserver2> p_function = std::make_shared<InnerObserver2>([new_function_bridge](const SwigCallbackData &data) {
            new_function_bridge->onCall(data);
        });

        new_function_bridge->original = std::weak_ptr< InnerObserver2 >(p_function);

        return *p_function;
    }

    private:
    std::mutex m_mutex;

    std::weak_ptr <InnerObserver2> original;

};


class InnerObserver3Bridge {

    public:
    virtual ~InnerObserver3Bridge() {}

    virtual
    void onCall(const SwigCallbackData &data) = 0;

    static const InnerObserver3 obtainOriginal(JNIEnv *jenv, std::shared_ptr<InnerObserver3Bridge> *function_bridge, jobject j_function_bridge){
        std::lock_guard<std::mutex> lock(function_bridge->get()->m_mutex);
        if (auto original_ptr = function_bridge->get()->original.lock()) {
            // 如果原始回调函数还存在，直接返回
            return *original_ptr;
        }

        // 创建全局引用
        jobject globalRef = jenv->NewGlobalRef(j_function_bridge);
        // 创建新的 shared_ptr，使用自定义删除器
        std::shared_ptr<InnerObserver3Bridge> new_function_bridge = std::shared_ptr<InnerObserver3Bridge>(function_bridge->get(), [globalRef](InnerObserver3Bridge* ptr) {
            JNIEnv *env = nullptr;
            JNIContext context(env);
            // 删除全局引用
            env->DeleteGlobalRef(globalRef);
        });

        std::shared_ptr<InnerObserver3> p_function = std::make_shared<InnerObserver3>([new_function_bridge](const SwigCallbackData &data) {
            new_function_bridge->onCall(data);
        });

        new_function_bridge->original = std::weak_ptr< InnerObserver3 >(p_function);

        return *p_function;
    }

    private:
    std::mutex m_mutex;

    std::weak_ptr <InnerObserver3> original;

};

SWIGINTERN std::map< std::string,std::string,std::less< std::string > >::iterator std_map_Sl_std_string_Sc_std_string_Sg__iterator_getNextUnchecked(std::map< std::string,std::string >::iterator *self){
          std::map< std::string, std::string, std::less< std::string > >::iterator copy = (*self);
          return ++copy;
        }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_string_Sg__iterator_isNot(std::map< std::string,std::string >::iterator const *self,std::map< std::string,std::string >::iterator other){
          return (*self != other);
        }
SWIGINTERN std::string std_map_Sl_std_string_Sc_std_string_Sg__iterator_getKey(std::map< std::string,std::string >::iterator const *self){
          return (*self)->first;
        }
SWIGINTERN std::string std_map_Sl_std_string_Sc_std_string_Sg__iterator_getValue(std::map< std::string,std::string >::iterator const *self){
          return (*self)->second;
        }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__iterator_setValue(std::map< std::string,std::string >::iterator *self,std::string const &newValue){
          (*self)->second = newValue;
        }

/* Check for overflow converting to Java int (always signed 32-bit) from (unsigned variable-bit) size_t */
SWIGINTERN jint SWIG_JavaIntFromSize_t(size_t size) {
  static const jint JINT_MAX = 0x7FFFFFFF;
  return (size > (size_t)JINT_MAX) ? -1 : (jint)size;
}


  SWIGINTERN jint SWIG_MapSize(size_t size) {
    jint sz = SWIG_JavaIntFromSize_t(size);
    if (sz == -1) {
      throw std::out_of_range("map size is too large to fit into a Java int");
    }

    return sz;
  }

SWIGINTERN jint std_map_Sl_std_string_Sc_std_string_Sg__sizeImpl(std::map< std::string,std::string > const *self){
        return SWIG_MapSize(self->size());
      }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_string_Sg__containsImpl(std::map< std::string,std::string > *self,std::string const &key){
        return (self->count(key) > 0);
      }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__putUnchecked(std::map< std::string,std::string > *self,std::string const &key,std::string const &value){
#ifdef __cpp_lib_map_try_emplace
        (*self).insert_or_assign(key, value);
#else
        (*self)[key] = value;
#endif
      }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__removeUnchecked(std::map< std::string,std::string > *self,std::map< std::string,std::string,std::less< std::string > >::iterator const itr){
        self->erase(itr);
      }
SWIGINTERN std::unordered_map< std::string,std::string >::iterator std_unordered_map_Sl_std_string_Sc_std_string_Sg__iterator_getNextUnchecked(std::unordered_map< std::string,std::string >::iterator *self){
          std::unordered_map< std::string, std::string >::iterator copy = (*self);
          return ++copy;
        }
SWIGINTERN bool std_unordered_map_Sl_std_string_Sc_std_string_Sg__iterator_isNot(std::unordered_map< std::string,std::string >::iterator const *self,std::unordered_map< std::string,std::string >::iterator other){
          return (*self != other);
        }
SWIGINTERN std::string std_unordered_map_Sl_std_string_Sc_std_string_Sg__iterator_getKey(std::unordered_map< std::string,std::string >::iterator const *self){
          return (*self)->first;
        }
SWIGINTERN std::string std_unordered_map_Sl_std_string_Sc_std_string_Sg__iterator_getValue(std::unordered_map< std::string,std::string >::iterator const *self){
          return (*self)->second;
        }
SWIGINTERN void std_unordered_map_Sl_std_string_Sc_std_string_Sg__iterator_setValue(std::unordered_map< std::string,std::string >::iterator *self,std::string const &newValue){
          (*self)->second = newValue;
        }
SWIGINTERN jint std_unordered_map_Sl_std_string_Sc_std_string_Sg__sizeImpl(std::unordered_map< std::string,std::string > const *self){
        return SWIG_MapSize(self->size());
      }
SWIGINTERN bool std_unordered_map_Sl_std_string_Sc_std_string_Sg__containsImpl(std::unordered_map< std::string,std::string > *self,std::string const &key){
        return (self->count(key) > 0);
      }
SWIGINTERN void std_unordered_map_Sl_std_string_Sc_std_string_Sg__putUnchecked(std::unordered_map< std::string,std::string > *self,std::string const &key,std::string const &value){
#ifdef __cpp_lib_map_try_emplace
        (*self).insert_or_assign(key, value);
#else
        (*self)[key] = value;
#endif
      }
SWIGINTERN void std_unordered_map_Sl_std_string_Sc_std_string_Sg__removeUnchecked(std::unordered_map< std::string,std::string > *self,std::unordered_map< std::string,std::string >::iterator const itr){
        self->erase(itr);
      }
SWIGINTERN std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string >::iterator std_unordered_map_Sl_std_shared_ptr_Sl_FINFeatureFlagVariant_Sg__Sc_std_string_Sg__iterator_getNextUnchecked(std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string >::iterator *self){
          std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >, std::string >::iterator copy = (*self);
          return ++copy;
        }
SWIGINTERN bool std_unordered_map_Sl_std_shared_ptr_Sl_FINFeatureFlagVariant_Sg__Sc_std_string_Sg__iterator_isNot(std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string >::iterator const *self,std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string >::iterator other){
          return (*self != other);
        }
SWIGINTERN std::shared_ptr< FINFeatureFlagVariant > std_unordered_map_Sl_std_shared_ptr_Sl_FINFeatureFlagVariant_Sg__Sc_std_string_Sg__iterator_getKey(std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string >::iterator const *self){
          return (*self)->first;
        }
SWIGINTERN std::string std_unordered_map_Sl_std_shared_ptr_Sl_FINFeatureFlagVariant_Sg__Sc_std_string_Sg__iterator_getValue(std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string >::iterator const *self){
          return (*self)->second;
        }
SWIGINTERN void std_unordered_map_Sl_std_shared_ptr_Sl_FINFeatureFlagVariant_Sg__Sc_std_string_Sg__iterator_setValue(std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string >::iterator *self,std::string const &newValue){
          (*self)->second = newValue;
        }
SWIGINTERN jint std_unordered_map_Sl_std_shared_ptr_Sl_FINFeatureFlagVariant_Sg__Sc_std_string_Sg__sizeImpl(std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string > const *self){
        return SWIG_MapSize(self->size());
      }
SWIGINTERN bool std_unordered_map_Sl_std_shared_ptr_Sl_FINFeatureFlagVariant_Sg__Sc_std_string_Sg__containsImpl(std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string > *self,std::shared_ptr< FINFeatureFlagVariant > const &key){
        return (self->count(key) > 0);
      }
SWIGINTERN void std_unordered_map_Sl_std_shared_ptr_Sl_FINFeatureFlagVariant_Sg__Sc_std_string_Sg__putUnchecked(std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string > *self,std::shared_ptr< FINFeatureFlagVariant > const &key,std::string const &value){
#ifdef __cpp_lib_map_try_emplace
        (*self).insert_or_assign(key, value);
#else
        (*self)[key] = value;
#endif
      }
SWIGINTERN void std_unordered_map_Sl_std_shared_ptr_Sl_FINFeatureFlagVariant_Sg__Sc_std_string_Sg__removeUnchecked(std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string > *self,std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string >::iterator const itr){
        self->erase(itr);
      }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "SwigCallback_wrap.h"

SwigDirector_SwigCallbackFunctionBridge::SwigDirector_SwigCallbackFunctionBridge(JNIEnv *jenv) : SwigCallbackFunctionBridge(), Swig::Director(jenv) {
}

SwigDirector_SwigCallbackFunctionBridge::~SwigDirector_SwigCallbackFunctionBridge() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_SwigCallbackFunctionBridge::onCall(SwigCallbackData const &data) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jdata = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method SwigCallbackFunctionBridge::onCall.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jdata = 0;
    *((std::shared_ptr< const SwigCallbackData > **)&jdata) = new std::shared_ptr< const SwigCallbackData > (&data SWIG_NO_NULL_DELETER_0); 
    jenv->CallStaticVoidMethod(Swig::jclass_SwigCallbackDemoJNI, Swig::director_method_ids[0], swigjobj, jdata);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in SwigCallbackFunctionBridge::onCall ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_SwigCallbackFunctionBridge::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static jclass baseclass = swig_new_global_ref(jenv, "com/example/ndk_demo_lib1/SwigCallbackFunctionBridge");
  if (!baseclass) return;
  static SwigDirectorMethod methods[] = {
    SwigDirectorMethod(jenv, baseclass, "onCall", "(Lcom/example/ndk_demo_lib1/SwigCallbackData;)V")
  };
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].name, methods[i].desc);
        swig_override[i] = methods[i].methid && (methid != methods[i].methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_SwigCallbackFunction1Bridge::SwigDirector_SwigCallbackFunction1Bridge(JNIEnv *jenv) : SwigCallbackFunction1Bridge(), Swig::Director(jenv) {
}

SwigDirector_SwigCallbackFunction1Bridge::~SwigDirector_SwigCallbackFunction1Bridge() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_SwigCallbackFunction1Bridge::onCall(SwigCallbackData const &data) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jdata = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method SwigCallbackFunction1Bridge::onCall.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jdata = 0;
    *((std::shared_ptr< const SwigCallbackData > **)&jdata) = new std::shared_ptr< const SwigCallbackData > (&data SWIG_NO_NULL_DELETER_0); 
    jenv->CallStaticVoidMethod(Swig::jclass_SwigCallbackDemoJNI, Swig::director_method_ids[1], swigjobj, jdata);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in SwigCallbackFunction1Bridge::onCall ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_SwigCallbackFunction1Bridge::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static jclass baseclass = swig_new_global_ref(jenv, "com/example/ndk_demo_lib1/SwigCallbackFunction1Bridge");
  if (!baseclass) return;
  static SwigDirectorMethod methods[] = {
    SwigDirectorMethod(jenv, baseclass, "onCall", "(Lcom/example/ndk_demo_lib1/SwigCallbackData;)V")
  };
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].name, methods[i].desc);
        swig_override[i] = methods[i].methid && (methid != methods[i].methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_InnerObserver2Bridge::SwigDirector_InnerObserver2Bridge(JNIEnv *jenv) : InnerObserver2Bridge(), Swig::Director(jenv) {
}

SwigDirector_InnerObserver2Bridge::~SwigDirector_InnerObserver2Bridge() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_InnerObserver2Bridge::onCall(SwigCallbackData const &data) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jdata = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method InnerObserver2Bridge::onCall.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jdata = 0;
    *((std::shared_ptr< const SwigCallbackData > **)&jdata) = new std::shared_ptr< const SwigCallbackData > (&data SWIG_NO_NULL_DELETER_0); 
    jenv->CallStaticVoidMethod(Swig::jclass_SwigCallbackDemoJNI, Swig::director_method_ids[2], swigjobj, jdata);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in InnerObserver2Bridge::onCall ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_InnerObserver2Bridge::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static jclass baseclass = swig_new_global_ref(jenv, "com/example/ndk_demo_lib1/InnerObserver2Bridge");
  if (!baseclass) return;
  static SwigDirectorMethod methods[] = {
    SwigDirectorMethod(jenv, baseclass, "onCall", "(Lcom/example/ndk_demo_lib1/SwigCallbackData;)V")
  };
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].name, methods[i].desc);
        swig_override[i] = methods[i].methid && (methid != methods[i].methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_InnerObserver3Bridge::SwigDirector_InnerObserver3Bridge(JNIEnv *jenv) : InnerObserver3Bridge(), Swig::Director(jenv) {
}

SwigDirector_InnerObserver3Bridge::~SwigDirector_InnerObserver3Bridge() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_InnerObserver3Bridge::onCall(SwigCallbackData const &data) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jdata = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method InnerObserver3Bridge::onCall.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jdata = 0;
    *((std::shared_ptr< const SwigCallbackData > **)&jdata) = new std::shared_ptr< const SwigCallbackData > (&data SWIG_NO_NULL_DELETER_0); 
    jenv->CallStaticVoidMethod(Swig::jclass_SwigCallbackDemoJNI, Swig::director_method_ids[3], swigjobj, jdata);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in InnerObserver3Bridge::onCall ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_InnerObserver3Bridge::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static jclass baseclass = swig_new_global_ref(jenv, "com/example/ndk_demo_lib1/InnerObserver3Bridge");
  if (!baseclass) return;
  static SwigDirectorMethod methods[] = {
    SwigDirectorMethod(jenv, baseclass, "onCall", "(Lcom/example/ndk_demo_lib1/SwigCallbackData;)V")
  };
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].name, methods[i].desc);
        swig_override[i] = methods[i].methid && (methid != methods[i].methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_InnerObserver::SwigDirector_InnerObserver(JNIEnv *jenv) : InnerObserver(), Swig::Director(jenv) {
}

SwigDirector_InnerObserver::~SwigDirector_InnerObserver() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_InnerObserver::onTest1(std::shared_ptr< SwigCallbackData > data1) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jdata1  ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method InnerObserver::onTest1.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jdata1 = 0;
    if (data1) {
      *((std::shared_ptr<  SwigCallbackData > **)&jdata1) = new std::shared_ptr<  SwigCallbackData >(data1);
    } 
    jenv->CallStaticVoidMethod(Swig::jclass_SwigCallbackDemoJNI, Swig::director_method_ids[4], swigjobj, jdata1);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in InnerObserver::onTest1 ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_InnerObserver::setOptional(std::optional< FINFeatureFlagVariant > opt) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jopt  ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method InnerObserver::setOptional.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    if ((&opt)->has_value()) {
      *(shared_ptr<FINFeatureFlagVariant>**)&jopt = new shared_ptr<FINFeatureFlagVariant>(new FINFeatureFlagVariant((&opt)->value()));
    } else {
      jopt = 0;
    }
    
    jenv->CallStaticVoidMethod(Swig::jclass_SwigCallbackDemoJNI, Swig::director_method_ids[5], swigjobj, jopt);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in InnerObserver::setOptional ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_InnerObserver::setOptional2(std::optional< FINFeatureFlagVariant > &opt) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jopt = 0 ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method InnerObserver::setOptional2.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    if ((&opt)->has_value()) {
      *(shared_ptr<FINFeatureFlagVariant>**)&jopt = new shared_ptr<FINFeatureFlagVariant>(new FINFeatureFlagVariant((&opt)->value()));
    } else {
      jopt = 0;
    }
    
    jenv->CallStaticVoidMethod(Swig::jclass_SwigCallbackDemoJNI, Swig::director_method_ids[6], swigjobj, jopt);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in InnerObserver::setOptional2 ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::optional< FINFeatureFlagVariant > SwigDirector_InnerObserver::getOptional() {
  SwigValueWrapper< std::optional< FINFeatureFlagVariant > > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method InnerObserver::getOptional.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_SwigCallbackDemoJNI, Swig::director_method_ids[7], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    
    if (jresult == 0) {
      c_result = std::nullopt;
    } else {
      c_result = *((std::shared_ptr<FINFeatureFlagVariant>*)jresult)->get();
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in InnerObserver::getOptional ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::optional< FINFeatureFlagVariant > SwigDirector_InnerObserver::getOptional2() {
  SwigValueWrapper< std::optional< FINFeatureFlagVariant > > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[4]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method InnerObserver::getOptional2.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_SwigCallbackDemoJNI, Swig::director_method_ids[8], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    
    if (jresult == 0) {
      c_result = std::nullopt;
    } else {
      c_result = *((std::shared_ptr<FINFeatureFlagVariant>*)jresult)->get();
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in InnerObserver::getOptional2 ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_InnerObserver::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static jclass baseclass = swig_new_global_ref(jenv, "com/example/ndk_demo_lib1/InnerObserver");
  if (!baseclass) return;
  static SwigDirectorMethod methods[] = {
    SwigDirectorMethod(jenv, baseclass, "onTest1", "(Lcom/example/ndk_demo_lib1/SwigCallbackData;)V"),
    SwigDirectorMethod(jenv, baseclass, "setOptional", "(Lcom/example/ndk_demo_lib1/FINFeatureFlagVariant;)V"),
    SwigDirectorMethod(jenv, baseclass, "setOptional2", "(Lcom/example/ndk_demo_lib1/FINFeatureFlagVariant;)V"),
    SwigDirectorMethod(jenv, baseclass, "getOptional", "()Lcom/example/ndk_demo_lib1/FINFeatureFlagVariant;"),
    SwigDirectorMethod(jenv, baseclass, "getOptional2", "()Lcom/example/ndk_demo_lib1/FINFeatureFlagVariant;")
  };
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 5; ++i) {
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].name, methods[i].desc);
        swig_override[i] = methods[i].methid && (methid != methods[i].methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_delete_1SwigCallbackFunctionBridge(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SwigCallbackFunctionBridge *arg1 = (SwigCallbackFunctionBridge *) 0 ;
  std::shared_ptr< SwigCallbackFunctionBridge > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  SwigCallbackFunctionBridge > **)&jarg1;
  arg1 = (SwigCallbackFunctionBridge *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_SwigCallbackFunctionBridge_1onCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SwigCallbackFunctionBridge *arg1 = (SwigCallbackFunctionBridge *) 0 ;
  SwigCallbackData *arg2 = 0 ;
  std::shared_ptr< SwigCallbackFunctionBridge > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  SwigCallbackFunctionBridge > **)&jarg1;
  arg1 = (SwigCallbackFunctionBridge *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (SwigCallbackData *)((*(std::shared_ptr< const SwigCallbackData > **)&jarg2) ? (*(std::shared_ptr< const SwigCallbackData > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SwigCallbackData const & reference is null");
    return ;
  } 
  (arg1)->onCall((SwigCallbackData const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_new_1SwigCallbackFunctionBridge(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigCallbackFunctionBridge *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SwigCallbackFunctionBridge *)new SwigDirector_SwigCallbackFunctionBridge(jenv);
  
  *(std::shared_ptr<  SwigCallbackFunctionBridge > **)&jresult = result ? new std::shared_ptr<  SwigCallbackFunctionBridge >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_SwigCallbackFunctionBridge_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< SwigCallbackFunctionBridge > *obj = *((std::shared_ptr< SwigCallbackFunctionBridge > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_SwigCallbackFunctionBridge *director = static_cast<SwigDirector_SwigCallbackFunctionBridge *>(obj->operator->());
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_SwigCallbackFunctionBridge_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  std::shared_ptr< SwigCallbackFunctionBridge > *obj = *((std::shared_ptr< SwigCallbackFunctionBridge > **)&objarg);
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_SwigCallbackFunctionBridge *director = dynamic_cast<SwigDirector_SwigCallbackFunctionBridge *>(obj->operator->());
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_delete_1SwigCallbackFunction1Bridge(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SwigCallbackFunction1Bridge *arg1 = (SwigCallbackFunction1Bridge *) 0 ;
  std::shared_ptr< SwigCallbackFunction1Bridge > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  SwigCallbackFunction1Bridge > **)&jarg1;
  arg1 = (SwigCallbackFunction1Bridge *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_SwigCallbackFunction1Bridge_1onCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SwigCallbackFunction1Bridge *arg1 = (SwigCallbackFunction1Bridge *) 0 ;
  SwigCallbackData *arg2 = 0 ;
  std::shared_ptr< SwigCallbackFunction1Bridge > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  SwigCallbackFunction1Bridge > **)&jarg1;
  arg1 = (SwigCallbackFunction1Bridge *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (SwigCallbackData *)((*(std::shared_ptr< const SwigCallbackData > **)&jarg2) ? (*(std::shared_ptr< const SwigCallbackData > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SwigCallbackData const & reference is null");
    return ;
  } 
  (arg1)->onCall((SwigCallbackData const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_new_1SwigCallbackFunction1Bridge(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigCallbackFunction1Bridge *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SwigCallbackFunction1Bridge *)new SwigDirector_SwigCallbackFunction1Bridge(jenv);
  
  *(std::shared_ptr<  SwigCallbackFunction1Bridge > **)&jresult = result ? new std::shared_ptr<  SwigCallbackFunction1Bridge >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_SwigCallbackFunction1Bridge_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< SwigCallbackFunction1Bridge > *obj = *((std::shared_ptr< SwigCallbackFunction1Bridge > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_SwigCallbackFunction1Bridge *director = static_cast<SwigDirector_SwigCallbackFunction1Bridge *>(obj->operator->());
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_SwigCallbackFunction1Bridge_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  std::shared_ptr< SwigCallbackFunction1Bridge > *obj = *((std::shared_ptr< SwigCallbackFunction1Bridge > **)&objarg);
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_SwigCallbackFunction1Bridge *director = dynamic_cast<SwigDirector_SwigCallbackFunction1Bridge *>(obj->operator->());
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_delete_1InnerObserver2Bridge(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  InnerObserver2Bridge *arg1 = (InnerObserver2Bridge *) 0 ;
  std::shared_ptr< InnerObserver2Bridge > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  InnerObserver2Bridge > **)&jarg1;
  arg1 = (InnerObserver2Bridge *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_InnerObserver2Bridge_1onCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  InnerObserver2Bridge *arg1 = (InnerObserver2Bridge *) 0 ;
  SwigCallbackData *arg2 = 0 ;
  std::shared_ptr< InnerObserver2Bridge > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  InnerObserver2Bridge > **)&jarg1;
  arg1 = (InnerObserver2Bridge *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (SwigCallbackData *)((*(std::shared_ptr< const SwigCallbackData > **)&jarg2) ? (*(std::shared_ptr< const SwigCallbackData > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SwigCallbackData const & reference is null");
    return ;
  } 
  (arg1)->onCall((SwigCallbackData const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_new_1InnerObserver2Bridge(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  InnerObserver2Bridge *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (InnerObserver2Bridge *)new SwigDirector_InnerObserver2Bridge(jenv);
  
  *(std::shared_ptr<  InnerObserver2Bridge > **)&jresult = result ? new std::shared_ptr<  InnerObserver2Bridge >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_InnerObserver2Bridge_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< InnerObserver2Bridge > *obj = *((std::shared_ptr< InnerObserver2Bridge > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_InnerObserver2Bridge *director = static_cast<SwigDirector_InnerObserver2Bridge *>(obj->operator->());
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_InnerObserver2Bridge_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  std::shared_ptr< InnerObserver2Bridge > *obj = *((std::shared_ptr< InnerObserver2Bridge > **)&objarg);
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_InnerObserver2Bridge *director = dynamic_cast<SwigDirector_InnerObserver2Bridge *>(obj->operator->());
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_delete_1InnerObserver3Bridge(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  InnerObserver3Bridge *arg1 = (InnerObserver3Bridge *) 0 ;
  std::shared_ptr< InnerObserver3Bridge > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  InnerObserver3Bridge > **)&jarg1;
  arg1 = (InnerObserver3Bridge *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_InnerObserver3Bridge_1onCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  InnerObserver3Bridge *arg1 = (InnerObserver3Bridge *) 0 ;
  SwigCallbackData *arg2 = 0 ;
  std::shared_ptr< InnerObserver3Bridge > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  InnerObserver3Bridge > **)&jarg1;
  arg1 = (InnerObserver3Bridge *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (SwigCallbackData *)((*(std::shared_ptr< const SwigCallbackData > **)&jarg2) ? (*(std::shared_ptr< const SwigCallbackData > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SwigCallbackData const & reference is null");
    return ;
  } 
  (arg1)->onCall((SwigCallbackData const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_new_1InnerObserver3Bridge(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  InnerObserver3Bridge *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (InnerObserver3Bridge *)new SwigDirector_InnerObserver3Bridge(jenv);
  
  *(std::shared_ptr<  InnerObserver3Bridge > **)&jresult = result ? new std::shared_ptr<  InnerObserver3Bridge >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_InnerObserver3Bridge_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< InnerObserver3Bridge > *obj = *((std::shared_ptr< InnerObserver3Bridge > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_InnerObserver3Bridge *director = static_cast<SwigDirector_InnerObserver3Bridge *>(obj->operator->());
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_InnerObserver3Bridge_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  std::shared_ptr< InnerObserver3Bridge > *obj = *((std::shared_ptr< InnerObserver3Bridge > **)&objarg);
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_InnerObserver3Bridge *director = dynamic_cast<SwigDirector_InnerObserver3Bridge *>(obj->operator->());
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_new_1Str2StrMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >();
  *(std::map< std::string,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_new_1Str2StrMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > *arg1 = 0 ;
  std::map< std::string,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string > const & is null");
    return 0;
  } 
  result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >((std::map< std::string,std::string > const &)*arg1);
  *(std::map< std::string,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_Str2StrMap_1Iterator_1getNextUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,std::string >::iterator *arg1 = (std::map< std::string,std::string >::iterator *) 0 ;
  std::map< std::string,std::string,std::less< std::string > >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string >::iterator **)&jarg1; 
  result = std_map_Sl_std_string_Sc_std_string_Sg__iterator_getNextUnchecked(arg1);
  *(std::map< std::string,std::string,std::less< std::string > >::iterator **)&jresult = new std::map< std::string,std::string,std::less< std::string > >::iterator(result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_Str2StrMap_1Iterator_1isNot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::map< std::string,std::string >::iterator *arg1 = (std::map< std::string,std::string >::iterator *) 0 ;
  std::map< std::string,std::string >::iterator arg2 ;
  std::map< std::string,std::string >::iterator *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< std::string,std::string >::iterator **)&jarg1; 
  argp2 = *(std::map< std::string,std::string >::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< std::string,std::string >::iterator");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)std_map_Sl_std_string_Sc_std_string_Sg__iterator_isNot((std::map< std::string,std::string >::iterator const *)arg1,SWIG_STD_MOVE(arg2));
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_Str2StrMap_1Iterator_1getKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::map< std::string,std::string >::iterator *arg1 = (std::map< std::string,std::string >::iterator *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string >::iterator **)&jarg1; 
  result = std_map_Sl_std_string_Sc_std_string_Sg__iterator_getKey((std::map< std::string,std::string >::iterator const *)arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_Str2StrMap_1Iterator_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::map< std::string,std::string >::iterator *arg1 = (std::map< std::string,std::string >::iterator *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string >::iterator **)&jarg1; 
  result = std_map_Sl_std_string_Sc_std_string_Sg__iterator_getValue((std::map< std::string,std::string >::iterator const *)arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_Str2StrMap_1Iterator_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::map< std::string,std::string >::iterator *arg1 = (std::map< std::string,std::string >::iterator *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string >::iterator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  std_map_Sl_std_string_Sc_std_string_Sg__iterator_setValue(arg1,(std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_delete_1Str2StrMap_1Iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< std::string,std::string >::iterator *arg1 = (std::map< std::string,std::string >::iterator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< std::string,std::string >::iterator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_Str2StrMap_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  result = (bool)((std::map< std::string,std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_Str2StrMap_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_Str2StrMap_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  std::map< std::string,std::string >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->find((std::string const &)*arg2);
  *(std::map< std::string,std::string >::iterator **)&jresult = new std::map< std::string,std::string >::iterator(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_Str2StrMap_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  result = (arg1)->begin();
  *(std::map< std::string,std::string >::iterator **)&jresult = new std::map< std::string,std::string >::iterator(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_Str2StrMap_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  result = (arg1)->end();
  *(std::map< std::string,std::string >::iterator **)&jresult = new std::map< std::string,std::string >::iterator(result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_Str2StrMap_1sizeImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  try {
    result = std_map_Sl_std_string_Sc_std_string_Sg__sizeImpl((std::map< std::string,std::string > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_Str2StrMap_1containsImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)std_map_Sl_std_string_Sc_std_string_Sg__containsImpl(arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_Str2StrMap_1putUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  std_map_Sl_std_string_Sc_std_string_Sg__putUnchecked(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_Str2StrMap_1removeUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string,std::less< std::string > >::iterator arg2 ;
  std::map< std::string,std::string,std::less< std::string > >::iterator const *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  argp2 = *(std::map< std::string,std::string,std::less< std::string > >::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< std::string,std::string,std::less< std::string > >::iterator const");
    return ;
  }
  arg2 = *argp2; 
  std_map_Sl_std_string_Sc_std_string_Sg__removeUnchecked(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_delete_1Str2StrMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_new_1UnorderedStr2StrMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::unordered_map< std::string,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::unordered_map< std::string,std::string > *)new std::unordered_map< std::string,std::string >();
  *(std::unordered_map< std::string,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_new_1UnorderedStr2StrMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::unordered_map< std::string,std::string > *arg1 = 0 ;
  std::unordered_map< std::string,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::unordered_map< std::string,std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unordered_map< std::string,std::string > const & is null");
    return 0;
  } 
  result = (std::unordered_map< std::string,std::string > *)new std::unordered_map< std::string,std::string >((std::unordered_map< std::string,std::string > const &)*arg1);
  *(std::unordered_map< std::string,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_UnorderedStr2StrMap_1Iterator_1getNextUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::unordered_map< std::string,std::string >::iterator *arg1 = (std::unordered_map< std::string,std::string >::iterator *) 0 ;
  std::unordered_map< std::string,std::string >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::unordered_map< std::string,std::string >::iterator **)&jarg1; 
  result = std_unordered_map_Sl_std_string_Sc_std_string_Sg__iterator_getNextUnchecked(arg1);
  *(std::unordered_map< std::string,std::string >::iterator **)&jresult = new std::unordered_map< std::string,std::string >::iterator(result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_UnorderedStr2StrMap_1Iterator_1isNot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::unordered_map< std::string,std::string >::iterator *arg1 = (std::unordered_map< std::string,std::string >::iterator *) 0 ;
  std::unordered_map< std::string,std::string >::iterator arg2 ;
  std::unordered_map< std::string,std::string >::iterator *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::unordered_map< std::string,std::string >::iterator **)&jarg1; 
  argp2 = *(std::unordered_map< std::string,std::string >::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::unordered_map< std::string,std::string >::iterator");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)std_unordered_map_Sl_std_string_Sc_std_string_Sg__iterator_isNot((std::unordered_map< std::string,std::string >::iterator const *)arg1,SWIG_STD_MOVE(arg2));
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_UnorderedStr2StrMap_1Iterator_1getKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::unordered_map< std::string,std::string >::iterator *arg1 = (std::unordered_map< std::string,std::string >::iterator *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::unordered_map< std::string,std::string >::iterator **)&jarg1; 
  result = std_unordered_map_Sl_std_string_Sc_std_string_Sg__iterator_getKey((std::unordered_map< std::string,std::string >::iterator const *)arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_UnorderedStr2StrMap_1Iterator_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::unordered_map< std::string,std::string >::iterator *arg1 = (std::unordered_map< std::string,std::string >::iterator *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::unordered_map< std::string,std::string >::iterator **)&jarg1; 
  result = std_unordered_map_Sl_std_string_Sc_std_string_Sg__iterator_getValue((std::unordered_map< std::string,std::string >::iterator const *)arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_UnorderedStr2StrMap_1Iterator_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::unordered_map< std::string,std::string >::iterator *arg1 = (std::unordered_map< std::string,std::string >::iterator *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::unordered_map< std::string,std::string >::iterator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  std_unordered_map_Sl_std_string_Sc_std_string_Sg__iterator_setValue(arg1,(std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_delete_1UnorderedStr2StrMap_1Iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::unordered_map< std::string,std::string >::iterator *arg1 = (std::unordered_map< std::string,std::string >::iterator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::unordered_map< std::string,std::string >::iterator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_UnorderedStr2StrMap_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::unordered_map< std::string,std::string > *arg1 = (std::unordered_map< std::string,std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::unordered_map< std::string,std::string > **)&jarg1; 
  result = (bool)((std::unordered_map< std::string,std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_UnorderedStr2StrMap_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::unordered_map< std::string,std::string > *arg1 = (std::unordered_map< std::string,std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::unordered_map< std::string,std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_UnorderedStr2StrMap_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  std::unordered_map< std::string,std::string > *arg1 = (std::unordered_map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  std::unordered_map< std::string,std::string >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::unordered_map< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->find((std::string const &)*arg2);
  *(std::unordered_map< std::string,std::string >::iterator **)&jresult = new std::unordered_map< std::string,std::string >::iterator(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_UnorderedStr2StrMap_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::unordered_map< std::string,std::string > *arg1 = (std::unordered_map< std::string,std::string > *) 0 ;
  std::unordered_map< std::string,std::string >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::unordered_map< std::string,std::string > **)&jarg1; 
  result = (arg1)->begin();
  *(std::unordered_map< std::string,std::string >::iterator **)&jresult = new std::unordered_map< std::string,std::string >::iterator(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_UnorderedStr2StrMap_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::unordered_map< std::string,std::string > *arg1 = (std::unordered_map< std::string,std::string > *) 0 ;
  std::unordered_map< std::string,std::string >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::unordered_map< std::string,std::string > **)&jarg1; 
  result = (arg1)->end();
  *(std::unordered_map< std::string,std::string >::iterator **)&jresult = new std::unordered_map< std::string,std::string >::iterator(result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_UnorderedStr2StrMap_1sizeImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::unordered_map< std::string,std::string > *arg1 = (std::unordered_map< std::string,std::string > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::unordered_map< std::string,std::string > **)&jarg1; 
  try {
    result = std_unordered_map_Sl_std_string_Sc_std_string_Sg__sizeImpl((std::unordered_map< std::string,std::string > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_UnorderedStr2StrMap_1containsImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  std::unordered_map< std::string,std::string > *arg1 = (std::unordered_map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::unordered_map< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)std_unordered_map_Sl_std_string_Sc_std_string_Sg__containsImpl(arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_UnorderedStr2StrMap_1putUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  std::unordered_map< std::string,std::string > *arg1 = (std::unordered_map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::unordered_map< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  std_unordered_map_Sl_std_string_Sc_std_string_Sg__putUnchecked(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_UnorderedStr2StrMap_1removeUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::unordered_map< std::string,std::string > *arg1 = (std::unordered_map< std::string,std::string > *) 0 ;
  std::unordered_map< std::string,std::string >::iterator arg2 ;
  std::unordered_map< std::string,std::string >::iterator const *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::unordered_map< std::string,std::string > **)&jarg1; 
  argp2 = *(std::unordered_map< std::string,std::string >::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::unordered_map< std::string,std::string >::iterator const");
    return ;
  }
  arg2 = *argp2; 
  std_unordered_map_Sl_std_string_Sc_std_string_Sg__removeUnchecked(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_delete_1UnorderedStr2StrMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::unordered_map< std::string,std::string > *arg1 = (std::unordered_map< std::string,std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::unordered_map< std::string,std::string > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_new_1FeatureFlagVariant2StrMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string > *)new std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string >();
  *(std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_new_1FeatureFlagVariant2StrMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string > *arg1 = 0 ;
  std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string > const & is null");
    return 0;
  } 
  result = (std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string > *)new std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string >((std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string > const &)*arg1);
  *(std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_FeatureFlagVariant2StrMap_1Iterator_1getNextUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string >::iterator *arg1 = (std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string >::iterator *) 0 ;
  std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string >::iterator **)&jarg1; 
  result = std_unordered_map_Sl_std_shared_ptr_Sl_FINFeatureFlagVariant_Sg__Sc_std_string_Sg__iterator_getNextUnchecked(arg1);
  *(std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string >::iterator **)&jresult = new std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string >::iterator(result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_FeatureFlagVariant2StrMap_1Iterator_1isNot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string >::iterator *arg1 = (std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string >::iterator *) 0 ;
  std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string >::iterator arg2 ;
  std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string >::iterator *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string >::iterator **)&jarg1; 
  argp2 = *(std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string >::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string >::iterator");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)std_unordered_map_Sl_std_shared_ptr_Sl_FINFeatureFlagVariant_Sg__Sc_std_string_Sg__iterator_isNot((std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string >::iterator const *)arg1,SWIG_STD_MOVE(arg2));
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_FeatureFlagVariant2StrMap_1Iterator_1getKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string >::iterator *arg1 = (std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string >::iterator *) 0 ;
  std::shared_ptr< FINFeatureFlagVariant > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string >::iterator **)&jarg1; 
  result = std_unordered_map_Sl_std_shared_ptr_Sl_FINFeatureFlagVariant_Sg__Sc_std_string_Sg__iterator_getKey((std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string >::iterator const *)arg1);
  *(std::shared_ptr< FINFeatureFlagVariant > **)&jresult = result ? new std::shared_ptr< FINFeatureFlagVariant >(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_FeatureFlagVariant2StrMap_1Iterator_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string >::iterator *arg1 = (std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string >::iterator *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string >::iterator **)&jarg1; 
  result = std_unordered_map_Sl_std_shared_ptr_Sl_FINFeatureFlagVariant_Sg__Sc_std_string_Sg__iterator_getValue((std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string >::iterator const *)arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_FeatureFlagVariant2StrMap_1Iterator_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string >::iterator *arg1 = (std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string >::iterator *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string >::iterator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  std_unordered_map_Sl_std_shared_ptr_Sl_FINFeatureFlagVariant_Sg__Sc_std_string_Sg__iterator_setValue(arg1,(std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_delete_1FeatureFlagVariant2StrMap_1Iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string >::iterator *arg1 = (std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string >::iterator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string >::iterator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_FeatureFlagVariant2StrMap_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string > *arg1 = (std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string > **)&jarg1; 
  result = (bool)((std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_FeatureFlagVariant2StrMap_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string > *arg1 = (std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_FeatureFlagVariant2StrMap_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string > *arg1 = (std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string > *) 0 ;
  std::shared_ptr< FINFeatureFlagVariant > *arg2 = 0 ;
  std::shared_ptr< FINFeatureFlagVariant > tempnull2 ;
  std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string > **)&jarg1; 
  arg2 = jarg2 ? *(std::shared_ptr< FINFeatureFlagVariant > **)&jarg2 : &tempnull2; 
  result = (arg1)->find((std::shared_ptr< FINFeatureFlagVariant > const &)*arg2);
  *(std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string >::iterator **)&jresult = new std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string >::iterator(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_FeatureFlagVariant2StrMap_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string > *arg1 = (std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string > *) 0 ;
  std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string > **)&jarg1; 
  result = (arg1)->begin();
  *(std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string >::iterator **)&jresult = new std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string >::iterator(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_FeatureFlagVariant2StrMap_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string > *arg1 = (std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string > *) 0 ;
  std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string > **)&jarg1; 
  result = (arg1)->end();
  *(std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string >::iterator **)&jresult = new std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string >::iterator(result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_FeatureFlagVariant2StrMap_1sizeImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string > *arg1 = (std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string > **)&jarg1; 
  try {
    result = std_unordered_map_Sl_std_shared_ptr_Sl_FINFeatureFlagVariant_Sg__Sc_std_string_Sg__sizeImpl((std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_FeatureFlagVariant2StrMap_1containsImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string > *arg1 = (std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string > *) 0 ;
  std::shared_ptr< FINFeatureFlagVariant > *arg2 = 0 ;
  std::shared_ptr< FINFeatureFlagVariant > tempnull2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string > **)&jarg1; 
  arg2 = jarg2 ? *(std::shared_ptr< FINFeatureFlagVariant > **)&jarg2 : &tempnull2; 
  result = (bool)std_unordered_map_Sl_std_shared_ptr_Sl_FINFeatureFlagVariant_Sg__Sc_std_string_Sg__containsImpl(arg1,(std::shared_ptr< FINFeatureFlagVariant > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_FeatureFlagVariant2StrMap_1putUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string > *arg1 = (std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string > *) 0 ;
  std::shared_ptr< FINFeatureFlagVariant > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::shared_ptr< FINFeatureFlagVariant > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string > **)&jarg1; 
  arg2 = jarg2 ? *(std::shared_ptr< FINFeatureFlagVariant > **)&jarg2 : &tempnull2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  std_unordered_map_Sl_std_shared_ptr_Sl_FINFeatureFlagVariant_Sg__Sc_std_string_Sg__putUnchecked(arg1,(std::shared_ptr< FINFeatureFlagVariant > const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_FeatureFlagVariant2StrMap_1removeUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string > *arg1 = (std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string > *) 0 ;
  std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string >::iterator arg2 ;
  std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string >::iterator const *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string > **)&jarg1; 
  argp2 = *(std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string >::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string >::iterator const");
    return ;
  }
  arg2 = *argp2; 
  std_unordered_map_Sl_std_shared_ptr_Sl_FINFeatureFlagVariant_Sg__Sc_std_string_Sg__removeUnchecked(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_delete_1FeatureFlagVariant2StrMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string > *arg1 = (std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::unordered_map< std::shared_ptr< FINFeatureFlagVariant >,std::string > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_FINFeatureFlagVariant_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  FINFeatureFlagVariant *arg1 = (FINFeatureFlagVariant *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< FINFeatureFlagVariant > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  FINFeatureFlagVariant > **)&jarg1;
  arg1 = (FINFeatureFlagVariant *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_FINFeatureFlagVariant_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  FINFeatureFlagVariant *arg1 = (FINFeatureFlagVariant *) 0 ;
  std::shared_ptr< FINFeatureFlagVariant > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  FINFeatureFlagVariant > **)&jarg1;
  arg1 = (FINFeatureFlagVariant *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->name);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_FINFeatureFlagVariant_1payload_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  FINFeatureFlagVariant *arg1 = (FINFeatureFlagVariant *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< FINFeatureFlagVariant > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  FINFeatureFlagVariant > **)&jarg1;
  arg1 = (FINFeatureFlagVariant *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->payload = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_FINFeatureFlagVariant_1payload_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  FINFeatureFlagVariant *arg1 = (FINFeatureFlagVariant *) 0 ;
  std::shared_ptr< FINFeatureFlagVariant > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  FINFeatureFlagVariant > **)&jarg1;
  arg1 = (FINFeatureFlagVariant *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->payload);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_FINFeatureFlagVariant_1str_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  FINFeatureFlagVariant *arg1 = (FINFeatureFlagVariant *) 0 ;
  std::optional< std::string > *arg2 = 0 ;
  std::shared_ptr< FINFeatureFlagVariant > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  FINFeatureFlagVariant > **)&jarg1;
  arg1 = (FINFeatureFlagVariant *)(smartarg1 ? smartarg1->get() : 0); 
  
  const char* c_result_pstr = jenv->GetStringUTFChars(jarg2, nullptr);
  *arg2 = std::make_optional<std::string>(c_result_pstr);
  jenv->ReleaseStringUTFChars(jarg2, c_result_pstr);
  
  if (arg1) (arg1)->str = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_FINFeatureFlagVariant_1str_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  FINFeatureFlagVariant *arg1 = (FINFeatureFlagVariant *) 0 ;
  std::shared_ptr< FINFeatureFlagVariant > *smartarg1 = 0 ;
  std::optional< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  FINFeatureFlagVariant > **)&jarg1;
  arg1 = (FINFeatureFlagVariant *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::optional< std::string > *) & ((arg1)->str);
  
  if ((*result).has_value()) {
    jresult = jenv->NewStringUTF((*result).value().c_str());
  } else {
    jresult = nullptr;
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_new_1FINFeatureFlagVariant(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FINFeatureFlagVariant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FINFeatureFlagVariant *)new FINFeatureFlagVariant();
  
  *(std::shared_ptr<  FINFeatureFlagVariant > **)&jresult = result ? new std::shared_ptr<  FINFeatureFlagVariant >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_delete_1FINFeatureFlagVariant(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FINFeatureFlagVariant *arg1 = (FINFeatureFlagVariant *) 0 ;
  std::shared_ptr< FINFeatureFlagVariant > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  FINFeatureFlagVariant > **)&jarg1;
  arg1 = (FINFeatureFlagVariant *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_FINFeatureFlagModel_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  FINFeatureFlagModel *arg1 = (FINFeatureFlagModel *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FINFeatureFlagModel **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->id = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_FINFeatureFlagModel_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  FINFeatureFlagModel *arg1 = (FINFeatureFlagModel *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FINFeatureFlagModel **)&jarg1; 
  result = (std::string *) & ((arg1)->id);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_FINFeatureFlagModel_1variant1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  FINFeatureFlagModel *arg1 = (FINFeatureFlagModel *) 0 ;
  FINFeatureFlagVariant *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FINFeatureFlagModel **)&jarg1; 
  
  arg2 = (FINFeatureFlagVariant *)((*(std::shared_ptr< const FINFeatureFlagVariant > **)&jarg2) ? (*(std::shared_ptr< const FINFeatureFlagVariant > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FINFeatureFlagVariant const & reference is null");
    return ;
  } 
  if (arg1) (arg1)->variant1 = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_FINFeatureFlagModel_1variant1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FINFeatureFlagModel *arg1 = (FINFeatureFlagModel *) 0 ;
  FINFeatureFlagVariant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FINFeatureFlagModel **)&jarg1; 
  result = (FINFeatureFlagVariant *) & ((arg1)->variant1);
  *(std::shared_ptr< const FINFeatureFlagVariant > **)&jresult = new std::shared_ptr< const FINFeatureFlagVariant >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_FINFeatureFlagModel_1variant2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  FINFeatureFlagModel *arg1 = (FINFeatureFlagModel *) 0 ;
  std::shared_ptr< FINFeatureFlagVariant > *arg2 = 0 ;
  std::shared_ptr< FINFeatureFlagVariant > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FINFeatureFlagModel **)&jarg1; 
  arg2 = jarg2 ? *(std::shared_ptr< FINFeatureFlagVariant > **)&jarg2 : &tempnull2; 
  if (arg1) (arg1)->variant2 = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_FINFeatureFlagModel_1variant2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FINFeatureFlagModel *arg1 = (FINFeatureFlagModel *) 0 ;
  std::shared_ptr< FINFeatureFlagVariant > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FINFeatureFlagModel **)&jarg1; 
  result = (std::shared_ptr< FINFeatureFlagVariant > *) & ((arg1)->variant2);
  *(std::shared_ptr< FINFeatureFlagVariant > **)&jresult = *result ? new std::shared_ptr< FINFeatureFlagVariant >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_FINFeatureFlagModel_1variant3_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  FINFeatureFlagModel *arg1 = (FINFeatureFlagModel *) 0 ;
  std::optional< FINFeatureFlagVariant > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FINFeatureFlagModel **)&jarg1; 
  
  FINFeatureFlagVariant* jarg2_element = ((std::shared_ptr< FINFeatureFlagVariant >*)jarg2)->get();
  if (jarg2_element) {
    std::optional<FINFeatureFlagVariant> tmp_arg2 = std::make_optional<FINFeatureFlagVariant>(*jarg2_element);
    arg2 = &tmp_arg2;
  } else {
    std::optional<FINFeatureFlagVariant> tmp_arg2 = std::nullopt;
    arg2 = &tmp_arg2;
  }
  
  if (arg1) (arg1)->variant3 = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_FINFeatureFlagModel_1variant3_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FINFeatureFlagModel *arg1 = (FINFeatureFlagModel *) 0 ;
  std::optional< FINFeatureFlagVariant > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FINFeatureFlagModel **)&jarg1; 
  result = (std::optional< FINFeatureFlagVariant > *) & ((arg1)->variant3);
  
  if (result->has_value()) {
    FINFeatureFlagVariant* value_ptr = new FINFeatureFlagVariant(result->value());
    *(std::shared_ptr<FINFeatureFlagVariant>**)&jresult = new std::shared_ptr<FINFeatureFlagVariant>(value_ptr);
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_new_1FINFeatureFlagModel(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FINFeatureFlagModel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FINFeatureFlagModel *)new FINFeatureFlagModel();
  *(FINFeatureFlagModel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_delete_1FINFeatureFlagModel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FINFeatureFlagModel *arg1 = (FINFeatureFlagModel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FINFeatureFlagModel **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_delete_1InnerObserver(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  InnerObserver *arg1 = (InnerObserver *) 0 ;
  std::shared_ptr< InnerObserver > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  InnerObserver > **)&jarg1;
  arg1 = (InnerObserver *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_InnerObserver_1onTest1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  InnerObserver *arg1 = (InnerObserver *) 0 ;
  std::shared_ptr< SwigCallbackData > arg2 ;
  std::shared_ptr< InnerObserver > *smartarg1 = 0 ;
  std::shared_ptr< SwigCallbackData > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  InnerObserver > **)&jarg1;
  arg1 = (InnerObserver *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< SwigCallbackData > **)&jarg2;
  if (argp2) arg2 = *argp2; 
  (arg1)->onTest1(arg2);
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_InnerObserver_1setOptional(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  InnerObserver *arg1 = (InnerObserver *) 0 ;
  SwigValueWrapper< std::optional< FINFeatureFlagVariant > > arg2 ;
  std::shared_ptr< InnerObserver > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  InnerObserver > **)&jarg1;
  arg1 = (InnerObserver *)(smartarg1 ? smartarg1->get() : 0); 
  
  FINFeatureFlagVariant* jarg2_element = ((std::shared_ptr< FINFeatureFlagVariant >*)jarg2)->get();
  if (jarg2_element) {
    arg2 = *jarg2_element;
  } else {
    arg2 = std::nullopt;
  }
  
  
  (arg1)->setOptional(arg2);
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_InnerObserver_1setOptional2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  InnerObserver *arg1 = (InnerObserver *) 0 ;
  std::optional< FINFeatureFlagVariant > *arg2 = 0 ;
  std::shared_ptr< InnerObserver > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  InnerObserver > **)&jarg1;
  arg1 = (InnerObserver *)(smartarg1 ? smartarg1->get() : 0); 
  
  FINFeatureFlagVariant* jarg2_element = ((std::shared_ptr< FINFeatureFlagVariant >*)jarg2)->get();
  if (jarg2_element) {
    std::optional<FINFeatureFlagVariant> tmp_arg2 = std::make_optional<FINFeatureFlagVariant>(*jarg2_element);
    arg2 = &tmp_arg2;
  } else {
    std::optional<FINFeatureFlagVariant> tmp_arg2 = std::nullopt;
    arg2 = &tmp_arg2;
  }
  
  (arg1)->setOptional2(*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_InnerObserver_1getOptional(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  InnerObserver *arg1 = (InnerObserver *) 0 ;
  std::shared_ptr< InnerObserver > *smartarg1 = 0 ;
  SwigValueWrapper< std::optional< FINFeatureFlagVariant > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  InnerObserver > **)&jarg1;
  arg1 = (InnerObserver *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getOptional();
  
  if ((&result)->has_value()) {
    FINFeatureFlagVariant* value_ptr = new FINFeatureFlagVariant((&result)->value());
    *(std::shared_ptr<FINFeatureFlagVariant> **)&jresult = new std::shared_ptr<FINFeatureFlagVariant>(value_ptr);
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_InnerObserver_1getOptional2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  InnerObserver *arg1 = (InnerObserver *) 0 ;
  std::shared_ptr< InnerObserver > *smartarg1 = 0 ;
  SwigValueWrapper< std::optional< FINFeatureFlagVariant > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  InnerObserver > **)&jarg1;
  arg1 = (InnerObserver *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getOptional2();
  
  if ((&result)->has_value()) {
    FINFeatureFlagVariant* value_ptr = new FINFeatureFlagVariant((&result)->value());
    *(std::shared_ptr<FINFeatureFlagVariant> **)&jresult = new std::shared_ptr<FINFeatureFlagVariant>(value_ptr);
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_new_1InnerObserver(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  InnerObserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (InnerObserver *)new SwigDirector_InnerObserver(jenv);
  
  *(std::shared_ptr<  InnerObserver > **)&jresult = result ? new std::shared_ptr<  InnerObserver >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_InnerObserver_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< InnerObserver > *obj = *((std::shared_ptr< InnerObserver > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_InnerObserver *director = static_cast<SwigDirector_InnerObserver *>(obj->operator->());
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_InnerObserver_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  std::shared_ptr< InnerObserver > *obj = *((std::shared_ptr< InnerObserver > **)&objarg);
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_InnerObserver *director = dynamic_cast<SwigDirector_InnerObserver *>(obj->operator->());
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_new_1SwigCallback(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigCallback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SwigCallback *)new SwigCallback();
  
  *(std::shared_ptr<  SwigCallback > **)&jresult = result ? new std::shared_ptr<  SwigCallback >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_delete_1SwigCallback(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SwigCallback *arg1 = (SwigCallback *) 0 ;
  std::shared_ptr< SwigCallback > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  SwigCallback > **)&jarg1;
  arg1 = (SwigCallback *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_SwigCallbackData_1a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SwigCallbackData *arg1 = (SwigCallbackData *) 0 ;
  int arg2 ;
  std::shared_ptr< SwigCallbackData > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  SwigCallbackData > **)&jarg1;
  arg1 = (SwigCallbackData *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->a = arg2;
}


SWIGEXPORT jint JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_SwigCallbackData_1a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SwigCallbackData *arg1 = (SwigCallbackData *) 0 ;
  std::shared_ptr< SwigCallbackData > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  SwigCallbackData > **)&jarg1;
  arg1 = (SwigCallbackData *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int) ((arg1)->a);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_new_1SwigCallbackData(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  SwigCallbackData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (SwigCallbackData *)new SwigCallbackData(arg1);
  
  *(std::shared_ptr<  SwigCallbackData > **)&jresult = result ? new std::shared_ptr<  SwigCallbackData >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_SwigCallbackData_1setStr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  SwigCallbackData *arg1 = (SwigCallbackData *) 0 ;
  SwigValueWrapper< std::shared_ptr< std::string > > arg2 ;
  std::shared_ptr< SwigCallbackData > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  SwigCallbackData > **)&jarg1;
  arg1 = (SwigCallbackData *)(smartarg1 ? smartarg1->get() : 0); 
  
  const char* c_result_pstr = jenv->GetStringUTFChars(jarg2, nullptr);
  arg2 = std::make_shared<std::string>(c_result_pstr);
  jenv->ReleaseStringUTFChars(jarg2, c_result_pstr);
  
  (arg1)->setStr(arg2);
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_SwigCallbackData_1setStr2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  SwigCallbackData *arg1 = (SwigCallbackData *) 0 ;
  SwigValueWrapper< std::shared_ptr< std::string > > arg2 ;
  std::shared_ptr< SwigCallbackData > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  SwigCallbackData > **)&jarg1;
  arg1 = (SwigCallbackData *)(smartarg1 ? smartarg1->get() : 0); 
  
  const char* c_result_pstr = jenv->GetStringUTFChars(jarg2, nullptr);
  arg2 = std::make_shared<std::string>(c_result_pstr);
  jenv->ReleaseStringUTFChars(jarg2, c_result_pstr);
  
  (arg1)->setStr2(arg2);
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_delete_1SwigCallbackData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SwigCallbackData *arg1 = (SwigCallbackData *) 0 ;
  std::shared_ptr< SwigCallbackData > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  SwigCallbackData > **)&jarg1;
  arg1 = (SwigCallbackData *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_TestSwigCallback_1setCallback1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TestSwigCallback *arg1 = (TestSwigCallback *) 0 ;
  SwigCallback *arg2 = (SwigCallback *) 0 ;
  std::shared_ptr< SwigCallback > *smartarg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TestSwigCallback **)&jarg1; 
  
  smartarg2 = *(std::shared_ptr<  SwigCallback > **)&jarg2;
  arg2 = (SwigCallback *)(smartarg2 ? smartarg2->get() : 0); 
  (arg1)->setCallback1(arg2);
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_TestSwigCallback_1setCallback2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TestSwigCallback *arg1 = (TestSwigCallback *) 0 ;
  std::shared_ptr< SwigCallback > arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TestSwigCallback **)&jarg1; 
  {
    std::shared_ptr<SwigCallback> *argp2 = *(std::shared_ptr<SwigCallback> **)&jarg2;
    if (argp2) {
      // 创建全局引用
      jobject globalRef = jenv->NewGlobalRef(jarg2_);
      // 创建新的 shared_ptr，使用自定义删除器
      arg2 = std::shared_ptr<SwigCallback>(argp2->get(), [globalRef](SwigCallback* ptr) {
        JNIEnv *env = nullptr;
          JNIContext context(env);
          // 删除全局引用
          env->DeleteGlobalRef(globalRef);
        });
    }
  }
  (arg1)->setCallback2(arg2);
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_TestSwigCallback_1setCallback3(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  TestSwigCallback *arg1 = (TestSwigCallback *) 0 ;
  int arg2 ;
  std::shared_ptr< SwigCallback > arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(TestSwigCallback **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    std::shared_ptr<SwigCallback> *argp3 = *(std::shared_ptr<SwigCallback> **)&jarg3;
    if (argp3) {
      // 创建全局引用
      jobject globalRef = jenv->NewGlobalRef(jarg3_);
      // 创建新的 shared_ptr，使用自定义删除器
      arg3 = std::shared_ptr<SwigCallback>(argp3->get(), [globalRef](SwigCallback* ptr) {
        JNIEnv *env = nullptr;
          JNIContext context(env);
          // 删除全局引用
          env->DeleteGlobalRef(globalRef);
        });
    }
  }
  (arg1)->setCallback3(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_TestSwigCallback_1setCallback4(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TestSwigCallback *arg1 = (TestSwigCallback *) 0 ;
  SwigValueWrapper< std::function< void (SwigCallbackData const &) > > arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TestSwigCallback **)&jarg1; 
  
  std::shared_ptr<SwigCallbackFunctionBridge> *smartarg2 = *(std::shared_ptr<SwigCallbackFunctionBridge> **)&jarg2;
  arg2 = SwigCallbackFunctionBridge::obtainOriginal(jenv, smartarg2, jarg2_);
  
  (arg1)->setCallback4(arg2);
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_TestSwigCallback_1setCallback5(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TestSwigCallback *arg1 = (TestSwigCallback *) 0 ;
  SwigValueWrapper< std::function< void (SwigCallbackData const &) > > arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TestSwigCallback **)&jarg1; 
  
  std::shared_ptr<SwigCallbackFunction1Bridge> *smartarg2 = *(std::shared_ptr<SwigCallbackFunction1Bridge> **)&jarg2;
  arg2 = SwigCallbackFunction1Bridge::obtainOriginal(jenv, smartarg2, jarg2_);
  
  (arg1)->setCallback5(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_new_1TestSwigCallback(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TestSwigCallback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TestSwigCallback *)new TestSwigCallback();
  *(TestSwigCallback **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_delete_1TestSwigCallback(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TestSwigCallback *arg1 = (TestSwigCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TestSwigCallback **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_example_ndk_1demo_1lib1_SwigCallbackDemoJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[9] = {
    {
      "SwigDirector_SwigCallbackFunctionBridge_onCall", "(Lcom/example/ndk_demo_lib1/SwigCallbackFunctionBridge;J)V" 
    },
    {
      "SwigDirector_SwigCallbackFunction1Bridge_onCall", "(Lcom/example/ndk_demo_lib1/SwigCallbackFunction1Bridge;J)V" 
    },
    {
      "SwigDirector_InnerObserver2Bridge_onCall", "(Lcom/example/ndk_demo_lib1/InnerObserver2Bridge;J)V" 
    },
    {
      "SwigDirector_InnerObserver3Bridge_onCall", "(Lcom/example/ndk_demo_lib1/InnerObserver3Bridge;J)V" 
    },
    {
      "SwigDirector_InnerObserver_onTest1", "(Lcom/example/ndk_demo_lib1/InnerObserver;J)V" 
    },
    {
      "SwigDirector_InnerObserver_setOptional", "(Lcom/example/ndk_demo_lib1/InnerObserver;J)V" 
    },
    {
      "SwigDirector_InnerObserver_setOptional2", "(Lcom/example/ndk_demo_lib1/InnerObserver;J)V" 
    },
    {
      "SwigDirector_InnerObserver_getOptional", "(Lcom/example/ndk_demo_lib1/InnerObserver;)J" 
    },
    {
      "SwigDirector_InnerObserver_getOptional2", "(Lcom/example/ndk_demo_lib1/InnerObserver;)J" 
    }
  };
  Swig::jclass_SwigCallbackDemoJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_SwigCallbackDemoJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_method_ids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_method_ids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

