plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'kotlin-kapt'
    id 'org.bytedeco.gradle-javacpp-build' version '1.5.9'
}
apply from: rootProject.getRootDir().getAbsolutePath() + File.separator + 'common.gradle'

sourceCompatibility = 1.8
//compileJava.options.encoding = 'UTF-8'

group = 'kl.kcs'


android {
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    packagingOptions {
        exclude "DebugProbesKt.bin"

        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/kotlinx-coroutines-core.kotlin_module'
    }

    // Encapsulates your external native build configurations.
    externalNativeBuild {

        // Encapsulates your CMake build configurations.
        cmake {

            // Provides a relative path to your CMake build script.
            path "CMakeLists.txt"
        }
    }
    defaultConfig {
        ndk {
            abiFilters 'arm64-v8a', 'x86_64', 'x86'
        }
    }

    ndkVersion '27.0.12077973'
}

dependencies {

    implementation "io.reactivex.rxjava2:rxjava:2.2.2"
    implementation "io.reactivex.rxjava2:rxandroid:2.1.0"

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'

    implementation("org.bytedeco:javacpp:1.5.9")
}

sourceSets {
    main {
        resources {
            srcDir 'src/main/resources'
            srcDir 'src/main/java'
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}

//  build -PjavacppPlatform=android-arm  生成 arm-v7 so
//  build -PjavacppPlatform=android-arm64  生成 arm-v8a so
//  build -PjavacppPlatform=windows-x86_64  生成 win64 so
//  Edit Run Configuration → run 添加上述指令
//tasks.withType(org.bytedeco.gradle.javacpp.BuildTask).configureEach {
//    println "javacppPlatform=$javacppPlatform"
//    def projdir = projectDir.getCanonicalPath();
//    includePath=[projdir+File.separator+"src"+File.separator+"main"+File.separator+"cpp"+File.separator+"include"]
//    if (javacppPlatform.startsWith("android")) {
//        if(javacppPlatform =="android-arm"){
//            linkPath = [projdir + "/libs/armeabi-v7a"];
//        }else if(javacppPlatform =="android-arm64"){
//            linkPath = [projdir + "/libs/arm64-v8a"];
//        }
//        def ndkPath = "D:\\Sdk\\ndk\\27.0.12077973"
//        properties = "$javacppPlatform-clang"
//        //使用ndk编译需要指定根目录和工具目录
//        propertyKeysAndValues = ['platform.root'    : ndkPath,
//                                 'platform.compiler': "${ndkPath}\\toolchains\\llvm\\prebuilt\\windows-x86_64\\bin\\clang++.exe".toString(),
//        ]
//        println("propertyKeysAndValues = ${propertyKeysAndValues}")
//        test.enabled = false
//        println("linkPath = ${linkPath}")
//    }  else if (javacppPlatform.startsWith("windows")) {
//        //build -PjavacppPlatform=windows-x86_64
//        //build -PjavacppPlatform=windows-x86
//        properties = "$javacppPlatform-mingw"
////        properties = "$javacppPlatform"
//
//        if (javacppPlatform.startsWith("windows-x86_64")) {
//
////            linkPath = [projdir + "\\libs\\windows-x86_64"];
//            linkPath = [projdir + "/javacppbuild/$javacppPlatform"];
//            propertyKeysAndValues = [
//                    'platform.compiler': "D:\\mingw\\mingw64\\bin\\gcc.exe".toString(),
//                    'platform.compiler.output': '-D_JNI_IMPLEMENTATION_ -Wl,-Bstatic -lstdc++ -lgcc_eh -lpthread -Wl,-Bdynamic -Wl,--kill-at -Wall -fPIC -shared -o\u0020'
//            ]
//        } else {
////            linkPath = [projdir + "\\libs\\windows-x86"];
//            linkPath = [projdir + "/javacppbuild/$javacppPlatform"];
//            propertyKeysAndValues = [
//                    'platform.compiler' : "D:\\mingw\\mingw32\\bin\\gcc.exe".toString(),
//                    'platform.compiler.output' : '-D_JNI_IMPLEMENTATION_ -Wl,-Bstatic -lstdc++ -lgcc_eh -lpthread -Wl,-Bdynamic -Wl,--kill-at -Wall -fPIC -shared -o\u0020'
//            ]
//        }
//        println("linkPath = ${linkPath}")
//        println("propertyKeysAndValues = ${propertyKeysAndValues}")
//        test.enabled = false
//
//    }else if(javacppPlatform.startsWith("linux-x86_64")){
//        linkPath = [projdir + "/javacppbuild/linux-x86_64"];
//    }else if(javacppPlatform.startsWith("linux-arm64")){
//        linkPath = [projdir + "/javacppbuild/linux-arm64"];
//    }else if(javacppPlatform.startsWith("linux-mips64el")){
//        linkPath = [projdir + "/javacppbuild/linux-mips64el"];
//    }
//}
//
//jar {
//    group = "${group}"
////    archiveVersion = "${version}"
//}
//
//javacppBuildParser {
//    classOrPackageNames = ['com/kl/kcs/*']
//    outputDirectory = file("$buildDir/generated/sources/javacpp/")
//}
//
//javacppBuildCompiler {
//    deleteJniFiles = true // 编译完是否删除jni文件
//    copyLibs = true // 是否拷贝引用的so文件到jar包中
//}