/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.3.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.hyh.jnitest.test.observer;
import com.hyh.jnitest.test.observer.model.*;


public class ObserverModuleJNI {
  public final static native long new_TestStructVariantBridge__SWIG_0();
  public final static native long new_TestStructVariantBridge__SWIG_1(long jarg1, TestStruct jarg1_);
  public final static native boolean TestStructVariantBridge_IsTestStruct(long jarg1, TestStructVariantBridge jarg1_);
  public final static native long TestStructVariantBridge_GetTestStruct(long jarg1, TestStructVariantBridge jarg1_);
  public final static native long new_TestStructVariantBridge__SWIG_2(long jarg1, TestStruct2 jarg1_);
  public final static native boolean TestStructVariantBridge_IsTestStruct2(long jarg1, TestStructVariantBridge jarg1_);
  public final static native long TestStructVariantBridge_GetTestStruct2(long jarg1, TestStructVariantBridge jarg1_);
  public final static native void delete_TestStructVariantBridge(long jarg1);
  public final static native long new_TestObserverBridge();
  public final static native void delete_TestObserverBridge(long jarg1);
  public final static native void TestObserverBridge_onCall(long jarg1, TestObserverBridge jarg1_, int jarg2);
  public final static native int TestObserverBridge_calculateHash(long jarg1, TestObserverBridge jarg1_);
  public final static native boolean TestObserverBridge_isEquals(long jarg1, TestObserverBridge jarg1_, long jarg2, TestObserverBridge jarg2_);
  public final static native void TestObserverBridge_director_connect(TestObserverBridge obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TestObserverBridge_change_ownership(TestObserverBridge obj, long cptr, boolean take_or_release);
  public final static native long new_TestObserver2Bridge();
  public final static native void delete_TestObserver2Bridge(long jarg1);
  public final static native void TestObserver2Bridge_onCall(long jarg1, TestObserver2Bridge jarg1_, long jarg2, TestObserver2Data jarg2_);
  public final static native int TestObserver2Bridge_calculateHash(long jarg1, TestObserver2Bridge jarg1_);
  public final static native boolean TestObserver2Bridge_isEquals(long jarg1, TestObserver2Bridge jarg1_, long jarg2, TestObserver2Bridge jarg2_);
  public final static native void TestObserver2Bridge_director_connect(TestObserver2Bridge obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TestObserver2Bridge_change_ownership(TestObserver2Bridge obj, long cptr, boolean take_or_release);
  public final static native long new_TestObserver2Vector__SWIG_0();
  public final static native long new_TestObserver2Vector__SWIG_1(long jarg1, TestObserver2Vector jarg1_);
  public final static native boolean TestObserver2Vector_isEmpty(long jarg1, TestObserver2Vector jarg1_);
  public final static native void TestObserver2Vector_clear(long jarg1, TestObserver2Vector jarg1_);
  public final static native long new_TestObserver2Vector__SWIG_2(int jarg1, long jarg2, TestObserver2Bridge jarg2_);
  public final static native int TestObserver2Vector_doCapacity(long jarg1, TestObserver2Vector jarg1_);
  public final static native void TestObserver2Vector_doReserve(long jarg1, TestObserver2Vector jarg1_, int jarg2);
  public final static native int TestObserver2Vector_doSize(long jarg1, TestObserver2Vector jarg1_);
  public final static native void TestObserver2Vector_doAdd__SWIG_0(long jarg1, TestObserver2Vector jarg1_, long jarg2, TestObserver2Bridge jarg2_);
  public final static native void TestObserver2Vector_doAdd__SWIG_1(long jarg1, TestObserver2Vector jarg1_, int jarg2, long jarg3, TestObserver2Bridge jarg3_);
  public final static native long TestObserver2Vector_doRemove(long jarg1, TestObserver2Vector jarg1_, int jarg2);
  public final static native long TestObserver2Vector_doGet(long jarg1, TestObserver2Vector jarg1_, int jarg2);
  public final static native long TestObserver2Vector_doSet(long jarg1, TestObserver2Vector jarg1_, int jarg2, long jarg3, TestObserver2Bridge jarg3_);
  public final static native void TestObserver2Vector_doRemoveRange(long jarg1, TestObserver2Vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_TestObserver2Vector(long jarg1);
  public final static native long new_TestStruct2Vector__SWIG_0();
  public final static native long new_TestStruct2Vector__SWIG_1(long jarg1, TestStruct2Vector jarg1_);
  public final static native boolean TestStruct2Vector_isEmpty(long jarg1, TestStruct2Vector jarg1_);
  public final static native void TestStruct2Vector_clear(long jarg1, TestStruct2Vector jarg1_);
  public final static native long new_TestStruct2Vector__SWIG_2(int jarg1, long jarg2, TestStruct2 jarg2_);
  public final static native int TestStruct2Vector_doCapacity(long jarg1, TestStruct2Vector jarg1_);
  public final static native void TestStruct2Vector_doReserve(long jarg1, TestStruct2Vector jarg1_, int jarg2);
  public final static native int TestStruct2Vector_doSize(long jarg1, TestStruct2Vector jarg1_);
  public final static native void TestStruct2Vector_doAdd__SWIG_0(long jarg1, TestStruct2Vector jarg1_, long jarg2, TestStruct2 jarg2_);
  public final static native void TestStruct2Vector_doAdd__SWIG_1(long jarg1, TestStruct2Vector jarg1_, int jarg2, long jarg3, TestStruct2 jarg3_);
  public final static native long TestStruct2Vector_doRemove(long jarg1, TestStruct2Vector jarg1_, int jarg2);
  public final static native long TestStruct2Vector_doGet(long jarg1, TestStruct2Vector jarg1_, int jarg2);
  public final static native long TestStruct2Vector_doSet(long jarg1, TestStruct2Vector jarg1_, int jarg2, long jarg3, TestStruct2 jarg3_);
  public final static native void TestStruct2Vector_doRemoveRange(long jarg1, TestStruct2Vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_TestStruct2Vector(long jarg1);
  public final static native long new_TestStructVector__SWIG_0();
  public final static native long new_TestStructVector__SWIG_1(long jarg1, TestStructVector jarg1_);
  public final static native boolean TestStructVector_isEmpty(long jarg1, TestStructVector jarg1_);
  public final static native void TestStructVector_clear(long jarg1, TestStructVector jarg1_);
  public final static native long new_TestStructVector__SWIG_2(int jarg1, long jarg2, TestStruct jarg2_);
  public final static native int TestStructVector_doCapacity(long jarg1, TestStructVector jarg1_);
  public final static native void TestStructVector_doReserve(long jarg1, TestStructVector jarg1_, int jarg2);
  public final static native int TestStructVector_doSize(long jarg1, TestStructVector jarg1_);
  public final static native void TestStructVector_doAdd__SWIG_0(long jarg1, TestStructVector jarg1_, long jarg2, TestStruct jarg2_);
  public final static native void TestStructVector_doAdd__SWIG_1(long jarg1, TestStructVector jarg1_, int jarg2, long jarg3, TestStruct jarg3_);
  public final static native long TestStructVector_doRemove(long jarg1, TestStructVector jarg1_, int jarg2);
  public final static native long TestStructVector_doGet(long jarg1, TestStructVector jarg1_, int jarg2);
  public final static native long TestStructVector_doSet(long jarg1, TestStructVector jarg1_, int jarg2, long jarg3, TestStruct jarg3_);
  public final static native void TestStructVector_doRemoveRange(long jarg1, TestStructVector jarg1_, int jarg2, int jarg3);
  public final static native void delete_TestStructVector(long jarg1);
  public final static native int TestObserver2Data_a_get(long jarg1, TestObserver2Data jarg1_);
  public final static native long new_TestObserver2Data(int jarg1);
  public final static native void delete_TestObserver2Data(long jarg1);
  public final static native int TestEnum1_AllTradingTime_get();
  public final static native int TestEnum1_UsPreMarketAfter_get();
  public final static native int TestEnum2_AllTradingTime_get();
  public final static native int TestEnum2_UsPreMarketAfter_get();
  public final static native void TestStruct_groupName_set(long jarg1, TestStruct jarg1_, String jarg2);
  public final static native String TestStruct_groupName_get(long jarg1, TestStruct jarg1_);
  public final static native long new_TestStruct();
  public final static native void delete_TestStruct(long jarg1);
  public final static native void TestStruct2_groupName_set(long jarg1, TestStruct2 jarg1_, String jarg2);
  public final static native String TestStruct2_groupName_get(long jarg1, TestStruct2 jarg1_);
  public final static native long new_TestStruct2();
  public final static native void delete_TestStruct2(long jarg1);
  public final static native void TestOptionalBridge_enum1_set(long jarg1, TestOptionalBridge jarg1_, int jarg2);
  public final static native int TestOptionalBridge_enum1_get(long jarg1, TestOptionalBridge jarg1_);
  public final static native void TestOptionalBridge_enum11_set(long jarg1, TestOptionalBridge jarg1_, int jarg2);
  public final static native int TestOptionalBridge_enum11_get(long jarg1, TestOptionalBridge jarg1_);
  public final static native long new_TestOptionalBridge();
  public final static native void delete_TestOptionalBridge(long jarg1);
  public final static native void delete_ITestObserver2Bridge(long jarg1);
  public final static native void ITestObserver2Bridge_onCall(long jarg1, ITestObserver2Bridge jarg1_, int jarg2);
  public final static native void ITestObserver2Bridge_onCall2(long jarg1, ITestObserver2Bridge jarg1_, long jarg2, TestStructVariantBridge jarg2_);
  public final static native int ITestObserver2Bridge_calculateHash(long jarg1, ITestObserver2Bridge jarg1_);
  public final static native boolean ITestObserver2Bridge_isEquals(long jarg1, ITestObserver2Bridge jarg1_, long jarg2, ITestObserver2Bridge jarg2_);
  public final static native long new_ITestObserver2Bridge();
  public final static native void ITestObserver2Bridge_director_connect(ITestObserver2Bridge obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void ITestObserver2Bridge_change_ownership(ITestObserver2Bridge obj, long cptr, boolean take_or_release);
  public final static native void delete_IObserverManager(long jarg1);
  public final static native void IObserverManager_addObserver(long jarg1, IObserverManager jarg1_, long jarg2, TestObserverBridge jarg2_);
  public final static native void IObserverManager_removeObserver(long jarg1, IObserverManager jarg1_, long jarg2, TestObserverBridge jarg2_);
  public final static native void IObserverManager_addObserver2(long jarg1, IObserverManager jarg1_, long jarg2, ITestObserver2Bridge jarg2_);
  public final static native void IObserverManager_removeObserver2(long jarg1, IObserverManager jarg1_, long jarg2, ITestObserver2Bridge jarg2_);
  public final static native long IObserverManager_add1(long jarg1, IObserverManager jarg1_, long jarg2, long jarg3);
  public final static native long IObserverManager_add11(long jarg1, IObserverManager jarg1_, long jarg2, long jarg3);
  public final static native long IObserverManager_add2(long jarg1, IObserverManager jarg1_, long jarg2, long jarg3);
  public final static native long IObserverManager_add22(long jarg1, IObserverManager jarg1_, long jarg2, long jarg3);
  public final static native long IObserverManager_add3(long jarg1, IObserverManager jarg1_, long jarg2, long jarg3);
  public final static native long IObserverManager_add33(long jarg1, IObserverManager jarg1_, long jarg2, long jarg3);
  public final static native void IObserverManager_byteTest1(long jarg1, IObserverManager jarg1_, byte[] jarg2);
  public final static native void IObserverManager_byteTest2(long jarg1, IObserverManager jarg1_, byte[] jarg2);
  public final static native byte[] IObserverManager_byteTest3(long jarg1, IObserverManager jarg1_);
  public final static native void IObserverManager_setTestObserver2List(long jarg1, IObserverManager jarg1_, long jarg2, TestObserver2Vector jarg2_);
  public final static native int IObserverManager_optionalEnum33(long jarg1, IObserverManager jarg1_);
  public final static native long IObserverManager_getObserver2(long jarg1, IObserverManager jarg1_);
  public final static native long new_IObserverManager();
  public final static native void IObserverManager_director_connect(IObserverManager obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IObserverManager_change_ownership(IObserverManager obj, long cptr, boolean take_or_release);
  public final static native void ObserverManager_init(long jarg1, IObserverManager jarg1_);
  public final static native void ObserverManager_addObserver(long jarg1, TestObserverBridge jarg1_);
  public final static native void ObserverManager_removeObserver(long jarg1, TestObserverBridge jarg1_);
  public final static native void ObserverManager_addObserver2(long jarg1, ITestObserver2Bridge jarg1_);
  public final static native void ObserverManager_removeObserver2(long jarg1, ITestObserver2Bridge jarg1_);
  public final static native long ObserverManager_add1(long jarg1, long jarg2);
  public final static native long ObserverManager_add11(long jarg1, long jarg2);
  public final static native long ObserverManager_add2(long jarg1, long jarg2);
  public final static native long ObserverManager_add22(long jarg1, long jarg2);
  public final static native long ObserverManager_add3(long jarg1, long jarg2);
  public final static native long ObserverManager_add33(long jarg1, long jarg2);
  public final static native void ObserverManager_byteTest1(byte[] jarg1);
  public final static native void ObserverManager_byteTest2(byte[] jarg1);
  public final static native byte[] ObserverManager_byteTest3();
  public final static native int ObserverManager_optionalEnum33();
  public final static native long ObserverManager_getObserver2();
  public final static native long new_ObserverManager();
  public final static native void delete_ObserverManager(long jarg1);
  public final static native void JNITestEntrance_testAddObserver(int jarg1);
  public final static native void JNITestEntrance_testRemoveObserver(int jarg1);
  public final static native long new_JNITestEntrance();
  public final static native void delete_JNITestEntrance(long jarg1);

  public static void SwigDirector_TestObserverBridge_onCall(TestObserverBridge jself, int data) {
    jself.onCall(data);
  }
  public static void SwigDirector_TestObserver2Bridge_onCall(TestObserver2Bridge jself, long data) {
    jself.onCall(new TestObserver2Data(data, false));
  }
  public static void SwigDirector_ITestObserver2Bridge_onCall(ITestObserver2Bridge jself, int data) {
    jself.onCall(data);
  }
  public static void SwigDirector_ITestObserver2Bridge_onCall2(ITestObserver2Bridge jself, long variant) {
    jself.onCall2((variant == 0) ? null : new TestStructVariantBridge(variant, true));
  }
  public static void SwigDirector_IObserverManager_addObserver(IObserverManager jself, long observer) {
    jself.addObserver((observer == 0) ? null : new TestObserverBridge(observer, true));
  }
  public static void SwigDirector_IObserverManager_removeObserver(IObserverManager jself, long observer) {
    jself.removeObserver((observer == 0) ? null : new TestObserverBridge(observer, true));
  }
  public static void SwigDirector_IObserverManager_addObserver2(IObserverManager jself, long observer) {
    jself.addObserver2((observer == 0) ? null : new com.hyh.jnitest.basic.infrastructure.SwigDirectorWrapper(observer, true).acquire(cPtr -> new ITestObserver2Bridge(cPtr, true)));
  }
  public static void SwigDirector_IObserverManager_removeObserver2(IObserverManager jself, long observer) {
    jself.removeObserver2((observer == 0) ? null : new com.hyh.jnitest.basic.infrastructure.SwigDirectorWrapper(observer, true).acquire(cPtr -> new ITestObserver2Bridge(cPtr, true)));
  }
  public static long SwigDirector_IObserverManager_add1(IObserverManager jself, long a, long b) {
    return jself.add1(a, b);
  }
  public static long SwigDirector_IObserverManager_add11(IObserverManager jself, long a, long b) {
    return jself.add11(a, b);
  }
  public static long SwigDirector_IObserverManager_add2(IObserverManager jself, long a, long b) {
    return jself.add2(a, b);
  }
  public static long SwigDirector_IObserverManager_add22(IObserverManager jself, long a, long b) {
    return jself.add22(a, b);
  }
  public static long SwigDirector_IObserverManager_add3(IObserverManager jself, long a, long b) {
    return jself.add3(a, b);
  }
  public static long SwigDirector_IObserverManager_add33(IObserverManager jself, long a, long b) {
    return jself.add33(a, b);
  }
  public static void SwigDirector_IObserverManager_byteTest1(IObserverManager jself, byte[] byteArray) {
    jself.byteTest1(byteArray);
  }
  public static void SwigDirector_IObserverManager_byteTest2(IObserverManager jself, byte[] byteArray) {
    jself.byteTest2(byteArray);
  }
  public static byte[] SwigDirector_IObserverManager_byteTest3(IObserverManager jself) {
    return jself.byteTest3();
  }
  public static void SwigDirector_IObserverManager_setTestObserver2List(IObserverManager jself, long arg0) {
    jself.setTestObserver2List(new TestObserver2Vector(arg0, true));
  }
  public static int SwigDirector_IObserverManager_optionalEnum33(IObserverManager jself) {
    return (jself.optionalEnum33()).swigValue();
  }
  public static long SwigDirector_IObserverManager_getObserver2(IObserverManager jself) {
    return ITestObserver2Bridge.getCPtr(jself.getObserver2());
  }

  private final static native void swig_module_init();
  static {
    swig_module_init();
  }
}
