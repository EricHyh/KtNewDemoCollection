/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.3.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


package com.hyh.jnitest.test.observer;




public class ObserverManager {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  public ObserverManager(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(ObserverManager obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  public static long swigRelease(ObserverManager obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings({"deprecation", "removal"})
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        com.hyh.jnitest.test.observer.ObserverModuleJNI.delete_ObserverManager(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public static void init(IObserverManager manager) {
    com.hyh.jnitest.test.observer.ObserverModuleJNI.ObserverManager_init(IObserverManager.getCPtr(manager), manager);
  }

  public static void addObserver(TestObserverBridge observer) {
    com.hyh.jnitest.test.observer.ObserverModuleJNI.ObserverManager_addObserver(TestObserverBridge.getCPtr(observer), observer);
  }

  public static void removeObserver(TestObserverBridge observer) {
    com.hyh.jnitest.test.observer.ObserverModuleJNI.ObserverManager_removeObserver(TestObserverBridge.getCPtr(observer), observer);
  }

  public static void addObserver2(ITestObserver2Bridge observer) {
    com.hyh.jnitest.test.observer.ObserverModuleJNI.ObserverManager_addObserver2(ITestObserver2Bridge.getCPtr(observer), observer);
  }

  public static void removeObserver2(ITestObserver2Bridge observer) {
    com.hyh.jnitest.test.observer.ObserverModuleJNI.ObserverManager_removeObserver2(ITestObserver2Bridge.getCPtr(observer), observer);
  }

  public static long add1(long a, long b) {
    return com.hyh.jnitest.test.observer.ObserverModuleJNI.ObserverManager_add1(a, b);
  }

  public static long add11(long a, long b) {
    return com.hyh.jnitest.test.observer.ObserverModuleJNI.ObserverManager_add11(a, b);
  }

  public static long add2(long a, long b) {
    return com.hyh.jnitest.test.observer.ObserverModuleJNI.ObserverManager_add2(a, b);
  }

  public static long add22(long a, long b) {
    return com.hyh.jnitest.test.observer.ObserverModuleJNI.ObserverManager_add22(a, b);
  }

  public static long add3(long a, long b) {
    return com.hyh.jnitest.test.observer.ObserverModuleJNI.ObserverManager_add3(a, b);
  }

  public static long add33(long a, long b) {
    return com.hyh.jnitest.test.observer.ObserverModuleJNI.ObserverManager_add33(a, b);
  }

  public static void byteTest1(byte[] byteArray) {
    com.hyh.jnitest.test.observer.ObserverModuleJNI.ObserverManager_byteTest1(byteArray);
  }

  public static void byteTest2(byte[] byteArray) {
    com.hyh.jnitest.test.observer.ObserverModuleJNI.ObserverManager_byteTest2(byteArray);
  }

  public static byte[] byteTest3() {
    return com.hyh.jnitest.test.observer.ObserverModuleJNI.ObserverManager_byteTest3();
  }

  public static ITestObserver2Bridge getObserver2() {
    long ptr = com.hyh.jnitest.test.observer.ObserverModuleJNI.ObserverManager_getObserver2();
    if (ptr == 0) {
      return null;
    } else {
      com.hyh.jnitest.basic.infrastructure.SwigDirectorWrapper wrapper = new com.hyh.jnitest.basic.infrastructure.SwigDirectorWrapper(ptr, true);
      return wrapper.acquire(cPtr -> new ITestObserver2Bridge(cPtr, true));
    }
  }

  public ObserverManager() {
    this(com.hyh.jnitest.test.observer.ObserverModuleJNI.new_ObserverManager(), true);
  }

}
