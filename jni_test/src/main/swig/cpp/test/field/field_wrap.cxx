/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.3.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#include "../../swig_gen_common.h"
#include "../../../../cpp/JNIContext.h"

namespace Swig {
  namespace {
    jclass jclass_FieldModuleJNI = NULL;
    jmethodID director_method_ids[21];
  }
}




#include <map>
#include <unordered_map>
#include <variant>
#include <memory>
#include <mutex>
#include <list>
#include <vector>
#include <functional>


#include "field/LiveData.h"
#include "field/FieldKeys.h"
#include "field/FieldDataModel.h"


class IntLiveDataObserver {

public:
    IntLiveDataObserver(): m_func(nullptr) {}
    virtual ~IntLiveDataObserver() = default;

    virtual void onCall(const int &value) = 0;

    virtual int calculateHash() {
        return static_cast<int>(std::hash<const IntLiveDataObserver*>{}(this));
    }

    virtual bool isEquals(const IntLiveDataObserver& other) {
        return this == &other;
    }

    static LiveDataObserver<int> obtainOriginal(JNIEnv *jenv, std::shared_ptr<IntLiveDataObserver> *func_bridge, jobject j_func_bridge){
        using ReturnType = typename LiveDataObserver<int>::result_type;
        std::weak_ptr<IntLiveDataObserver> weak_func_bridge = *func_bridge;
        LiveDataObserver<int> func = [weak_func_bridge, ref = JNIGlobalRef(jenv, j_func_bridge)](const int &value) -> void {
            std::shared_ptr<IntLiveDataObserver> func_bridge_ptr = weak_func_bridge.lock();
            if (func_bridge_ptr) {
                return func_bridge_ptr->onCall(value);
            } else if (std::is_same_v<ReturnType, void>) {
                return;
            } else {
                return ReturnType();
            }
        };
        return func;
    }

    static std::shared_ptr<LiveDataObserver<int>> obtainOriginal(std::shared_ptr<IntLiveDataObserver> *func_bridge) {
        if (!func_bridge || !*func_bridge) return nullptr;
        if (auto func_ptr = (*func_bridge)->m_func) {
            return func_ptr;
        }
        std::lock_guard<std::mutex> lock((*func_bridge)->m_mutex);
        if (auto func_ptr = (*func_bridge)->m_func) {
            return func_ptr;
        }
        using ReturnType = typename LiveDataObserver<int>::result_type;
        std::weak_ptr<IntLiveDataObserver> weak_func_bridge = *func_bridge;
        std::shared_ptr<LiveDataObserver<int>> func_ptr = std::make_shared<LiveDataObserver<int>>([weak_func_bridge](const int &value) -> void {
            std::shared_ptr<IntLiveDataObserver> func_bridge_ptr = weak_func_bridge.lock();
            if (func_bridge_ptr) {
                return func_bridge_ptr->onCall(value);
            } else if (std::is_same_v<ReturnType, void>) {
                return;
            } else {
                return ReturnType();
            }
        });

        (*func_bridge)->m_func = func_ptr;

        return func_ptr;
    }

private:
    mutable std::mutex m_mutex;
    std::shared_ptr<LiveDataObserver<int>> m_func;
};



struct SWIG_null_deleter {
  void operator() (void const *) const {
  }
};
#define SWIG_NO_NULL_DELETER_0 , SWIG_null_deleter()
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN



class IntLiveDataObserver4DI : public IntLiveDataObserver {

public:
    explicit IntLiveDataObserver4DI(LiveDataObserver<int> function) : m_original(std::move(function)) {}

    void onCall(const int &value) override {
        if (m_original) {
            return m_original(value);
        } else {
            JNIEnv* env;
            JNIContext context(env);
            SWIG_JavaThrowException(env, SWIG_JavaNullPointerException, "IntLiveDataObserver##4DI m_original is null");
            return m_original(value);
        }
    }

private:
    LiveDataObserver<int> m_original;
};

class SharedPtrIntLiveDataObserver4DI : public IntLiveDataObserver {

public:
    explicit SharedPtrIntLiveDataObserver4DI(const std::shared_ptr<LiveDataObserver<int>>& function) : m_original(function) {}

    void onCall(const int &value) override {
        if (m_original) {
            return m_original->operator()(value);
        } else {
            JNIEnv* env;
            JNIContext context(env);
            SWIG_JavaThrowException(env, SWIG_JavaNullPointerException, "SharedPtr##IntLiveDataObserver##4DI m_original is null");
            return m_original->operator()(value);
        }
    }

    int calculateHash() override {
        return static_cast<int>(std::hash<const LiveDataObserver<int>*>{}(this->m_original.get()));
    }

    bool isEquals(const IntLiveDataObserver& other) override {
        if (this == &other) {
            return true;
        }
        const auto* other_ptr = dynamic_cast<const SharedPtrIntLiveDataObserver4DI*>(&other);
        if(other_ptr == nullptr) {
            return false;
        }
        return this->m_original.get() == other_ptr->m_original.get();
    }

private:
    std::shared_ptr<LiveDataObserver<int>> m_original;
};



class StringLiveDataObserver {

public:
    StringLiveDataObserver(): m_func(nullptr) {}
    virtual ~StringLiveDataObserver() = default;

    virtual void onCall(const std::string &value) = 0;

    virtual int calculateHash() {
        return static_cast<int>(std::hash<const StringLiveDataObserver*>{}(this));
    }

    virtual bool isEquals(const StringLiveDataObserver& other) {
        return this == &other;
    }

    static LiveDataObserver<std::string> obtainOriginal(JNIEnv *jenv, std::shared_ptr<StringLiveDataObserver> *func_bridge, jobject j_func_bridge){
        using ReturnType = typename LiveDataObserver<std::string>::result_type;
        std::weak_ptr<StringLiveDataObserver> weak_func_bridge = *func_bridge;
        LiveDataObserver<std::string> func = [weak_func_bridge, ref = JNIGlobalRef(jenv, j_func_bridge)](const std::string &value) -> void {
            std::shared_ptr<StringLiveDataObserver> func_bridge_ptr = weak_func_bridge.lock();
            if (func_bridge_ptr) {
                return func_bridge_ptr->onCall(value);
            } else if (std::is_same_v<ReturnType, void>) {
                return;
            } else {
                return ReturnType();
            }
        };
        return func;
    }

    static std::shared_ptr<LiveDataObserver<std::string>> obtainOriginal(std::shared_ptr<StringLiveDataObserver> *func_bridge) {
        if (!func_bridge || !*func_bridge) return nullptr;
        if (auto func_ptr = (*func_bridge)->m_func) {
            return func_ptr;
        }
        std::lock_guard<std::mutex> lock((*func_bridge)->m_mutex);
        if (auto func_ptr = (*func_bridge)->m_func) {
            return func_ptr;
        }
        using ReturnType = typename LiveDataObserver<std::string>::result_type;
        std::weak_ptr<StringLiveDataObserver> weak_func_bridge = *func_bridge;
        std::shared_ptr<LiveDataObserver<std::string>> func_ptr = std::make_shared<LiveDataObserver<std::string>>([weak_func_bridge](const std::string &value) -> void {
            std::shared_ptr<StringLiveDataObserver> func_bridge_ptr = weak_func_bridge.lock();
            if (func_bridge_ptr) {
                return func_bridge_ptr->onCall(value);
            } else if (std::is_same_v<ReturnType, void>) {
                return;
            } else {
                return ReturnType();
            }
        });

        (*func_bridge)->m_func = func_ptr;

        return func_ptr;
    }

private:
    mutable std::mutex m_mutex;
    std::shared_ptr<LiveDataObserver<std::string>> m_func;
};




class StringLiveDataObserver4DI : public StringLiveDataObserver {

public:
    explicit StringLiveDataObserver4DI(LiveDataObserver<std::string> function) : m_original(std::move(function)) {}

    void onCall(const std::string &value) override {
        if (m_original) {
            return m_original(value);
        } else {
            JNIEnv* env;
            JNIContext context(env);
            SWIG_JavaThrowException(env, SWIG_JavaNullPointerException, "StringLiveDataObserver##4DI m_original is null");
            return m_original(value);
        }
    }

private:
    LiveDataObserver<std::string> m_original;
};

class SharedPtrStringLiveDataObserver4DI : public StringLiveDataObserver {

public:
    explicit SharedPtrStringLiveDataObserver4DI(const std::shared_ptr<LiveDataObserver<std::string>>& function) : m_original(function) {}

    void onCall(const std::string &value) override {
        if (m_original) {
            return m_original->operator()(value);
        } else {
            JNIEnv* env;
            JNIContext context(env);
            SWIG_JavaThrowException(env, SWIG_JavaNullPointerException, "SharedPtr##StringLiveDataObserver##4DI m_original is null");
            return m_original->operator()(value);
        }
    }

    int calculateHash() override {
        return static_cast<int>(std::hash<const LiveDataObserver<std::string>*>{}(this->m_original.get()));
    }

    bool isEquals(const StringLiveDataObserver& other) override {
        if (this == &other) {
            return true;
        }
        const auto* other_ptr = dynamic_cast<const SharedPtrStringLiveDataObserver4DI*>(&other);
        if(other_ptr == nullptr) {
            return false;
        }
        return this->m_original.get() == other_ptr->m_original.get();
    }

private:
    std::shared_ptr<LiveDataObserver<std::string>> m_original;
};



class OptionalStringLiveDataObserver {

public:
    OptionalStringLiveDataObserver(): m_func(nullptr) {}
    virtual ~OptionalStringLiveDataObserver() = default;

    virtual void onCall(const std::optional<std::string> &value) = 0;

    virtual int calculateHash() {
        return static_cast<int>(std::hash<const OptionalStringLiveDataObserver*>{}(this));
    }

    virtual bool isEquals(const OptionalStringLiveDataObserver& other) {
        return this == &other;
    }

    static LiveDataObserver<std::optional<std::string>> obtainOriginal(JNIEnv *jenv, std::shared_ptr<OptionalStringLiveDataObserver> *func_bridge, jobject j_func_bridge){
        using ReturnType = typename LiveDataObserver<std::optional<std::string>>::result_type;
        std::weak_ptr<OptionalStringLiveDataObserver> weak_func_bridge = *func_bridge;
        LiveDataObserver<std::optional<std::string>> func = [weak_func_bridge, ref = JNIGlobalRef(jenv, j_func_bridge)](const std::optional<std::string> &value) -> void {
            std::shared_ptr<OptionalStringLiveDataObserver> func_bridge_ptr = weak_func_bridge.lock();
            if (func_bridge_ptr) {
                return func_bridge_ptr->onCall(value);
            } else if (std::is_same_v<ReturnType, void>) {
                return;
            } else {
                return ReturnType();
            }
        };
        return func;
    }

    static std::shared_ptr<LiveDataObserver<std::optional<std::string>>> obtainOriginal(std::shared_ptr<OptionalStringLiveDataObserver> *func_bridge) {
        if (!func_bridge || !*func_bridge) return nullptr;
        if (auto func_ptr = (*func_bridge)->m_func) {
            return func_ptr;
        }
        std::lock_guard<std::mutex> lock((*func_bridge)->m_mutex);
        if (auto func_ptr = (*func_bridge)->m_func) {
            return func_ptr;
        }
        using ReturnType = typename LiveDataObserver<std::optional<std::string>>::result_type;
        std::weak_ptr<OptionalStringLiveDataObserver> weak_func_bridge = *func_bridge;
        std::shared_ptr<LiveDataObserver<std::optional<std::string>>> func_ptr = std::make_shared<LiveDataObserver<std::optional<std::string>>>([weak_func_bridge](const std::optional<std::string> &value) -> void {
            std::shared_ptr<OptionalStringLiveDataObserver> func_bridge_ptr = weak_func_bridge.lock();
            if (func_bridge_ptr) {
                return func_bridge_ptr->onCall(value);
            } else if (std::is_same_v<ReturnType, void>) {
                return;
            } else {
                return ReturnType();
            }
        });

        (*func_bridge)->m_func = func_ptr;

        return func_ptr;
    }

private:
    mutable std::mutex m_mutex;
    std::shared_ptr<LiveDataObserver<std::optional<std::string>>> m_func;
};




class OptionalStringLiveDataObserver4DI : public OptionalStringLiveDataObserver {

public:
    explicit OptionalStringLiveDataObserver4DI(LiveDataObserver<std::optional<std::string>> function) : m_original(std::move(function)) {}

    void onCall(const std::optional<std::string> &value) override {
        if (m_original) {
            return m_original(value);
        } else {
            JNIEnv* env;
            JNIContext context(env);
            SWIG_JavaThrowException(env, SWIG_JavaNullPointerException, "OptionalStringLiveDataObserver##4DI m_original is null");
            return m_original(value);
        }
    }

private:
    LiveDataObserver<std::optional<std::string>> m_original;
};

class SharedPtrOptionalStringLiveDataObserver4DI : public OptionalStringLiveDataObserver {

public:
    explicit SharedPtrOptionalStringLiveDataObserver4DI(const std::shared_ptr<LiveDataObserver<std::optional<std::string>>>& function) : m_original(function) {}

    void onCall(const std::optional<std::string> &value) override {
        if (m_original) {
            return m_original->operator()(value);
        } else {
            JNIEnv* env;
            JNIContext context(env);
            SWIG_JavaThrowException(env, SWIG_JavaNullPointerException, "SharedPtr##OptionalStringLiveDataObserver##4DI m_original is null");
            return m_original->operator()(value);
        }
    }

    int calculateHash() override {
        return static_cast<int>(std::hash<const LiveDataObserver<std::optional<std::string>>*>{}(this->m_original.get()));
    }

    bool isEquals(const OptionalStringLiveDataObserver& other) override {
        if (this == &other) {
            return true;
        }
        const auto* other_ptr = dynamic_cast<const SharedPtrOptionalStringLiveDataObserver4DI*>(&other);
        if(other_ptr == nullptr) {
            return false;
        }
        return this->m_original.get() == other_ptr->m_original.get();
    }

private:
    std::shared_ptr<LiveDataObserver<std::optional<std::string>>> m_original;
};



/* Check for overflow converting to Java int (always signed 32-bit) from (unsigned variable-bit) size_t */
SWIGINTERN jint SWIG_JavaIntFromSize_t(size_t size) {
  static const jint JINT_MAX = 0x7FFFFFFF;
  return (size > (size_t)JINT_MAX) ? -1 : (jint)size;
}


SWIGINTERN jint SWIG_VectorSize(size_t size) {
  jint sz = SWIG_JavaIntFromSize_t(size);
  if (sz == -1)
    throw std::out_of_range("vector size is too large to fit into a Java int");
  return sz;
}

SWIGINTERN std::vector< std::shared_ptr< BaseFiledKey > > *new_std_vector_Sl_std_shared_ptr_Sl_BaseFiledKey_Sg__Sg___SWIG_2(jint count,std::shared_ptr< BaseFiledKey > const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< std::shared_ptr< BaseFiledKey > >(static_cast<std::vector< std::shared_ptr< BaseFiledKey > >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_std_shared_ptr_Sl_BaseFiledKey_Sg__Sg__doCapacity(std::vector< std::shared_ptr< BaseFiledKey > > *self){
        return SWIG_VectorSize(self->capacity());
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_BaseFiledKey_Sg__Sg__doReserve(std::vector< std::shared_ptr< BaseFiledKey > > *self,jint n){
        if (n < 0)
          throw std::out_of_range("vector reserve size must be positive");
        self->reserve(n);
      }
SWIGINTERN jint std_vector_Sl_std_shared_ptr_Sl_BaseFiledKey_Sg__Sg__doSize(std::vector< std::shared_ptr< BaseFiledKey > > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_BaseFiledKey_Sg__Sg__doAdd__SWIG_0(std::vector< std::shared_ptr< BaseFiledKey > > *self,std::vector< std::shared_ptr< BaseFiledKey > >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_BaseFiledKey_Sg__Sg__doAdd__SWIG_1(std::vector< std::shared_ptr< BaseFiledKey > > *self,jint index,std::vector< std::shared_ptr< BaseFiledKey > >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::shared_ptr< BaseFiledKey > >::value_type std_vector_Sl_std_shared_ptr_Sl_BaseFiledKey_Sg__Sg__doRemove(std::vector< std::shared_ptr< BaseFiledKey > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          std::shared_ptr< BaseFiledKey > const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::shared_ptr< BaseFiledKey > >::value_type const &std_vector_Sl_std_shared_ptr_Sl_BaseFiledKey_Sg__Sg__doGet(std::vector< std::shared_ptr< BaseFiledKey > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< std::shared_ptr< BaseFiledKey > >::value_type std_vector_Sl_std_shared_ptr_Sl_BaseFiledKey_Sg__Sg__doSet(std::vector< std::shared_ptr< BaseFiledKey > > *self,jint index,std::vector< std::shared_ptr< BaseFiledKey > >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          std::shared_ptr< BaseFiledKey > const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_BaseFiledKey_Sg__Sg__doRemoveRange(std::vector< std::shared_ptr< BaseFiledKey > > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::shared_ptr< LiveData< int > > FieldDataModel_getIntFiledValue(FieldDataModel *self,FiledKey< int > const &key){
            return self->getFiledValue(key);
        }
SWIGINTERN std::shared_ptr< LiveData< std::string > > FieldDataModel_getStringFiledValue(FieldDataModel *self,FiledKey< std::string > const &key){
            return self->getFiledValue(key);
        }
SWIGINTERN std::shared_ptr< LiveData< std::optional< std::string > > > FieldDataModel_getOptionalStringFiledValue(FieldDataModel *self,FiledKey< std::optional< std::string > > const &key){
            return self->getFiledValue(key);
        }
SWIGINTERN std::shared_ptr< MutableLiveData< int > > MutableFieldDataModel_getIntFiledValue(MutableFieldDataModel *self,FiledKey< int > const &key){
            return self->getMutableFiledValue(key);
        }
SWIGINTERN std::shared_ptr< MutableLiveData< std::string > > MutableFieldDataModel_getStringFiledValue(MutableFieldDataModel *self,FiledKey< std::string > const &key){
            return self->getMutableFiledValue(key);
        }
SWIGINTERN std::shared_ptr< MutableLiveData< std::optional< std::string > > > MutableFieldDataModel_getOptionalStringFiledValue(MutableFieldDataModel *self,FiledKey< std::optional< std::string > > const &key){
            return self->getMutableFiledValue(key);
        }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "field_wrap.h"

SwigDirector_IntLiveDataObserver::SwigDirector_IntLiveDataObserver(JNIEnv *jenv) : IntLiveDataObserver(), Swig::Director(jenv) {
}

SwigDirector_IntLiveDataObserver::~SwigDirector_IntLiveDataObserver() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_IntLiveDataObserver::onCall(int const &value) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jvalue = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method IntLiveDataObserver::onCall.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jvalue = (jint)value;
    jenv->CallStaticVoidMethod(Swig::jclass_FieldModuleJNI, Swig::director_method_ids[0], swigjobj, jvalue);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in IntLiveDataObserver::onCall ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_IntLiveDataObserver::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static jclass baseclass = swig_new_global_ref(jenv, "com/hyh/jnitest/test/field/IntLiveDataObserver");
  if (!baseclass) return;
  static SwigDirectorMethod methods[] = {
    SwigDirectorMethod(jenv, baseclass, "onCall", "(I)V")
  };
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].name, methods[i].desc);
        swig_override[i] = methods[i].methid && (methid != methods[i].methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_StringLiveDataObserver::SwigDirector_StringLiveDataObserver(JNIEnv *jenv) : StringLiveDataObserver(), Swig::Director(jenv) {
}

SwigDirector_StringLiveDataObserver::~SwigDirector_StringLiveDataObserver() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_StringLiveDataObserver::onCall(std::string const &value) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jvalue = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method StringLiveDataObserver::onCall.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jvalue = jenv->NewStringUTF((&value)->c_str());
    Swig::LocalRefGuard value_refguard(jenv, jvalue); 
    jenv->CallStaticVoidMethod(Swig::jclass_FieldModuleJNI, Swig::director_method_ids[1], swigjobj, jvalue);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in StringLiveDataObserver::onCall ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_StringLiveDataObserver::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static jclass baseclass = swig_new_global_ref(jenv, "com/hyh/jnitest/test/field/StringLiveDataObserver");
  if (!baseclass) return;
  static SwigDirectorMethod methods[] = {
    SwigDirectorMethod(jenv, baseclass, "onCall", "(Ljava/lang/String;)V")
  };
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].name, methods[i].desc);
        swig_override[i] = methods[i].methid && (methid != methods[i].methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_OptionalStringLiveDataObserver::SwigDirector_OptionalStringLiveDataObserver(JNIEnv *jenv) : OptionalStringLiveDataObserver(), Swig::Director(jenv) {
}

SwigDirector_OptionalStringLiveDataObserver::~SwigDirector_OptionalStringLiveDataObserver() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_OptionalStringLiveDataObserver::onCall(std::optional< std::string > const &value) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jvalue = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method OptionalStringLiveDataObserver::onCall.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    if ((&value)->has_value()) {
      jvalue = jenv->NewStringUTF((&value)->value().c_str());
    } else {
      jvalue = nullptr;
    }
    Swig::LocalRefGuard str_refguard(jenv, jvalue);
    
    jenv->CallStaticVoidMethod(Swig::jclass_FieldModuleJNI, Swig::director_method_ids[2], swigjobj, jvalue);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OptionalStringLiveDataObserver::onCall ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_OptionalStringLiveDataObserver::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static jclass baseclass = swig_new_global_ref(jenv, "com/hyh/jnitest/test/field/OptionalStringLiveDataObserver");
  if (!baseclass) return;
  static SwigDirectorMethod methods[] = {
    SwigDirectorMethod(jenv, baseclass, "onCall", "(Ljava/lang/String;)V")
  };
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].name, methods[i].desc);
        swig_override[i] = methods[i].methid && (methid != methods[i].methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_IntLiveData::SwigDirector_IntLiveData(JNIEnv *jenv,int value) : LiveData< int >(value), Swig::Director(jenv) {
}

SwigDirector_IntLiveData::~SwigDirector_IntLiveData() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


int SwigDirector_IntLiveData::GetValue() const {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return LiveData< int >::GetValue();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_FieldModuleJNI, Swig::director_method_ids[3], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in LiveData< int >::GetValue ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_IntLiveData::AddObserver(std::shared_ptr< LiveDataObserver< int > > observer,bool immediately) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jobserver  ;
  jboolean jimmediately  ;
  
  if (!swig_override[1]) {
    LiveData< int >::AddObserver(observer,immediately);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    IntLiveDataObserver *function_bridge1 = new SharedPtrIntLiveDataObserver4DI(observer);
    *(std::shared_ptr<IntLiveDataObserver> **) &jobserver = new std::shared_ptr<IntLiveDataObserver>(function_bridge1);
    
    jimmediately = (jboolean) immediately;
    jenv->CallStaticVoidMethod(Swig::jclass_FieldModuleJNI, Swig::director_method_ids[4], swigjobj, jobserver, jimmediately);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in LiveData< int >::AddObserver ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_IntLiveData::RemoveObserver(std::shared_ptr< LiveDataObserver< int > > observer) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jobserver  ;
  
  if (!swig_override[2]) {
    LiveData< int >::RemoveObserver(observer);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    IntLiveDataObserver *function_bridge1 = new SharedPtrIntLiveDataObserver4DI(observer);
    *(std::shared_ptr<IntLiveDataObserver> **) &jobserver = new std::shared_ptr<IntLiveDataObserver>(function_bridge1);
    
    jenv->CallStaticVoidMethod(Swig::jclass_FieldModuleJNI, Swig::director_method_ids[5], swigjobj, jobserver);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in LiveData< int >::RemoveObserver ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_IntLiveData::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static jclass baseclass = swig_new_global_ref(jenv, "com/hyh/jnitest/test/field/IntLiveData");
  if (!baseclass) return;
  static SwigDirectorMethod methods[] = {
    SwigDirectorMethod(jenv, baseclass, "GetValue", "()I"),
    SwigDirectorMethod(jenv, baseclass, "AddObserver", "(Lcom/hyh/jnitest/test/field/IntLiveDataObserver;Z)V"),
    SwigDirectorMethod(jenv, baseclass, "RemoveObserver", "(Lcom/hyh/jnitest/test/field/IntLiveDataObserver;)V")
  };
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 3; ++i) {
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].name, methods[i].desc);
        swig_override[i] = methods[i].methid && (methid != methods[i].methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_StringLiveData::SwigDirector_StringLiveData(JNIEnv *jenv,std::string value) : LiveData< std::string >(value), Swig::Director(jenv) {
}

SwigDirector_StringLiveData::~SwigDirector_StringLiveData() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_StringLiveData::GetValue() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return LiveData< std::string >::GetValue();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_FieldModuleJNI, Swig::director_method_ids[6], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in LiveData< std::string >::GetValue ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_StringLiveData::AddObserver(std::shared_ptr< LiveDataObserver< std::string > > observer,bool immediately) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jobserver  ;
  jboolean jimmediately  ;
  
  if (!swig_override[1]) {
    LiveData< std::string >::AddObserver(observer,immediately);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    StringLiveDataObserver *function_bridge1 = new SharedPtrStringLiveDataObserver4DI(observer);
    *(std::shared_ptr<StringLiveDataObserver> **) &jobserver = new std::shared_ptr<StringLiveDataObserver>(function_bridge1);
    
    jimmediately = (jboolean) immediately;
    jenv->CallStaticVoidMethod(Swig::jclass_FieldModuleJNI, Swig::director_method_ids[7], swigjobj, jobserver, jimmediately);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in LiveData< std::string >::AddObserver ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_StringLiveData::RemoveObserver(std::shared_ptr< LiveDataObserver< std::string > > observer) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jobserver  ;
  
  if (!swig_override[2]) {
    LiveData< std::string >::RemoveObserver(observer);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    StringLiveDataObserver *function_bridge1 = new SharedPtrStringLiveDataObserver4DI(observer);
    *(std::shared_ptr<StringLiveDataObserver> **) &jobserver = new std::shared_ptr<StringLiveDataObserver>(function_bridge1);
    
    jenv->CallStaticVoidMethod(Swig::jclass_FieldModuleJNI, Swig::director_method_ids[8], swigjobj, jobserver);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in LiveData< std::string >::RemoveObserver ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_StringLiveData::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static jclass baseclass = swig_new_global_ref(jenv, "com/hyh/jnitest/test/field/StringLiveData");
  if (!baseclass) return;
  static SwigDirectorMethod methods[] = {
    SwigDirectorMethod(jenv, baseclass, "GetValue", "()Ljava/lang/String;"),
    SwigDirectorMethod(jenv, baseclass, "AddObserver", "(Lcom/hyh/jnitest/test/field/StringLiveDataObserver;Z)V"),
    SwigDirectorMethod(jenv, baseclass, "RemoveObserver", "(Lcom/hyh/jnitest/test/field/StringLiveDataObserver;)V")
  };
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 3; ++i) {
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].name, methods[i].desc);
        swig_override[i] = methods[i].methid && (methid != methods[i].methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_OptionalStringLiveData::SwigDirector_OptionalStringLiveData(JNIEnv *jenv,std::optional< std::string > value) : LiveData< std::optional< std::string > >(value), Swig::Director(jenv) {
}

SwigDirector_OptionalStringLiveData::~SwigDirector_OptionalStringLiveData() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::optional< std::string > SwigDirector_OptionalStringLiveData::GetValue() const {
  SwigValueWrapper< std::optional< std::string > > c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return LiveData< std::optional< std::string > >::GetValue();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_FieldModuleJNI, Swig::director_method_ids[9], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    
    if (jresult == nullptr) {
      c_result = std::nullopt;
    } else {
      const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0);
      if (!c_result_pstr) return c_result;
      c_result = std::make_optional<std::string>(c_result_pstr);
      jenv->ReleaseStringUTFChars(jresult, c_result_pstr);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in LiveData< std::optional< std::string > >::GetValue ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_OptionalStringLiveData::AddObserver(std::shared_ptr< LiveDataObserver< std::optional< std::string > > > observer,bool immediately) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jobserver  ;
  jboolean jimmediately  ;
  
  if (!swig_override[1]) {
    LiveData< std::optional< std::string > >::AddObserver(observer,immediately);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    OptionalStringLiveDataObserver *function_bridge1 = new SharedPtrOptionalStringLiveDataObserver4DI(observer);
    *(std::shared_ptr<OptionalStringLiveDataObserver> **) &jobserver = new std::shared_ptr<OptionalStringLiveDataObserver>(function_bridge1);
    
    jimmediately = (jboolean) immediately;
    jenv->CallStaticVoidMethod(Swig::jclass_FieldModuleJNI, Swig::director_method_ids[10], swigjobj, jobserver, jimmediately);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in LiveData< std::optional< std::string > >::AddObserver ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_OptionalStringLiveData::RemoveObserver(std::shared_ptr< LiveDataObserver< std::optional< std::string > > > observer) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jobserver  ;
  
  if (!swig_override[2]) {
    LiveData< std::optional< std::string > >::RemoveObserver(observer);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    OptionalStringLiveDataObserver *function_bridge1 = new SharedPtrOptionalStringLiveDataObserver4DI(observer);
    *(std::shared_ptr<OptionalStringLiveDataObserver> **) &jobserver = new std::shared_ptr<OptionalStringLiveDataObserver>(function_bridge1);
    
    jenv->CallStaticVoidMethod(Swig::jclass_FieldModuleJNI, Swig::director_method_ids[11], swigjobj, jobserver);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in LiveData< std::optional< std::string > >::RemoveObserver ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_OptionalStringLiveData::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static jclass baseclass = swig_new_global_ref(jenv, "com/hyh/jnitest/test/field/OptionalStringLiveData");
  if (!baseclass) return;
  static SwigDirectorMethod methods[] = {
    SwigDirectorMethod(jenv, baseclass, "GetValue", "()Ljava/lang/String;"),
    SwigDirectorMethod(jenv, baseclass, "AddObserver", "(Lcom/hyh/jnitest/test/field/OptionalStringLiveDataObserver;Z)V"),
    SwigDirectorMethod(jenv, baseclass, "RemoveObserver", "(Lcom/hyh/jnitest/test/field/OptionalStringLiveDataObserver;)V")
  };
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 3; ++i) {
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].name, methods[i].desc);
        swig_override[i] = methods[i].methid && (methid != methods[i].methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_MutableIntLiveData::SwigDirector_MutableIntLiveData(JNIEnv *jenv,int value) : MutableLiveData< int >(value), Swig::Director(jenv) {
}

SwigDirector_MutableIntLiveData::~SwigDirector_MutableIntLiveData() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


int SwigDirector_MutableIntLiveData::GetValue() const {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return LiveData< int >::GetValue();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_FieldModuleJNI, Swig::director_method_ids[12], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in MutableLiveData< int >::GetValue ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_MutableIntLiveData::AddObserver(std::shared_ptr< LiveDataObserver< int > > observer,bool immediately) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jobserver  ;
  jboolean jimmediately  ;
  
  if (!swig_override[1]) {
    LiveData< int >::AddObserver(observer,immediately);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    IntLiveDataObserver *function_bridge1 = new SharedPtrIntLiveDataObserver4DI(observer);
    *(std::shared_ptr<IntLiveDataObserver> **) &jobserver = new std::shared_ptr<IntLiveDataObserver>(function_bridge1);
    
    jimmediately = (jboolean) immediately;
    jenv->CallStaticVoidMethod(Swig::jclass_FieldModuleJNI, Swig::director_method_ids[13], swigjobj, jobserver, jimmediately);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in MutableLiveData< int >::AddObserver ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_MutableIntLiveData::RemoveObserver(std::shared_ptr< LiveDataObserver< int > > observer) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jobserver  ;
  
  if (!swig_override[2]) {
    LiveData< int >::RemoveObserver(observer);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    IntLiveDataObserver *function_bridge1 = new SharedPtrIntLiveDataObserver4DI(observer);
    *(std::shared_ptr<IntLiveDataObserver> **) &jobserver = new std::shared_ptr<IntLiveDataObserver>(function_bridge1);
    
    jenv->CallStaticVoidMethod(Swig::jclass_FieldModuleJNI, Swig::director_method_ids[14], swigjobj, jobserver);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in MutableLiveData< int >::RemoveObserver ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_MutableIntLiveData::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static jclass baseclass = swig_new_global_ref(jenv, "com/hyh/jnitest/test/field/MutableIntLiveData");
  if (!baseclass) return;
  static SwigDirectorMethod methods[] = {
    SwigDirectorMethod(jenv, baseclass, "GetValue", "()I"),
    SwigDirectorMethod(jenv, baseclass, "AddObserver", "(Lcom/hyh/jnitest/test/field/IntLiveDataObserver;Z)V"),
    SwigDirectorMethod(jenv, baseclass, "RemoveObserver", "(Lcom/hyh/jnitest/test/field/IntLiveDataObserver;)V")
  };
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 3; ++i) {
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].name, methods[i].desc);
        swig_override[i] = methods[i].methid && (methid != methods[i].methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_MutableStringLiveData::SwigDirector_MutableStringLiveData(JNIEnv *jenv,std::string value) : MutableLiveData< std::string >(value), Swig::Director(jenv) {
}

SwigDirector_MutableStringLiveData::~SwigDirector_MutableStringLiveData() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_MutableStringLiveData::GetValue() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return LiveData< std::string >::GetValue();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_FieldModuleJNI, Swig::director_method_ids[15], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in MutableLiveData< std::string >::GetValue ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_MutableStringLiveData::AddObserver(std::shared_ptr< LiveDataObserver< std::string > > observer,bool immediately) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jobserver  ;
  jboolean jimmediately  ;
  
  if (!swig_override[1]) {
    LiveData< std::string >::AddObserver(observer,immediately);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    StringLiveDataObserver *function_bridge1 = new SharedPtrStringLiveDataObserver4DI(observer);
    *(std::shared_ptr<StringLiveDataObserver> **) &jobserver = new std::shared_ptr<StringLiveDataObserver>(function_bridge1);
    
    jimmediately = (jboolean) immediately;
    jenv->CallStaticVoidMethod(Swig::jclass_FieldModuleJNI, Swig::director_method_ids[16], swigjobj, jobserver, jimmediately);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in MutableLiveData< std::string >::AddObserver ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_MutableStringLiveData::RemoveObserver(std::shared_ptr< LiveDataObserver< std::string > > observer) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jobserver  ;
  
  if (!swig_override[2]) {
    LiveData< std::string >::RemoveObserver(observer);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    StringLiveDataObserver *function_bridge1 = new SharedPtrStringLiveDataObserver4DI(observer);
    *(std::shared_ptr<StringLiveDataObserver> **) &jobserver = new std::shared_ptr<StringLiveDataObserver>(function_bridge1);
    
    jenv->CallStaticVoidMethod(Swig::jclass_FieldModuleJNI, Swig::director_method_ids[17], swigjobj, jobserver);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in MutableLiveData< std::string >::RemoveObserver ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_MutableStringLiveData::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static jclass baseclass = swig_new_global_ref(jenv, "com/hyh/jnitest/test/field/MutableStringLiveData");
  if (!baseclass) return;
  static SwigDirectorMethod methods[] = {
    SwigDirectorMethod(jenv, baseclass, "GetValue", "()Ljava/lang/String;"),
    SwigDirectorMethod(jenv, baseclass, "AddObserver", "(Lcom/hyh/jnitest/test/field/StringLiveDataObserver;Z)V"),
    SwigDirectorMethod(jenv, baseclass, "RemoveObserver", "(Lcom/hyh/jnitest/test/field/StringLiveDataObserver;)V")
  };
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 3; ++i) {
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].name, methods[i].desc);
        swig_override[i] = methods[i].methid && (methid != methods[i].methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_MutableOptionalStringLiveData::SwigDirector_MutableOptionalStringLiveData(JNIEnv *jenv,std::optional< std::string > value) : MutableLiveData< std::optional< std::string > >(value), Swig::Director(jenv) {
}

SwigDirector_MutableOptionalStringLiveData::~SwigDirector_MutableOptionalStringLiveData() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::optional< std::string > SwigDirector_MutableOptionalStringLiveData::GetValue() const {
  SwigValueWrapper< std::optional< std::string > > c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return LiveData< std::optional< std::string > >::GetValue();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_FieldModuleJNI, Swig::director_method_ids[18], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    
    if (jresult == nullptr) {
      c_result = std::nullopt;
    } else {
      const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0);
      if (!c_result_pstr) return c_result;
      c_result = std::make_optional<std::string>(c_result_pstr);
      jenv->ReleaseStringUTFChars(jresult, c_result_pstr);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in MutableLiveData< std::optional< std::string > >::GetValue ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_MutableOptionalStringLiveData::AddObserver(std::shared_ptr< LiveDataObserver< std::optional< std::string > > > observer,bool immediately) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jobserver  ;
  jboolean jimmediately  ;
  
  if (!swig_override[1]) {
    LiveData< std::optional< std::string > >::AddObserver(observer,immediately);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    OptionalStringLiveDataObserver *function_bridge1 = new SharedPtrOptionalStringLiveDataObserver4DI(observer);
    *(std::shared_ptr<OptionalStringLiveDataObserver> **) &jobserver = new std::shared_ptr<OptionalStringLiveDataObserver>(function_bridge1);
    
    jimmediately = (jboolean) immediately;
    jenv->CallStaticVoidMethod(Swig::jclass_FieldModuleJNI, Swig::director_method_ids[19], swigjobj, jobserver, jimmediately);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in MutableLiveData< std::optional< std::string > >::AddObserver ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_MutableOptionalStringLiveData::RemoveObserver(std::shared_ptr< LiveDataObserver< std::optional< std::string > > > observer) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jobserver  ;
  
  if (!swig_override[2]) {
    LiveData< std::optional< std::string > >::RemoveObserver(observer);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    OptionalStringLiveDataObserver *function_bridge1 = new SharedPtrOptionalStringLiveDataObserver4DI(observer);
    *(std::shared_ptr<OptionalStringLiveDataObserver> **) &jobserver = new std::shared_ptr<OptionalStringLiveDataObserver>(function_bridge1);
    
    jenv->CallStaticVoidMethod(Swig::jclass_FieldModuleJNI, Swig::director_method_ids[20], swigjobj, jobserver);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in MutableLiveData< std::optional< std::string > >::RemoveObserver ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_MutableOptionalStringLiveData::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static jclass baseclass = swig_new_global_ref(jenv, "com/hyh/jnitest/test/field/MutableOptionalStringLiveData");
  if (!baseclass) return;
  static SwigDirectorMethod methods[] = {
    SwigDirectorMethod(jenv, baseclass, "GetValue", "()Ljava/lang/String;"),
    SwigDirectorMethod(jenv, baseclass, "AddObserver", "(Lcom/hyh/jnitest/test/field/OptionalStringLiveDataObserver;Z)V"),
    SwigDirectorMethod(jenv, baseclass, "RemoveObserver", "(Lcom/hyh/jnitest/test/field/OptionalStringLiveDataObserver;)V")
  };
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 3; ++i) {
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].name, methods[i].desc);
        swig_override[i] = methods[i].methid && (methid != methods[i].methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_new_1IntLiveDataObserver(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  IntLiveDataObserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (IntLiveDataObserver *)new SwigDirector_IntLiveDataObserver(jenv);
  
  *(std::shared_ptr<  IntLiveDataObserver > **)&jresult = result ? new std::shared_ptr<  IntLiveDataObserver >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_delete_1IntLiveDataObserver(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  IntLiveDataObserver *arg1 = (IntLiveDataObserver *) 0 ;
  std::shared_ptr< IntLiveDataObserver > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  IntLiveDataObserver > **)&jarg1;
  arg1 = (IntLiveDataObserver *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_IntLiveDataObserver_1onCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  IntLiveDataObserver *arg1 = (IntLiveDataObserver *) 0 ;
  int *arg2 = 0 ;
  std::shared_ptr< IntLiveDataObserver > *smartarg1 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  IntLiveDataObserver > **)&jarg1;
  arg1 = (IntLiveDataObserver *)(smartarg1 ? smartarg1->get() : 0); 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->onCall((int const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_IntLiveDataObserver_1calculateHash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  IntLiveDataObserver *arg1 = (IntLiveDataObserver *) 0 ;
  std::shared_ptr< IntLiveDataObserver > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  IntLiveDataObserver > **)&jarg1;
  arg1 = (IntLiveDataObserver *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->calculateHash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_IntLiveDataObserver_1isEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  IntLiveDataObserver *arg1 = (IntLiveDataObserver *) 0 ;
  IntLiveDataObserver *arg2 = 0 ;
  std::shared_ptr< IntLiveDataObserver > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  IntLiveDataObserver > **)&jarg1;
  arg1 = (IntLiveDataObserver *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (IntLiveDataObserver *)((*(std::shared_ptr< const IntLiveDataObserver > **)&jarg2) ? (*(std::shared_ptr< const IntLiveDataObserver > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "IntLiveDataObserver const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->isEquals((IntLiveDataObserver const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_IntLiveDataObserver_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< IntLiveDataObserver > *obj = *((std::shared_ptr< IntLiveDataObserver > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_IntLiveDataObserver *director = static_cast<SwigDirector_IntLiveDataObserver *>(obj->operator->());
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_IntLiveDataObserver_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  std::shared_ptr< IntLiveDataObserver > *obj = *((std::shared_ptr< IntLiveDataObserver > **)&objarg);
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_IntLiveDataObserver *director = dynamic_cast<SwigDirector_IntLiveDataObserver *>(obj->operator->());
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_new_1StringLiveDataObserver(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  StringLiveDataObserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (StringLiveDataObserver *)new SwigDirector_StringLiveDataObserver(jenv);
  
  *(std::shared_ptr<  StringLiveDataObserver > **)&jresult = result ? new std::shared_ptr<  StringLiveDataObserver >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_delete_1StringLiveDataObserver(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  StringLiveDataObserver *arg1 = (StringLiveDataObserver *) 0 ;
  std::shared_ptr< StringLiveDataObserver > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  StringLiveDataObserver > **)&jarg1;
  arg1 = (StringLiveDataObserver *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_StringLiveDataObserver_1onCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  StringLiveDataObserver *arg1 = (StringLiveDataObserver *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< StringLiveDataObserver > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  StringLiveDataObserver > **)&jarg1;
  arg1 = (StringLiveDataObserver *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->onCall((std::string const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_StringLiveDataObserver_1calculateHash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  StringLiveDataObserver *arg1 = (StringLiveDataObserver *) 0 ;
  std::shared_ptr< StringLiveDataObserver > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  StringLiveDataObserver > **)&jarg1;
  arg1 = (StringLiveDataObserver *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->calculateHash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_StringLiveDataObserver_1isEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  StringLiveDataObserver *arg1 = (StringLiveDataObserver *) 0 ;
  StringLiveDataObserver *arg2 = 0 ;
  std::shared_ptr< StringLiveDataObserver > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  StringLiveDataObserver > **)&jarg1;
  arg1 = (StringLiveDataObserver *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (StringLiveDataObserver *)((*(std::shared_ptr< const StringLiveDataObserver > **)&jarg2) ? (*(std::shared_ptr< const StringLiveDataObserver > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "StringLiveDataObserver const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->isEquals((StringLiveDataObserver const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_StringLiveDataObserver_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< StringLiveDataObserver > *obj = *((std::shared_ptr< StringLiveDataObserver > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_StringLiveDataObserver *director = static_cast<SwigDirector_StringLiveDataObserver *>(obj->operator->());
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_StringLiveDataObserver_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  std::shared_ptr< StringLiveDataObserver > *obj = *((std::shared_ptr< StringLiveDataObserver > **)&objarg);
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_StringLiveDataObserver *director = dynamic_cast<SwigDirector_StringLiveDataObserver *>(obj->operator->());
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_new_1OptionalStringLiveDataObserver(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OptionalStringLiveDataObserver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OptionalStringLiveDataObserver *)new SwigDirector_OptionalStringLiveDataObserver(jenv);
  
  *(std::shared_ptr<  OptionalStringLiveDataObserver > **)&jresult = result ? new std::shared_ptr<  OptionalStringLiveDataObserver >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_delete_1OptionalStringLiveDataObserver(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OptionalStringLiveDataObserver *arg1 = (OptionalStringLiveDataObserver *) 0 ;
  std::shared_ptr< OptionalStringLiveDataObserver > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  OptionalStringLiveDataObserver > **)&jarg1;
  arg1 = (OptionalStringLiveDataObserver *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_OptionalStringLiveDataObserver_1onCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OptionalStringLiveDataObserver *arg1 = (OptionalStringLiveDataObserver *) 0 ;
  std::optional< std::string > *arg2 = 0 ;
  std::shared_ptr< OptionalStringLiveDataObserver > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  OptionalStringLiveDataObserver > **)&jarg1;
  arg1 = (OptionalStringLiveDataObserver *)(smartarg1 ? smartarg1->get() : 0); 
  
  const char* c_result_pstr = jenv->GetStringUTFChars(jarg2, nullptr);
  std::optional< std::string > temp_arg2 = std::make_optional<std::string>(c_result_pstr);
  arg2 = &temp_arg2;
  jenv->ReleaseStringUTFChars(jarg2, c_result_pstr);
  
  (arg1)->onCall((std::optional< std::string > const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_OptionalStringLiveDataObserver_1calculateHash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OptionalStringLiveDataObserver *arg1 = (OptionalStringLiveDataObserver *) 0 ;
  std::shared_ptr< OptionalStringLiveDataObserver > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  OptionalStringLiveDataObserver > **)&jarg1;
  arg1 = (OptionalStringLiveDataObserver *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->calculateHash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_OptionalStringLiveDataObserver_1isEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OptionalStringLiveDataObserver *arg1 = (OptionalStringLiveDataObserver *) 0 ;
  OptionalStringLiveDataObserver *arg2 = 0 ;
  std::shared_ptr< OptionalStringLiveDataObserver > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  OptionalStringLiveDataObserver > **)&jarg1;
  arg1 = (OptionalStringLiveDataObserver *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (OptionalStringLiveDataObserver *)((*(std::shared_ptr< const OptionalStringLiveDataObserver > **)&jarg2) ? (*(std::shared_ptr< const OptionalStringLiveDataObserver > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OptionalStringLiveDataObserver const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->isEquals((OptionalStringLiveDataObserver const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_OptionalStringLiveDataObserver_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< OptionalStringLiveDataObserver > *obj = *((std::shared_ptr< OptionalStringLiveDataObserver > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_OptionalStringLiveDataObserver *director = static_cast<SwigDirector_OptionalStringLiveDataObserver *>(obj->operator->());
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_OptionalStringLiveDataObserver_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  std::shared_ptr< OptionalStringLiveDataObserver > *obj = *((std::shared_ptr< OptionalStringLiveDataObserver > **)&objarg);
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_OptionalStringLiveDataObserver *director = dynamic_cast<SwigDirector_OptionalStringLiveDataObserver *>(obj->operator->());
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_new_1BaseFiledKeyVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< BaseFiledKey > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::shared_ptr< BaseFiledKey > > *)new std::vector< std::shared_ptr< BaseFiledKey > >();
  *(std::vector< std::shared_ptr< BaseFiledKey > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_new_1BaseFiledKeyVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< BaseFiledKey > > *arg1 = 0 ;
  std::vector< std::shared_ptr< BaseFiledKey > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< BaseFiledKey > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::shared_ptr< BaseFiledKey > > const & is null");
    return 0;
  } 
  result = (std::vector< std::shared_ptr< BaseFiledKey > > *)new std::vector< std::shared_ptr< BaseFiledKey > >((std::vector< std::shared_ptr< BaseFiledKey > > const &)*arg1);
  *(std::vector< std::shared_ptr< BaseFiledKey > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_BaseFiledKeyVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::shared_ptr< BaseFiledKey > > *arg1 = (std::vector< std::shared_ptr< BaseFiledKey > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< BaseFiledKey > > **)&jarg1; 
  result = (bool)((std::vector< std::shared_ptr< BaseFiledKey > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_BaseFiledKeyVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::shared_ptr< BaseFiledKey > > *arg1 = (std::vector< std::shared_ptr< BaseFiledKey > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< BaseFiledKey > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_new_1BaseFiledKeyVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  std::shared_ptr< BaseFiledKey > *arg2 = 0 ;
  std::vector< std::shared_ptr< BaseFiledKey > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  
  std::shared_ptr<BaseFiledKey> temp2;
  arg2 = &temp2;
  std::shared_ptr<BaseFiledKey> *argp2 = *(std::shared_ptr<BaseFiledKey> **)&jarg2;
  if (argp2) {
    // 创建全局引用
    jobject globalRef = jenv->NewGlobalRef(jarg2_);
    // 创建新的 shared_ptr，使用自定义删除器
    *arg2 = std::shared_ptr<BaseFiledKey>(argp2->get(), [globalRef](BaseFiledKey* ptr) {
      JNIEnv *env = nullptr;
        JNIContext context(env);
        // 删除全局引用
        env->DeleteGlobalRef(globalRef);
      });
  }
  
  try {
    result = (std::vector< std::shared_ptr< BaseFiledKey > > *)new_std_vector_Sl_std_shared_ptr_Sl_BaseFiledKey_Sg__Sg___SWIG_2(SWIG_STD_MOVE(arg1),(std::shared_ptr< BaseFiledKey > const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::shared_ptr< BaseFiledKey > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_BaseFiledKeyVector_1doCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< std::shared_ptr< BaseFiledKey > > *arg1 = (std::vector< std::shared_ptr< BaseFiledKey > > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< BaseFiledKey > > **)&jarg1; 
  try {
    result = std_vector_Sl_std_shared_ptr_Sl_BaseFiledKey_Sg__Sg__doCapacity(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_BaseFiledKeyVector_1doReserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< std::shared_ptr< BaseFiledKey > > *arg1 = (std::vector< std::shared_ptr< BaseFiledKey > > *) 0 ;
  jint arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< BaseFiledKey > > **)&jarg1; 
  arg2 = jarg2; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_BaseFiledKey_Sg__Sg__doReserve(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jint JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_BaseFiledKeyVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< std::shared_ptr< BaseFiledKey > > *arg1 = (std::vector< std::shared_ptr< BaseFiledKey > > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< BaseFiledKey > > **)&jarg1; 
  try {
    result = std_vector_Sl_std_shared_ptr_Sl_BaseFiledKey_Sg__Sg__doSize((std::vector< std::shared_ptr< BaseFiledKey > > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_BaseFiledKeyVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::shared_ptr< BaseFiledKey > > *arg1 = (std::vector< std::shared_ptr< BaseFiledKey > > *) 0 ;
  std::vector< std::shared_ptr< BaseFiledKey > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::shared_ptr< BaseFiledKey > > **)&jarg1; 
  
  std::shared_ptr<BaseFiledKey> temp2;
  arg2 = &temp2;
  std::shared_ptr<BaseFiledKey> *argp2 = *(std::shared_ptr<BaseFiledKey> **)&jarg2;
  if (argp2) {
    // 创建全局引用
    jobject globalRef = jenv->NewGlobalRef(jarg2_);
    // 创建新的 shared_ptr，使用自定义删除器
    *arg2 = std::shared_ptr<BaseFiledKey>(argp2->get(), [globalRef](BaseFiledKey* ptr) {
      JNIEnv *env = nullptr;
        JNIContext context(env);
        // 删除全局引用
        env->DeleteGlobalRef(globalRef);
      });
  }
  
  std_vector_Sl_std_shared_ptr_Sl_BaseFiledKey_Sg__Sg__doAdd__SWIG_0(arg1,(std::shared_ptr< BaseFiledKey > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_BaseFiledKeyVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::shared_ptr< BaseFiledKey > > *arg1 = (std::vector< std::shared_ptr< BaseFiledKey > > *) 0 ;
  jint arg2 ;
  std::vector< std::shared_ptr< BaseFiledKey > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::shared_ptr< BaseFiledKey > > **)&jarg1; 
  arg2 = jarg2; 
  
  std::shared_ptr<BaseFiledKey> temp3;
  arg3 = &temp3;
  std::shared_ptr<BaseFiledKey> *argp3 = *(std::shared_ptr<BaseFiledKey> **)&jarg3;
  if (argp3) {
    // 创建全局引用
    jobject globalRef = jenv->NewGlobalRef(jarg3_);
    // 创建新的 shared_ptr，使用自定义删除器
    *arg3 = std::shared_ptr<BaseFiledKey>(argp3->get(), [globalRef](BaseFiledKey* ptr) {
      JNIEnv *env = nullptr;
        JNIContext context(env);
        // 删除全局引用
        env->DeleteGlobalRef(globalRef);
      });
  }
  
  try {
    std_vector_Sl_std_shared_ptr_Sl_BaseFiledKey_Sg__Sg__doAdd__SWIG_1(arg1,SWIG_STD_MOVE(arg2),(std::shared_ptr< BaseFiledKey > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_BaseFiledKeyVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< BaseFiledKey > > *arg1 = (std::vector< std::shared_ptr< BaseFiledKey > > *) 0 ;
  jint arg2 ;
  std::vector< std::shared_ptr< BaseFiledKey > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< BaseFiledKey > > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_std_shared_ptr_Sl_BaseFiledKey_Sg__Sg__doRemove(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::shared_ptr< BaseFiledKey > >::value_type **)&jresult = result ? new std::vector< std::shared_ptr< BaseFiledKey > >::value_type(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_BaseFiledKeyVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< BaseFiledKey > > *arg1 = (std::vector< std::shared_ptr< BaseFiledKey > > *) 0 ;
  jint arg2 ;
  std::vector< std::shared_ptr< BaseFiledKey > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< BaseFiledKey > > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< std::shared_ptr< BaseFiledKey > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_BaseFiledKey_Sg__Sg__doGet(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::shared_ptr< BaseFiledKey > >::value_type **)&jresult = *result ? new std::vector< std::shared_ptr< BaseFiledKey > >::value_type(*result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_BaseFiledKeyVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< BaseFiledKey > > *arg1 = (std::vector< std::shared_ptr< BaseFiledKey > > *) 0 ;
  jint arg2 ;
  std::vector< std::shared_ptr< BaseFiledKey > >::value_type *arg3 = 0 ;
  std::vector< std::shared_ptr< BaseFiledKey > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::shared_ptr< BaseFiledKey > > **)&jarg1; 
  arg2 = jarg2; 
  
  std::shared_ptr<BaseFiledKey> temp3;
  arg3 = &temp3;
  std::shared_ptr<BaseFiledKey> *argp3 = *(std::shared_ptr<BaseFiledKey> **)&jarg3;
  if (argp3) {
    // 创建全局引用
    jobject globalRef = jenv->NewGlobalRef(jarg3_);
    // 创建新的 shared_ptr，使用自定义删除器
    *arg3 = std::shared_ptr<BaseFiledKey>(argp3->get(), [globalRef](BaseFiledKey* ptr) {
      JNIEnv *env = nullptr;
        JNIContext context(env);
        // 删除全局引用
        env->DeleteGlobalRef(globalRef);
      });
  }
  
  try {
    result = std_vector_Sl_std_shared_ptr_Sl_BaseFiledKey_Sg__Sg__doSet(arg1,SWIG_STD_MOVE(arg2),(std::shared_ptr< BaseFiledKey > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::shared_ptr< BaseFiledKey > >::value_type **)&jresult = result ? new std::vector< std::shared_ptr< BaseFiledKey > >::value_type(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_BaseFiledKeyVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< std::shared_ptr< BaseFiledKey > > *arg1 = (std::vector< std::shared_ptr< BaseFiledKey > > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< BaseFiledKey > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_BaseFiledKey_Sg__Sg__doRemoveRange(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_delete_1BaseFiledKeyVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::shared_ptr< BaseFiledKey > > *arg1 = (std::vector< std::shared_ptr< BaseFiledKey > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::shared_ptr< BaseFiledKey > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_price_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FiledKey< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FiledKey< int > *) &FieldKeys::price;
  *(std::shared_ptr< const FiledKey<int> > **)&jresult = new std::shared_ptr< const FiledKey<int> >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_name_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FiledKey< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FiledKey< std::string > *) &FieldKeys::name;
  *(std::shared_ptr< const FiledKey<std::string> > **)&jresult = new std::shared_ptr< const FiledKey<std::string> >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_description_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FiledKey< std::optional< std::string > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FiledKey< std::optional< std::string > > *) &FieldKeys::description;
  *(std::shared_ptr< const FiledKey<std::optional<std::string>> > **)&jresult = new std::shared_ptr< const FiledKey<std::optional<std::string>> >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_delete_1BaseFiledKey(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BaseFiledKey *arg1 = (BaseFiledKey *) 0 ;
  std::shared_ptr< BaseFiledKey > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  BaseFiledKey > **)&jarg1;
  arg1 = (BaseFiledKey *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_BaseFiledKey_1getKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BaseFiledKey *arg1 = (BaseFiledKey *) 0 ;
  std::shared_ptr< BaseFiledKey const > *smartarg1 = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const BaseFiledKey > **)&jarg1;
  arg1 = (BaseFiledKey *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((BaseFiledKey const *)arg1)->getKey();
  
  jresult = result;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_new_1FieldDataModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< BaseFiledKey > > *arg1 = 0 ;
  FieldDataModel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< BaseFiledKey > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::shared_ptr< BaseFiledKey > > const & is null");
    return 0;
  } 
  result = (FieldDataModel *)new FieldDataModel((std::vector< std::shared_ptr< BaseFiledKey > > const &)*arg1);
  *(FieldDataModel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_FieldDataModel_1getIntFiledValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  FieldDataModel *arg1 = (FieldDataModel *) 0 ;
  FiledKey< int > *arg2 = 0 ;
  std::shared_ptr< LiveData< int > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FieldDataModel **)&jarg1; 
  
  arg2 = (FiledKey< int > *)((*(std::shared_ptr< const FiledKey<int> > **)&jarg2) ? (*(std::shared_ptr< const FiledKey<int> > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FiledKey< int > const & reference is null");
    return 0;
  } 
  result = FieldDataModel_getIntFiledValue(arg1,(FiledKey< int > const &)*arg2);
  *(std::shared_ptr< LiveData< int > > **)&jresult = result ? new std::shared_ptr< LiveData< int > >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_FieldDataModel_1getStringFiledValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  FieldDataModel *arg1 = (FieldDataModel *) 0 ;
  FiledKey< std::string > *arg2 = 0 ;
  std::shared_ptr< LiveData< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FieldDataModel **)&jarg1; 
  
  arg2 = (FiledKey< std::string > *)((*(std::shared_ptr< const FiledKey<std::string> > **)&jarg2) ? (*(std::shared_ptr< const FiledKey<std::string> > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FiledKey< std::string > const & reference is null");
    return 0;
  } 
  result = FieldDataModel_getStringFiledValue(arg1,(FiledKey< std::string > const &)*arg2);
  *(std::shared_ptr< LiveData< std::string > > **)&jresult = result ? new std::shared_ptr< LiveData< std::string > >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_FieldDataModel_1getOptionalStringFiledValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  FieldDataModel *arg1 = (FieldDataModel *) 0 ;
  FiledKey< std::optional< std::string > > *arg2 = 0 ;
  std::shared_ptr< LiveData< std::optional< std::string > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FieldDataModel **)&jarg1; 
  
  arg2 = (FiledKey< std::optional< std::string > > *)((*(std::shared_ptr< const FiledKey<std::optional<std::string>> > **)&jarg2) ? (*(std::shared_ptr< const FiledKey<std::optional<std::string>> > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FiledKey< std::optional< std::string > > const & reference is null");
    return 0;
  } 
  result = FieldDataModel_getOptionalStringFiledValue(arg1,(FiledKey< std::optional< std::string > > const &)*arg2);
  *(std::shared_ptr< LiveData< std::optional< std::string > > > **)&jresult = result ? new std::shared_ptr< LiveData< std::optional< std::string > > >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_delete_1FieldDataModel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FieldDataModel *arg1 = (FieldDataModel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FieldDataModel **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_new_1MutableFieldDataModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< BaseFiledKey > > *arg1 = 0 ;
  MutableFieldDataModel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< BaseFiledKey > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::shared_ptr< BaseFiledKey > > const & is null");
    return 0;
  } 
  result = (MutableFieldDataModel *)new MutableFieldDataModel((std::vector< std::shared_ptr< BaseFiledKey > > const &)*arg1);
  *(MutableFieldDataModel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_MutableFieldDataModel_1getIntFiledValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  MutableFieldDataModel *arg1 = (MutableFieldDataModel *) 0 ;
  FiledKey< int > *arg2 = 0 ;
  std::shared_ptr< MutableLiveData< int > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MutableFieldDataModel **)&jarg1; 
  
  arg2 = (FiledKey< int > *)((*(std::shared_ptr< const FiledKey<int> > **)&jarg2) ? (*(std::shared_ptr< const FiledKey<int> > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FiledKey< int > const & reference is null");
    return 0;
  } 
  result = MutableFieldDataModel_getIntFiledValue(arg1,(FiledKey< int > const &)*arg2);
  *(std::shared_ptr< MutableLiveData< int > > **)&jresult = result ? new std::shared_ptr< MutableLiveData< int > >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_MutableFieldDataModel_1getStringFiledValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  MutableFieldDataModel *arg1 = (MutableFieldDataModel *) 0 ;
  FiledKey< std::string > *arg2 = 0 ;
  std::shared_ptr< MutableLiveData< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MutableFieldDataModel **)&jarg1; 
  
  arg2 = (FiledKey< std::string > *)((*(std::shared_ptr< const FiledKey<std::string> > **)&jarg2) ? (*(std::shared_ptr< const FiledKey<std::string> > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FiledKey< std::string > const & reference is null");
    return 0;
  } 
  result = MutableFieldDataModel_getStringFiledValue(arg1,(FiledKey< std::string > const &)*arg2);
  *(std::shared_ptr< MutableLiveData< std::string > > **)&jresult = result ? new std::shared_ptr< MutableLiveData< std::string > >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_MutableFieldDataModel_1getOptionalStringFiledValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  MutableFieldDataModel *arg1 = (MutableFieldDataModel *) 0 ;
  FiledKey< std::optional< std::string > > *arg2 = 0 ;
  std::shared_ptr< MutableLiveData< std::optional< std::string > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MutableFieldDataModel **)&jarg1; 
  
  arg2 = (FiledKey< std::optional< std::string > > *)((*(std::shared_ptr< const FiledKey<std::optional<std::string>> > **)&jarg2) ? (*(std::shared_ptr< const FiledKey<std::optional<std::string>> > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FiledKey< std::optional< std::string > > const & reference is null");
    return 0;
  } 
  result = MutableFieldDataModel_getOptionalStringFiledValue(arg1,(FiledKey< std::optional< std::string > > const &)*arg2);
  *(std::shared_ptr< MutableLiveData< std::optional< std::string > > > **)&jresult = result ? new std::shared_ptr< MutableLiveData< std::optional< std::string > > >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_delete_1MutableFieldDataModel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MutableFieldDataModel *arg1 = (MutableFieldDataModel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MutableFieldDataModel **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_IntFiledKey_1getKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FiledKey< int > *arg1 = (FiledKey< int > *) 0 ;
  std::shared_ptr< FiledKey< int > const > *smartarg1 = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const FiledKey<int> > **)&jarg1;
  arg1 = (FiledKey<int> *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((FiledKey< int > const *)arg1)->getKey();
  
  jresult = result;
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_IntFiledKey_1getDefaultValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FiledKey< int > *arg1 = (FiledKey< int > *) 0 ;
  std::shared_ptr< FiledKey< int > const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const FiledKey<int> > **)&jarg1;
  arg1 = (FiledKey<int> *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((FiledKey< int > const *)arg1)->getDefaultValue();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_delete_1IntFiledKey(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FiledKey< int > *arg1 = (FiledKey< int > *) 0 ;
  std::shared_ptr< FiledKey< int > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  FiledKey<int> > **)&jarg1;
  arg1 = (FiledKey<int> *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_StringFiledKey_1getKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FiledKey< std::string > *arg1 = (FiledKey< std::string > *) 0 ;
  std::shared_ptr< FiledKey< std::string > const > *smartarg1 = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const FiledKey<std::string> > **)&jarg1;
  arg1 = (FiledKey<std::string> *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((FiledKey< std::string > const *)arg1)->getKey();
  
  jresult = result;
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_StringFiledKey_1getDefaultValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  FiledKey< std::string > *arg1 = (FiledKey< std::string > *) 0 ;
  std::shared_ptr< FiledKey< std::string > const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const FiledKey<std::string> > **)&jarg1;
  arg1 = (FiledKey<std::string> *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((FiledKey< std::string > const *)arg1)->getDefaultValue();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_delete_1StringFiledKey(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FiledKey< std::string > *arg1 = (FiledKey< std::string > *) 0 ;
  std::shared_ptr< FiledKey< std::string > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  FiledKey<std::string> > **)&jarg1;
  arg1 = (FiledKey<std::string> *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_OptionalStringFiledKey_1getKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FiledKey< std::optional< std::string > > *arg1 = (FiledKey< std::optional< std::string > > *) 0 ;
  std::shared_ptr< FiledKey< std::optional< std::string > > const > *smartarg1 = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const FiledKey<std::optional<std::string>> > **)&jarg1;
  arg1 = (FiledKey<std::optional<std::string>> *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((FiledKey< std::optional< std::string > > const *)arg1)->getKey();
  
  jresult = result;
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_OptionalStringFiledKey_1getDefaultValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  FiledKey< std::optional< std::string > > *arg1 = (FiledKey< std::optional< std::string > > *) 0 ;
  std::shared_ptr< FiledKey< std::optional< std::string > > const > *smartarg1 = 0 ;
  SwigValueWrapper< std::optional< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const FiledKey<std::optional<std::string>> > **)&jarg1;
  arg1 = (FiledKey<std::optional<std::string>> *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((FiledKey< std::optional< std::string > > const *)arg1)->getDefaultValue();
  
  if ((&result)->has_value()) {
    jresult = jenv->NewStringUTF((&result)->value().c_str());
  } else {
    jresult = nullptr;
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_delete_1OptionalStringFiledKey(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FiledKey< std::optional< std::string > > *arg1 = (FiledKey< std::optional< std::string > > *) 0 ;
  std::shared_ptr< FiledKey< std::optional< std::string > > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  FiledKey<std::optional<std::string>> > **)&jarg1;
  arg1 = (FiledKey<std::optional<std::string>> *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_delete_1IntLiveData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  LiveData< int > *arg1 = (LiveData< int > *) 0 ;
  std::shared_ptr< LiveData< int > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  LiveData<int> > **)&jarg1;
  arg1 = (LiveData<int> *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_new_1IntLiveData(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  LiveData< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (LiveData< int > *)new SwigDirector_IntLiveData(jenv,arg1);
  
  *(std::shared_ptr<  LiveData<int> > **)&jresult = result ? new std::shared_ptr<  LiveData<int> >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_IntLiveData_1GetValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  LiveData< int > *arg1 = (LiveData< int > *) 0 ;
  std::shared_ptr< LiveData< int > const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const LiveData<int> > **)&jarg1;
  arg1 = (LiveData<int> *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((LiveData< int > const *)arg1)->GetValue();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_IntLiveData_1GetValueSwigExplicitIntLiveData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  LiveData< int > *arg1 = (LiveData< int > *) 0 ;
  std::shared_ptr< LiveData< int > const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const LiveData<int> > **)&jarg1;
  arg1 = (LiveData<int> *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((LiveData< int > const *)arg1)->LiveData< int >::GetValue();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_IntLiveData_1AddObserver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  LiveData< int > *arg1 = (LiveData< int > *) 0 ;
  SwigValueWrapper< std::shared_ptr< LiveDataObserver< int > > > arg2 ;
  bool arg3 ;
  std::shared_ptr< LiveData< int > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  LiveData<int> > **)&jarg1;
  arg1 = (LiveData<int> *)(smartarg1 ? smartarg1->get() : 0); 
  
  std::shared_ptr<IntLiveDataObserver> *smartarg2 = *(std::shared_ptr<IntLiveDataObserver> **)&jarg2;
  auto original2 = IntLiveDataObserver::obtainOriginal(smartarg2);
  arg2 = original2;
  
  arg3 = jarg3 ? true : false; 
  (arg1)->AddObserver(SWIG_STD_MOVE(arg2),arg3);
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_IntLiveData_1AddObserverSwigExplicitIntLiveData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  LiveData< int > *arg1 = (LiveData< int > *) 0 ;
  SwigValueWrapper< std::shared_ptr< LiveDataObserver< int > > > arg2 ;
  bool arg3 ;
  std::shared_ptr< LiveData< int > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  LiveData<int> > **)&jarg1;
  arg1 = (LiveData<int> *)(smartarg1 ? smartarg1->get() : 0); 
  
  std::shared_ptr<IntLiveDataObserver> *smartarg2 = *(std::shared_ptr<IntLiveDataObserver> **)&jarg2;
  auto original2 = IntLiveDataObserver::obtainOriginal(smartarg2);
  arg2 = original2;
  
  arg3 = jarg3 ? true : false; 
  (arg1)->LiveData< int >::AddObserver(SWIG_STD_MOVE(arg2),arg3);
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_IntLiveData_1RemoveObserver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  LiveData< int > *arg1 = (LiveData< int > *) 0 ;
  SwigValueWrapper< std::shared_ptr< LiveDataObserver< int > > > arg2 ;
  std::shared_ptr< LiveData< int > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  LiveData<int> > **)&jarg1;
  arg1 = (LiveData<int> *)(smartarg1 ? smartarg1->get() : 0); 
  
  std::shared_ptr<IntLiveDataObserver> *smartarg2 = *(std::shared_ptr<IntLiveDataObserver> **)&jarg2;
  auto original2 = IntLiveDataObserver::obtainOriginal(smartarg2);
  arg2 = original2;
  
  (arg1)->RemoveObserver(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_IntLiveData_1RemoveObserverSwigExplicitIntLiveData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  LiveData< int > *arg1 = (LiveData< int > *) 0 ;
  SwigValueWrapper< std::shared_ptr< LiveDataObserver< int > > > arg2 ;
  std::shared_ptr< LiveData< int > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  LiveData<int> > **)&jarg1;
  arg1 = (LiveData<int> *)(smartarg1 ? smartarg1->get() : 0); 
  
  std::shared_ptr<IntLiveDataObserver> *smartarg2 = *(std::shared_ptr<IntLiveDataObserver> **)&jarg2;
  auto original2 = IntLiveDataObserver::obtainOriginal(smartarg2);
  arg2 = original2;
  
  (arg1)->LiveData< int >::RemoveObserver(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_IntLiveData_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< LiveData< int > > *obj = *((std::shared_ptr< LiveData< int > > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_IntLiveData *director = static_cast<SwigDirector_IntLiveData *>(obj->operator->());
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_IntLiveData_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  std::shared_ptr< LiveData< int > > *obj = *((std::shared_ptr< LiveData< int > > **)&objarg);
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_IntLiveData *director = dynamic_cast<SwigDirector_IntLiveData *>(obj->operator->());
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_delete_1StringLiveData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  LiveData< std::string > *arg1 = (LiveData< std::string > *) 0 ;
  std::shared_ptr< LiveData< std::string > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  LiveData<std::string> > **)&jarg1;
  arg1 = (LiveData<std::string> *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_new_1StringLiveData(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string arg1 ;
  LiveData< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (LiveData< std::string > *)new SwigDirector_StringLiveData(jenv,SWIG_STD_MOVE(arg1));
  
  *(std::shared_ptr<  LiveData<std::string> > **)&jresult = result ? new std::shared_ptr<  LiveData<std::string> >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_StringLiveData_1GetValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  LiveData< std::string > *arg1 = (LiveData< std::string > *) 0 ;
  std::shared_ptr< LiveData< std::string > const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const LiveData<std::string> > **)&jarg1;
  arg1 = (LiveData<std::string> *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((LiveData< std::string > const *)arg1)->GetValue();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_StringLiveData_1GetValueSwigExplicitStringLiveData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  LiveData< std::string > *arg1 = (LiveData< std::string > *) 0 ;
  std::shared_ptr< LiveData< std::string > const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const LiveData<std::string> > **)&jarg1;
  arg1 = (LiveData<std::string> *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((LiveData< std::string > const *)arg1)->LiveData< std::string >::GetValue();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_StringLiveData_1AddObserver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  LiveData< std::string > *arg1 = (LiveData< std::string > *) 0 ;
  SwigValueWrapper< std::shared_ptr< LiveDataObserver< std::string > > > arg2 ;
  bool arg3 ;
  std::shared_ptr< LiveData< std::string > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  LiveData<std::string> > **)&jarg1;
  arg1 = (LiveData<std::string> *)(smartarg1 ? smartarg1->get() : 0); 
  
  std::shared_ptr<StringLiveDataObserver> *smartarg2 = *(std::shared_ptr<StringLiveDataObserver> **)&jarg2;
  auto original2 = StringLiveDataObserver::obtainOriginal(smartarg2);
  arg2 = original2;
  
  arg3 = jarg3 ? true : false; 
  (arg1)->AddObserver(SWIG_STD_MOVE(arg2),arg3);
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_StringLiveData_1AddObserverSwigExplicitStringLiveData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  LiveData< std::string > *arg1 = (LiveData< std::string > *) 0 ;
  SwigValueWrapper< std::shared_ptr< LiveDataObserver< std::string > > > arg2 ;
  bool arg3 ;
  std::shared_ptr< LiveData< std::string > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  LiveData<std::string> > **)&jarg1;
  arg1 = (LiveData<std::string> *)(smartarg1 ? smartarg1->get() : 0); 
  
  std::shared_ptr<StringLiveDataObserver> *smartarg2 = *(std::shared_ptr<StringLiveDataObserver> **)&jarg2;
  auto original2 = StringLiveDataObserver::obtainOriginal(smartarg2);
  arg2 = original2;
  
  arg3 = jarg3 ? true : false; 
  (arg1)->LiveData< std::string >::AddObserver(SWIG_STD_MOVE(arg2),arg3);
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_StringLiveData_1RemoveObserver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  LiveData< std::string > *arg1 = (LiveData< std::string > *) 0 ;
  SwigValueWrapper< std::shared_ptr< LiveDataObserver< std::string > > > arg2 ;
  std::shared_ptr< LiveData< std::string > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  LiveData<std::string> > **)&jarg1;
  arg1 = (LiveData<std::string> *)(smartarg1 ? smartarg1->get() : 0); 
  
  std::shared_ptr<StringLiveDataObserver> *smartarg2 = *(std::shared_ptr<StringLiveDataObserver> **)&jarg2;
  auto original2 = StringLiveDataObserver::obtainOriginal(smartarg2);
  arg2 = original2;
  
  (arg1)->RemoveObserver(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_StringLiveData_1RemoveObserverSwigExplicitStringLiveData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  LiveData< std::string > *arg1 = (LiveData< std::string > *) 0 ;
  SwigValueWrapper< std::shared_ptr< LiveDataObserver< std::string > > > arg2 ;
  std::shared_ptr< LiveData< std::string > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  LiveData<std::string> > **)&jarg1;
  arg1 = (LiveData<std::string> *)(smartarg1 ? smartarg1->get() : 0); 
  
  std::shared_ptr<StringLiveDataObserver> *smartarg2 = *(std::shared_ptr<StringLiveDataObserver> **)&jarg2;
  auto original2 = StringLiveDataObserver::obtainOriginal(smartarg2);
  arg2 = original2;
  
  (arg1)->LiveData< std::string >::RemoveObserver(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_StringLiveData_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< LiveData< std::string > > *obj = *((std::shared_ptr< LiveData< std::string > > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_StringLiveData *director = static_cast<SwigDirector_StringLiveData *>(obj->operator->());
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_StringLiveData_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  std::shared_ptr< LiveData< std::string > > *obj = *((std::shared_ptr< LiveData< std::string > > **)&objarg);
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_StringLiveData *director = dynamic_cast<SwigDirector_StringLiveData *>(obj->operator->());
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_delete_1OptionalStringLiveData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  LiveData< std::optional< std::string > > *arg1 = (LiveData< std::optional< std::string > > *) 0 ;
  std::shared_ptr< LiveData< std::optional< std::string > > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  LiveData<std::optional<std::string>> > **)&jarg1;
  arg1 = (LiveData<std::optional<std::string>> *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_new_1OptionalStringLiveData(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::optional< std::string > > arg1 ;
  LiveData< std::optional< std::string > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  const char* c_result_pstr = jenv->GetStringUTFChars(jarg1, nullptr);
  arg1 = std::make_optional<std::string>(c_result_pstr);
  jenv->ReleaseStringUTFChars(jarg1, c_result_pstr);
  
  result = (LiveData< std::optional< std::string > > *)new SwigDirector_OptionalStringLiveData(jenv,SWIG_STD_MOVE(arg1));
  
  *(std::shared_ptr<  LiveData<std::optional<std::string>> > **)&jresult = result ? new std::shared_ptr<  LiveData<std::optional<std::string>> >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_OptionalStringLiveData_1GetValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  LiveData< std::optional< std::string > > *arg1 = (LiveData< std::optional< std::string > > *) 0 ;
  std::shared_ptr< LiveData< std::optional< std::string > > const > *smartarg1 = 0 ;
  SwigValueWrapper< std::optional< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const LiveData<std::optional<std::string>> > **)&jarg1;
  arg1 = (LiveData<std::optional<std::string>> *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((LiveData< std::optional< std::string > > const *)arg1)->GetValue();
  
  if ((&result)->has_value()) {
    jresult = jenv->NewStringUTF((&result)->value().c_str());
  } else {
    jresult = nullptr;
  }
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_OptionalStringLiveData_1GetValueSwigExplicitOptionalStringLiveData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  LiveData< std::optional< std::string > > *arg1 = (LiveData< std::optional< std::string > > *) 0 ;
  std::shared_ptr< LiveData< std::optional< std::string > > const > *smartarg1 = 0 ;
  SwigValueWrapper< std::optional< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const LiveData<std::optional<std::string>> > **)&jarg1;
  arg1 = (LiveData<std::optional<std::string>> *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((LiveData< std::optional< std::string > > const *)arg1)->LiveData< std::optional< std::string > >::GetValue();
  
  if ((&result)->has_value()) {
    jresult = jenv->NewStringUTF((&result)->value().c_str());
  } else {
    jresult = nullptr;
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_OptionalStringLiveData_1AddObserver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  LiveData< std::optional< std::string > > *arg1 = (LiveData< std::optional< std::string > > *) 0 ;
  SwigValueWrapper< std::shared_ptr< LiveDataObserver< std::optional< std::string > > > > arg2 ;
  bool arg3 ;
  std::shared_ptr< LiveData< std::optional< std::string > > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  LiveData<std::optional<std::string>> > **)&jarg1;
  arg1 = (LiveData<std::optional<std::string>> *)(smartarg1 ? smartarg1->get() : 0); 
  
  std::shared_ptr<OptionalStringLiveDataObserver> *smartarg2 = *(std::shared_ptr<OptionalStringLiveDataObserver> **)&jarg2;
  auto original2 = OptionalStringLiveDataObserver::obtainOriginal(smartarg2);
  arg2 = original2;
  
  arg3 = jarg3 ? true : false; 
  (arg1)->AddObserver(SWIG_STD_MOVE(arg2),arg3);
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_OptionalStringLiveData_1AddObserverSwigExplicitOptionalStringLiveData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  LiveData< std::optional< std::string > > *arg1 = (LiveData< std::optional< std::string > > *) 0 ;
  SwigValueWrapper< std::shared_ptr< LiveDataObserver< std::optional< std::string > > > > arg2 ;
  bool arg3 ;
  std::shared_ptr< LiveData< std::optional< std::string > > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  LiveData<std::optional<std::string>> > **)&jarg1;
  arg1 = (LiveData<std::optional<std::string>> *)(smartarg1 ? smartarg1->get() : 0); 
  
  std::shared_ptr<OptionalStringLiveDataObserver> *smartarg2 = *(std::shared_ptr<OptionalStringLiveDataObserver> **)&jarg2;
  auto original2 = OptionalStringLiveDataObserver::obtainOriginal(smartarg2);
  arg2 = original2;
  
  arg3 = jarg3 ? true : false; 
  (arg1)->LiveData< std::optional< std::string > >::AddObserver(SWIG_STD_MOVE(arg2),arg3);
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_OptionalStringLiveData_1RemoveObserver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  LiveData< std::optional< std::string > > *arg1 = (LiveData< std::optional< std::string > > *) 0 ;
  SwigValueWrapper< std::shared_ptr< LiveDataObserver< std::optional< std::string > > > > arg2 ;
  std::shared_ptr< LiveData< std::optional< std::string > > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  LiveData<std::optional<std::string>> > **)&jarg1;
  arg1 = (LiveData<std::optional<std::string>> *)(smartarg1 ? smartarg1->get() : 0); 
  
  std::shared_ptr<OptionalStringLiveDataObserver> *smartarg2 = *(std::shared_ptr<OptionalStringLiveDataObserver> **)&jarg2;
  auto original2 = OptionalStringLiveDataObserver::obtainOriginal(smartarg2);
  arg2 = original2;
  
  (arg1)->RemoveObserver(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_OptionalStringLiveData_1RemoveObserverSwigExplicitOptionalStringLiveData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  LiveData< std::optional< std::string > > *arg1 = (LiveData< std::optional< std::string > > *) 0 ;
  SwigValueWrapper< std::shared_ptr< LiveDataObserver< std::optional< std::string > > > > arg2 ;
  std::shared_ptr< LiveData< std::optional< std::string > > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  LiveData<std::optional<std::string>> > **)&jarg1;
  arg1 = (LiveData<std::optional<std::string>> *)(smartarg1 ? smartarg1->get() : 0); 
  
  std::shared_ptr<OptionalStringLiveDataObserver> *smartarg2 = *(std::shared_ptr<OptionalStringLiveDataObserver> **)&jarg2;
  auto original2 = OptionalStringLiveDataObserver::obtainOriginal(smartarg2);
  arg2 = original2;
  
  (arg1)->LiveData< std::optional< std::string > >::RemoveObserver(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_OptionalStringLiveData_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< LiveData< std::optional< std::string > > > *obj = *((std::shared_ptr< LiveData< std::optional< std::string > > > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_OptionalStringLiveData *director = static_cast<SwigDirector_OptionalStringLiveData *>(obj->operator->());
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_OptionalStringLiveData_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  std::shared_ptr< LiveData< std::optional< std::string > > > *obj = *((std::shared_ptr< LiveData< std::optional< std::string > > > **)&objarg);
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_OptionalStringLiveData *director = dynamic_cast<SwigDirector_OptionalStringLiveData *>(obj->operator->());
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_new_1MutableIntLiveData(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  MutableLiveData< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (MutableLiveData< int > *)new SwigDirector_MutableIntLiveData(jenv,arg1);
  
  *(std::shared_ptr<  MutableLiveData<int> > **)&jresult = result ? new std::shared_ptr<  MutableLiveData<int> >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_MutableIntLiveData_1SetValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  MutableLiveData< int > *arg1 = (MutableLiveData< int > *) 0 ;
  int *arg2 = 0 ;
  std::shared_ptr< MutableLiveData< int > > *smartarg1 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  MutableLiveData<int> > **)&jarg1;
  arg1 = (MutableLiveData<int> *)(smartarg1 ? smartarg1->get() : 0); 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->SetValue((int const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_delete_1MutableIntLiveData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MutableLiveData< int > *arg1 = (MutableLiveData< int > *) 0 ;
  std::shared_ptr< MutableLiveData< int > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  MutableLiveData<int> > **)&jarg1;
  arg1 = (MutableLiveData<int> *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_MutableIntLiveData_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< MutableLiveData< int > > *obj = *((std::shared_ptr< MutableLiveData< int > > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_MutableIntLiveData *director = static_cast<SwigDirector_MutableIntLiveData *>(obj->operator->());
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_MutableIntLiveData_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  std::shared_ptr< MutableLiveData< int > > *obj = *((std::shared_ptr< MutableLiveData< int > > **)&objarg);
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_MutableIntLiveData *director = dynamic_cast<SwigDirector_MutableIntLiveData *>(obj->operator->());
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_new_1MutableStringLiveData(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string arg1 ;
  MutableLiveData< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (MutableLiveData< std::string > *)new SwigDirector_MutableStringLiveData(jenv,SWIG_STD_MOVE(arg1));
  
  *(std::shared_ptr<  MutableLiveData<std::string> > **)&jresult = result ? new std::shared_ptr<  MutableLiveData<std::string> >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_MutableStringLiveData_1SetValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  MutableLiveData< std::string > *arg1 = (MutableLiveData< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< MutableLiveData< std::string > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  MutableLiveData<std::string> > **)&jarg1;
  arg1 = (MutableLiveData<std::string> *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->SetValue((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_delete_1MutableStringLiveData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MutableLiveData< std::string > *arg1 = (MutableLiveData< std::string > *) 0 ;
  std::shared_ptr< MutableLiveData< std::string > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  MutableLiveData<std::string> > **)&jarg1;
  arg1 = (MutableLiveData<std::string> *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_MutableStringLiveData_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< MutableLiveData< std::string > > *obj = *((std::shared_ptr< MutableLiveData< std::string > > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_MutableStringLiveData *director = static_cast<SwigDirector_MutableStringLiveData *>(obj->operator->());
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_MutableStringLiveData_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  std::shared_ptr< MutableLiveData< std::string > > *obj = *((std::shared_ptr< MutableLiveData< std::string > > **)&objarg);
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_MutableStringLiveData *director = dynamic_cast<SwigDirector_MutableStringLiveData *>(obj->operator->());
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_new_1MutableOptionalStringLiveData(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::optional< std::string > > arg1 ;
  MutableLiveData< std::optional< std::string > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  const char* c_result_pstr = jenv->GetStringUTFChars(jarg1, nullptr);
  arg1 = std::make_optional<std::string>(c_result_pstr);
  jenv->ReleaseStringUTFChars(jarg1, c_result_pstr);
  
  result = (MutableLiveData< std::optional< std::string > > *)new SwigDirector_MutableOptionalStringLiveData(jenv,SWIG_STD_MOVE(arg1));
  
  *(std::shared_ptr<  MutableLiveData<std::optional<std::string>> > **)&jresult = result ? new std::shared_ptr<  MutableLiveData<std::optional<std::string>> >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_MutableOptionalStringLiveData_1SetValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  MutableLiveData< std::optional< std::string > > *arg1 = (MutableLiveData< std::optional< std::string > > *) 0 ;
  std::optional< std::string > *arg2 = 0 ;
  std::shared_ptr< MutableLiveData< std::optional< std::string > > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  MutableLiveData<std::optional<std::string>> > **)&jarg1;
  arg1 = (MutableLiveData<std::optional<std::string>> *)(smartarg1 ? smartarg1->get() : 0); 
  
  const char* c_result_pstr = jenv->GetStringUTFChars(jarg2, nullptr);
  std::optional< std::string > temp_arg2 = std::make_optional<std::string>(c_result_pstr);
  arg2 = &temp_arg2;
  jenv->ReleaseStringUTFChars(jarg2, c_result_pstr);
  
  (arg1)->SetValue((std::optional< std::string > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_delete_1MutableOptionalStringLiveData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MutableLiveData< std::optional< std::string > > *arg1 = (MutableLiveData< std::optional< std::string > > *) 0 ;
  std::shared_ptr< MutableLiveData< std::optional< std::string > > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  MutableLiveData<std::optional<std::string>> > **)&jarg1;
  arg1 = (MutableLiveData<std::optional<std::string>> *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_MutableOptionalStringLiveData_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< MutableLiveData< std::optional< std::string > > > *obj = *((std::shared_ptr< MutableLiveData< std::optional< std::string > > > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_MutableOptionalStringLiveData *director = static_cast<SwigDirector_MutableOptionalStringLiveData *>(obj->operator->());
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_MutableOptionalStringLiveData_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  std::shared_ptr< MutableLiveData< std::optional< std::string > > > *obj = *((std::shared_ptr< MutableLiveData< std::optional< std::string > > > **)&objarg);
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_MutableOptionalStringLiveData *director = dynamic_cast<SwigDirector_MutableOptionalStringLiveData *>(obj->operator->());
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_MutableFieldDataModel_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(FieldDataModel **)&baseptr = *(MutableFieldDataModel **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_IntFiledKey_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< FiledKey< int > > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< FiledKey< int > > **)&jarg1;
    *(std::shared_ptr< BaseFiledKey > **)&baseptr = argp1 ? new std::shared_ptr< BaseFiledKey >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_StringFiledKey_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< FiledKey< std::string > > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< FiledKey< std::string > > **)&jarg1;
    *(std::shared_ptr< BaseFiledKey > **)&baseptr = argp1 ? new std::shared_ptr< BaseFiledKey >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_OptionalStringFiledKey_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< FiledKey< std::optional< std::string > > > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< FiledKey< std::optional< std::string > > > **)&jarg1;
    *(std::shared_ptr< BaseFiledKey > **)&baseptr = argp1 ? new std::shared_ptr< BaseFiledKey >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_MutableIntLiveData_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< MutableLiveData< int > > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< MutableLiveData< int > > **)&jarg1;
    *(std::shared_ptr< LiveData< int > > **)&baseptr = argp1 ? new std::shared_ptr< LiveData< int > >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_MutableStringLiveData_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< MutableLiveData< std::string > > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< MutableLiveData< std::string > > **)&jarg1;
    *(std::shared_ptr< LiveData< std::string > > **)&baseptr = argp1 ? new std::shared_ptr< LiveData< std::string > >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_MutableOptionalStringLiveData_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< MutableLiveData< std::optional< std::string > > > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< MutableLiveData< std::optional< std::string > > > **)&jarg1;
    *(std::shared_ptr< LiveData< std::optional< std::string > > > **)&baseptr = argp1 ? new std::shared_ptr< LiveData< std::optional< std::string > > >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_field_FieldModuleJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[21] = {
    {
      "SwigDirector_IntLiveDataObserver_onCall", "(Lcom/hyh/jnitest/test/field/IntLiveDataObserver;I)V" 
    },
    {
      "SwigDirector_StringLiveDataObserver_onCall", "(Lcom/hyh/jnitest/test/field/StringLiveDataObserver;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_OptionalStringLiveDataObserver_onCall", "(Lcom/hyh/jnitest/test/field/OptionalStringLiveDataObserver;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_IntLiveData_GetValue", "(Lcom/hyh/jnitest/test/field/IntLiveData;)I" 
    },
    {
      "SwigDirector_IntLiveData_AddObserver", "(Lcom/hyh/jnitest/test/field/IntLiveData;JZ)V" 
    },
    {
      "SwigDirector_IntLiveData_RemoveObserver", "(Lcom/hyh/jnitest/test/field/IntLiveData;J)V" 
    },
    {
      "SwigDirector_StringLiveData_GetValue", "(Lcom/hyh/jnitest/test/field/StringLiveData;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_StringLiveData_AddObserver", "(Lcom/hyh/jnitest/test/field/StringLiveData;JZ)V" 
    },
    {
      "SwigDirector_StringLiveData_RemoveObserver", "(Lcom/hyh/jnitest/test/field/StringLiveData;J)V" 
    },
    {
      "SwigDirector_OptionalStringLiveData_GetValue", "(Lcom/hyh/jnitest/test/field/OptionalStringLiveData;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_OptionalStringLiveData_AddObserver", "(Lcom/hyh/jnitest/test/field/OptionalStringLiveData;JZ)V" 
    },
    {
      "SwigDirector_OptionalStringLiveData_RemoveObserver", "(Lcom/hyh/jnitest/test/field/OptionalStringLiveData;J)V" 
    },
    {
      "SwigDirector_MutableIntLiveData_GetValue", "(Lcom/hyh/jnitest/test/field/MutableIntLiveData;)I" 
    },
    {
      "SwigDirector_MutableIntLiveData_AddObserver", "(Lcom/hyh/jnitest/test/field/MutableIntLiveData;JZ)V" 
    },
    {
      "SwigDirector_MutableIntLiveData_RemoveObserver", "(Lcom/hyh/jnitest/test/field/MutableIntLiveData;J)V" 
    },
    {
      "SwigDirector_MutableStringLiveData_GetValue", "(Lcom/hyh/jnitest/test/field/MutableStringLiveData;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_MutableStringLiveData_AddObserver", "(Lcom/hyh/jnitest/test/field/MutableStringLiveData;JZ)V" 
    },
    {
      "SwigDirector_MutableStringLiveData_RemoveObserver", "(Lcom/hyh/jnitest/test/field/MutableStringLiveData;J)V" 
    },
    {
      "SwigDirector_MutableOptionalStringLiveData_GetValue", "(Lcom/hyh/jnitest/test/field/MutableOptionalStringLiveData;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_MutableOptionalStringLiveData_AddObserver", "(Lcom/hyh/jnitest/test/field/MutableOptionalStringLiveData;JZ)V" 
    },
    {
      "SwigDirector_MutableOptionalStringLiveData_RemoveObserver", "(Lcom/hyh/jnitest/test/field/MutableOptionalStringLiveData;J)V" 
    }
  };
  Swig::jclass_FieldModuleJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_FieldModuleJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_method_ids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_method_ids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

