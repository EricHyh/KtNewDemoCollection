/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.3.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#include "../../swig_gen_common.h"
#include "../../../../cpp/JNIContext.h"

namespace Swig {
  namespace {
    jclass jclass_ObserverModuleJNI = NULL;
    jmethodID director_method_ids[26];
  }
}




#include <map>
#include <unordered_map>
#include <variant>
#include <memory>
#include <mutex>
#include <list>
#include <vector>
#include <functional>
#include <typeindex>


#include "observer/ObserverManager.h"
#include "JNITestEntrance.h"


class TestStructVariantBridge {

public:
    TestStructVariantBridge() = default;

    TestStructVariantBridge(const TestStructVariant& value) : m_original(value) {}

    TestStructVariantBridge(const TestStruct& value) : m_original(value) {}

    bool IsTestStruct(){
        return std::holds_alternative<TestStruct>(m_original);
    }

    TestStruct GetTestStruct(){
        return std::get<TestStruct>(m_original);
    }

    TestStructVariantBridge(const TestStruct2& value) : m_original(value) {}

    bool IsTestStruct2(){
        return std::holds_alternative<TestStruct2>(m_original);
    }

    TestStruct2 GetTestStruct2(){
        return std::get<TestStruct2>(m_original);
    }

    TestStructVariant m_original;
};



class TestObserverBridge {

public:
    TestObserverBridge(): m_func(nullptr) {}
    virtual ~TestObserverBridge() = default;

    virtual void onCall(const int &data) = 0;

    virtual int calculateHash() {
        return static_cast<int>(std::hash<const TestObserverBridge*>{}(this));
    }

    virtual bool isEquals(const TestObserverBridge& other) {
        return this == &other;
    }

    static TestObserver obtainOriginal(JNIEnv *jenv, std::shared_ptr<TestObserverBridge> *func_bridge, jobject j_func_bridge){
        using ReturnType = typename TestObserver::result_type;
        std::weak_ptr<TestObserverBridge> weak_func_bridge = *func_bridge;
        TestObserver func = [weak_func_bridge, ref = JNIGlobalRef(jenv, j_func_bridge)](const int &data) -> void {
            std::shared_ptr<TestObserverBridge> func_bridge_ptr = weak_func_bridge.lock();
            if (func_bridge_ptr) {
                return func_bridge_ptr->onCall(data);
            } else if (std::is_same_v<ReturnType, void>) {
                return;
            } else {
                return ReturnType();
            }
        };
        return func;
    }

    static std::shared_ptr<TestObserver> obtainOriginal(std::shared_ptr<TestObserverBridge> *func_bridge) {
        if (!func_bridge || !*func_bridge) return nullptr;
        if (auto func_ptr = (*func_bridge)->m_func) {
            return func_ptr;
        }
        std::lock_guard<std::mutex> lock((*func_bridge)->m_mutex);
        if (auto func_ptr = (*func_bridge)->m_func) {
            return func_ptr;
        }
        using ReturnType = typename TestObserver::result_type;
        std::weak_ptr<TestObserverBridge> weak_func_bridge = *func_bridge;
        std::shared_ptr<TestObserver> func_ptr = std::make_shared<TestObserver>([weak_func_bridge](const int &data) -> void {
            std::shared_ptr<TestObserverBridge> func_bridge_ptr = weak_func_bridge.lock();
            if (func_bridge_ptr) {
                return func_bridge_ptr->onCall(data);
            } else if (std::is_same_v<ReturnType, void>) {
                return;
            } else {
                return ReturnType();
            }
        });

        (*func_bridge)->m_func = func_ptr;

        return func_ptr;
    }

private:
    mutable std::mutex m_mutex;
    std::shared_ptr<TestObserver> m_func;
};



struct SWIG_null_deleter {
  void operator() (void const *) const {
  }
};
#define SWIG_NO_NULL_DELETER_0 , SWIG_null_deleter()
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN



class TestObserverBridge4DI : public TestObserverBridge {

public:
    explicit TestObserverBridge4DI(TestObserver function) : m_original(std::move(function)) {}

    void onCall(const int &data) override {
        if (m_original) {
            return m_original(data);
        } else {
            JNIEnv* env;
            JNIContext context(env);
            SWIG_JavaThrowException(env, SWIG_JavaNullPointerException, "TestObserverBridge##4DI m_original is null");
            return m_original(data);
        }
    }

private:
    TestObserver m_original;
};

class SharedPtrTestObserverBridge4DI : public TestObserverBridge {

public:
    explicit SharedPtrTestObserverBridge4DI(const std::shared_ptr<TestObserver>& function) : m_original(function) {}

    void onCall(const int &data) override {
        if (m_original) {
            return m_original->operator()(data);
        } else {
            JNIEnv* env;
            JNIContext context(env);
            SWIG_JavaThrowException(env, SWIG_JavaNullPointerException, "SharedPtr##TestObserverBridge##4DI m_original is null");
            return m_original->operator()(data);
        }
    }

    int calculateHash() override {
        return static_cast<int>(std::hash<const TestObserver*>{}(this->m_original.get()));
    }

    bool isEquals(const TestObserverBridge& other) override {
        if (this == &other) {
            return true;
        }
        const auto* other_ptr = dynamic_cast<const SharedPtrTestObserverBridge4DI*>(&other);
        if(other_ptr == nullptr) {
            return false;
        }
        return this->m_original.get() == other_ptr->m_original.get();
    }

private:
    std::shared_ptr<TestObserver> m_original;
};



class TestObserver2Bridge {

public:
    TestObserver2Bridge(): m_func(nullptr) {}
    virtual ~TestObserver2Bridge() = default;

    virtual void onCall(const TestObserver2Data &data) = 0;

    virtual int calculateHash() {
        return static_cast<int>(std::hash<const TestObserver2Bridge*>{}(this));
    }

    virtual bool isEquals(const TestObserver2Bridge& other) {
        return this == &other;
    }

    static TestObserver2 obtainOriginal(JNIEnv *jenv, std::shared_ptr<TestObserver2Bridge> *func_bridge, jobject j_func_bridge){
        using ReturnType = typename TestObserver2::result_type;
        std::weak_ptr<TestObserver2Bridge> weak_func_bridge = *func_bridge;
        TestObserver2 func = [weak_func_bridge, ref = JNIGlobalRef(jenv, j_func_bridge)](const TestObserver2Data &data) -> void {
            std::shared_ptr<TestObserver2Bridge> func_bridge_ptr = weak_func_bridge.lock();
            if (func_bridge_ptr) {
                return func_bridge_ptr->onCall(data);
            } else if (std::is_same_v<ReturnType, void>) {
                return;
            } else {
                return ReturnType();
            }
        };
        return func;
    }

    static std::shared_ptr<TestObserver2> obtainOriginal(std::shared_ptr<TestObserver2Bridge> *func_bridge) {
        if (!func_bridge || !*func_bridge) return nullptr;
        if (auto func_ptr = (*func_bridge)->m_func) {
            return func_ptr;
        }
        std::lock_guard<std::mutex> lock((*func_bridge)->m_mutex);
        if (auto func_ptr = (*func_bridge)->m_func) {
            return func_ptr;
        }
        using ReturnType = typename TestObserver2::result_type;
        std::weak_ptr<TestObserver2Bridge> weak_func_bridge = *func_bridge;
        std::shared_ptr<TestObserver2> func_ptr = std::make_shared<TestObserver2>([weak_func_bridge](const TestObserver2Data &data) -> void {
            std::shared_ptr<TestObserver2Bridge> func_bridge_ptr = weak_func_bridge.lock();
            if (func_bridge_ptr) {
                return func_bridge_ptr->onCall(data);
            } else if (std::is_same_v<ReturnType, void>) {
                return;
            } else {
                return ReturnType();
            }
        });

        (*func_bridge)->m_func = func_ptr;

        return func_ptr;
    }

private:
    mutable std::mutex m_mutex;
    std::shared_ptr<TestObserver2> m_func;
};




class TestObserver2Bridge4DI : public TestObserver2Bridge {

public:
    explicit TestObserver2Bridge4DI(TestObserver2 function) : m_original(std::move(function)) {}

    void onCall(const TestObserver2Data &data) override {
        if (m_original) {
            return m_original(data);
        } else {
            JNIEnv* env;
            JNIContext context(env);
            SWIG_JavaThrowException(env, SWIG_JavaNullPointerException, "TestObserver2Bridge##4DI m_original is null");
            return m_original(data);
        }
    }

private:
    TestObserver2 m_original;
};

class SharedPtrTestObserver2Bridge4DI : public TestObserver2Bridge {

public:
    explicit SharedPtrTestObserver2Bridge4DI(const std::shared_ptr<TestObserver2>& function) : m_original(function) {}

    void onCall(const TestObserver2Data &data) override {
        if (m_original) {
            return m_original->operator()(data);
        } else {
            JNIEnv* env;
            JNIContext context(env);
            SWIG_JavaThrowException(env, SWIG_JavaNullPointerException, "SharedPtr##TestObserver2Bridge##4DI m_original is null");
            return m_original->operator()(data);
        }
    }

    int calculateHash() override {
        return static_cast<int>(std::hash<const TestObserver2*>{}(this->m_original.get()));
    }

    bool isEquals(const TestObserver2Bridge& other) override {
        if (this == &other) {
            return true;
        }
        const auto* other_ptr = dynamic_cast<const SharedPtrTestObserver2Bridge4DI*>(&other);
        if(other_ptr == nullptr) {
            return false;
        }
        return this->m_original.get() == other_ptr->m_original.get();
    }

private:
    std::shared_ptr<TestObserver2> m_original;
};



/* Check for overflow converting to Java int (always signed 32-bit) from (unsigned variable-bit) size_t */
SWIGINTERN jint SWIG_JavaIntFromSize_t(size_t size) {
  static const jint JINT_MAX = 0x7FFFFFFF;
  return (size > (size_t)JINT_MAX) ? -1 : (jint)size;
}


SWIGINTERN jint SWIG_VectorSize(size_t size) {
  jint sz = SWIG_JavaIntFromSize_t(size);
  if (sz == -1)
    throw std::out_of_range("vector size is too large to fit into a Java int");
  return sz;
}

SWIGINTERN std::vector< TestObserver2 > *new_std_vector_Sl_TestObserver2_Sg___SWIG_2(jint count,TestObserver2 const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< TestObserver2 >(static_cast<std::vector< TestObserver2 >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_TestObserver2_Sg__doCapacity(std::vector< TestObserver2 > *self){
        return SWIG_VectorSize(self->capacity());
      }
SWIGINTERN void std_vector_Sl_TestObserver2_Sg__doReserve(std::vector< TestObserver2 > *self,jint n){
        if (n < 0)
          throw std::out_of_range("vector reserve size must be positive");
        self->reserve(n);
      }
SWIGINTERN jint std_vector_Sl_TestObserver2_Sg__doSize(std::vector< TestObserver2 > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_TestObserver2_Sg__doAdd__SWIG_0(std::vector< TestObserver2 > *self,std::vector< TestObserver2 >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_TestObserver2_Sg__doAdd__SWIG_1(std::vector< TestObserver2 > *self,jint index,std::vector< TestObserver2 >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< TestObserver2 >::value_type std_vector_Sl_TestObserver2_Sg__doRemove(std::vector< TestObserver2 > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          TestObserver2 const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< TestObserver2 >::value_type const &std_vector_Sl_TestObserver2_Sg__doGet(std::vector< TestObserver2 > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< TestObserver2 >::value_type std_vector_Sl_TestObserver2_Sg__doSet(std::vector< TestObserver2 > *self,jint index,std::vector< TestObserver2 >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          TestObserver2 const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_TestObserver2_Sg__doRemoveRange(std::vector< TestObserver2 > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< TestStruct2 > *new_std_vector_Sl_TestStruct2_Sg___SWIG_2(jint count,TestStruct2 const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< TestStruct2 >(static_cast<std::vector< TestStruct2 >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_TestStruct2_Sg__doCapacity(std::vector< TestStruct2 > *self){
        return SWIG_VectorSize(self->capacity());
      }
SWIGINTERN void std_vector_Sl_TestStruct2_Sg__doReserve(std::vector< TestStruct2 > *self,jint n){
        if (n < 0)
          throw std::out_of_range("vector reserve size must be positive");
        self->reserve(n);
      }
SWIGINTERN jint std_vector_Sl_TestStruct2_Sg__doSize(std::vector< TestStruct2 > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_TestStruct2_Sg__doAdd__SWIG_0(std::vector< TestStruct2 > *self,std::vector< TestStruct2 >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_TestStruct2_Sg__doAdd__SWIG_1(std::vector< TestStruct2 > *self,jint index,std::vector< TestStruct2 >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< TestStruct2 >::value_type std_vector_Sl_TestStruct2_Sg__doRemove(std::vector< TestStruct2 > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          TestStruct2 const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< TestStruct2 >::value_type const &std_vector_Sl_TestStruct2_Sg__doGet(std::vector< TestStruct2 > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< TestStruct2 >::value_type std_vector_Sl_TestStruct2_Sg__doSet(std::vector< TestStruct2 > *self,jint index,std::vector< TestStruct2 >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          TestStruct2 const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_TestStruct2_Sg__doRemoveRange(std::vector< TestStruct2 > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< TestStruct > *new_std_vector_Sl_TestStruct_Sg___SWIG_2(jint count,TestStruct const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< TestStruct >(static_cast<std::vector< TestStruct >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_TestStruct_Sg__doCapacity(std::vector< TestStruct > *self){
        return SWIG_VectorSize(self->capacity());
      }
SWIGINTERN void std_vector_Sl_TestStruct_Sg__doReserve(std::vector< TestStruct > *self,jint n){
        if (n < 0)
          throw std::out_of_range("vector reserve size must be positive");
        self->reserve(n);
      }
SWIGINTERN jint std_vector_Sl_TestStruct_Sg__doSize(std::vector< TestStruct > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_TestStruct_Sg__doAdd__SWIG_0(std::vector< TestStruct > *self,std::vector< TestStruct >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_TestStruct_Sg__doAdd__SWIG_1(std::vector< TestStruct > *self,jint index,std::vector< TestStruct >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< TestStruct >::value_type std_vector_Sl_TestStruct_Sg__doRemove(std::vector< TestStruct > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          TestStruct const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< TestStruct >::value_type const &std_vector_Sl_TestStruct_Sg__doGet(std::vector< TestStruct > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< TestStruct >::value_type std_vector_Sl_TestStruct_Sg__doSet(std::vector< TestStruct > *self,jint index,std::vector< TestStruct >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          TestStruct const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_TestStruct_Sg__doRemoveRange(std::vector< TestStruct > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN int ITestObserver2_calculateHash(ITestObserver2 const *self){
    return static_cast<int>(std::hash<const ITestObserver2*>{}(self));
  }
SWIGINTERN bool ITestObserver2_isEquals(ITestObserver2 const *self,ITestObserver2 const &other){
    return self == &other;
  }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "observer_wrap.h"

SwigDirector_TestObserverBridge::SwigDirector_TestObserverBridge(JNIEnv *jenv) : TestObserverBridge(), Swig::Director(jenv) {
}

SwigDirector_TestObserverBridge::~SwigDirector_TestObserverBridge() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_TestObserverBridge::onCall(int const &data) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jdata = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method TestObserverBridge::onCall.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jdata = (jint)data;
    jenv->CallStaticVoidMethod(Swig::jclass_ObserverModuleJNI, Swig::director_method_ids[0], swigjobj, jdata);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in TestObserverBridge::onCall ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_TestObserverBridge::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static jclass baseclass = swig_new_global_ref(jenv, "com/hyh/jnitest/test/observer/TestObserverBridge");
  if (!baseclass) return;
  static SwigDirectorMethod methods[] = {
    SwigDirectorMethod(jenv, baseclass, "onCall", "(I)V")
  };
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].name, methods[i].desc);
        swig_override[i] = methods[i].methid && (methid != methods[i].methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_TestObserver2Bridge::SwigDirector_TestObserver2Bridge(JNIEnv *jenv) : TestObserver2Bridge(), Swig::Director(jenv) {
}

SwigDirector_TestObserver2Bridge::~SwigDirector_TestObserver2Bridge() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_TestObserver2Bridge::onCall(TestObserver2Data const &data) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jdata = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method TestObserver2Bridge::onCall.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(TestObserver2Data **)&jdata = (TestObserver2Data *) &data; 
    jenv->CallStaticVoidMethod(Swig::jclass_ObserverModuleJNI, Swig::director_method_ids[1], swigjobj, jdata);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in TestObserver2Bridge::onCall ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_TestObserver2Bridge::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static jclass baseclass = swig_new_global_ref(jenv, "com/hyh/jnitest/test/observer/TestObserver2Bridge");
  if (!baseclass) return;
  static SwigDirectorMethod methods[] = {
    SwigDirectorMethod(jenv, baseclass, "onCall", "(Lcom/hyh/jnitest/test/observer/TestObserver2Data;)V")
  };
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].name, methods[i].desc);
        swig_override[i] = methods[i].methid && (methid != methods[i].methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_ITestObserver2Bridge::SwigDirector_ITestObserver2Bridge(JNIEnv *jenv) : ITestObserver2(), Swig::Director(jenv) {
}

SwigDirector_ITestObserver2Bridge::~SwigDirector_ITestObserver2Bridge() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_ITestObserver2Bridge::onCall(int const &data) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jdata = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ITestObserver2::onCall.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jdata = (jint)data;
    jenv->CallStaticVoidMethod(Swig::jclass_ObserverModuleJNI, Swig::director_method_ids[2], swigjobj, jdata);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ITestObserver2::onCall ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ITestObserver2Bridge::onCall2(TestStructVariant const &variant) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jvariant = 0 ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ITestObserver2::onCall2.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(TestStructVariantBridge**)&jvariant = new TestStructVariantBridge(variant);
    
    jenv->CallStaticVoidMethod(Swig::jclass_ObserverModuleJNI, Swig::director_method_ids[3], swigjobj, jvariant);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ITestObserver2::onCall2 ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ITestObserver2Bridge::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static jclass baseclass = swig_new_global_ref(jenv, "com/hyh/jnitest/test/observer/ITestObserver2Bridge");
  if (!baseclass) return;
  static SwigDirectorMethod methods[] = {
    SwigDirectorMethod(jenv, baseclass, "onCall", "(I)V"),
    SwigDirectorMethod(jenv, baseclass, "onCall2", "(Lcom/hyh/jnitest/test/observer/TestStructVariantBridge;)V")
  };
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 2; ++i) {
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].name, methods[i].desc);
        swig_override[i] = methods[i].methid && (methid != methods[i].methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_IObserverManager::SwigDirector_IObserverManager(JNIEnv *jenv) : IObserverManager(), Swig::Director(jenv) {
}

SwigDirector_IObserverManager::~SwigDirector_IObserverManager() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_IObserverManager::addObserver(std::shared_ptr< TestObserver > observer) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jobserver  ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method IObserverManager::addObserver.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    TestObserverBridge *function_bridge1 = new SharedPtrTestObserverBridge4DI(observer);
    *(std::shared_ptr<TestObserverBridge> **) &jobserver = new std::shared_ptr<TestObserverBridge>(function_bridge1);
    
    jenv->CallStaticVoidMethod(Swig::jclass_ObserverModuleJNI, Swig::director_method_ids[4], swigjobj, jobserver);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in IObserverManager::addObserver ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_IObserverManager::removeObserver(std::shared_ptr< TestObserver > observer) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jobserver  ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method IObserverManager::removeObserver.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    TestObserverBridge *function_bridge1 = new SharedPtrTestObserverBridge4DI(observer);
    *(std::shared_ptr<TestObserverBridge> **) &jobserver = new std::shared_ptr<TestObserverBridge>(function_bridge1);
    
    jenv->CallStaticVoidMethod(Swig::jclass_ObserverModuleJNI, Swig::director_method_ids[5], swigjobj, jobserver);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in IObserverManager::removeObserver ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_IObserverManager::addObserver2(std::shared_ptr< ITestObserver2 > observer) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jobserver  ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method IObserverManager::addObserver2.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jobserver = 0;
    if (observer) {
      auto *observer_ptr = dynamic_cast<Swig::Director*>((&observer)->get());
      if (observer_ptr) {
        jobject observer_jobj = observer_ptr->swig_get_self(jenv);
        if (observer_jobj) {
          *((SwigDirectorWrapper **)&jobserver) = new SwigDirectorWrapper(jenv, observer_jobj);
        } else {
          *((SwigDirectorWrapper **)&jobserver) = new SwigDirectorWrapper(new std::shared_ptr<ITestObserver2>(observer));
        }
      } else {
        *((SwigDirectorWrapper **)&jobserver) = new SwigDirectorWrapper(new std::shared_ptr<ITestObserver2>(observer));
      }
    }
    
    jenv->CallStaticVoidMethod(Swig::jclass_ObserverModuleJNI, Swig::director_method_ids[6], swigjobj, jobserver);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in IObserverManager::addObserver2 ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_IObserverManager::removeObserver2(std::shared_ptr< ITestObserver2 > observer) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jobserver  ;
  
  if (!swig_override[3]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method IObserverManager::removeObserver2.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jobserver = 0;
    if (observer) {
      auto *observer_ptr = dynamic_cast<Swig::Director*>((&observer)->get());
      if (observer_ptr) {
        jobject observer_jobj = observer_ptr->swig_get_self(jenv);
        if (observer_jobj) {
          *((SwigDirectorWrapper **)&jobserver) = new SwigDirectorWrapper(jenv, observer_jobj);
        } else {
          *((SwigDirectorWrapper **)&jobserver) = new SwigDirectorWrapper(new std::shared_ptr<ITestObserver2>(observer));
        }
      } else {
        *((SwigDirectorWrapper **)&jobserver) = new SwigDirectorWrapper(new std::shared_ptr<ITestObserver2>(observer));
      }
    }
    
    jenv->CallStaticVoidMethod(Swig::jclass_ObserverModuleJNI, Swig::director_method_ids[7], swigjobj, jobserver);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in IObserverManager::removeObserver2 ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

int64_t SwigDirector_IObserverManager::add1(int64_t a,int64_t b) {
  int64_t c_result = SwigValueInit< int64_t >() ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong ja  ;
  jlong jb  ;
  
  if (!swig_override[4]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method IObserverManager::add1.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ja = a;
    
    
    jb = b;
    
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_ObserverModuleJNI, Swig::director_method_ids[8], swigjobj, ja, jb);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    
    c_result = jresult;
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in IObserverManager::add1 ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

long long SwigDirector_IObserverManager::add11(long long a,long long b) {
  long long c_result = SwigValueInit< long long >() ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong ja  ;
  jlong jb  ;
  
  if (!swig_override[5]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method IObserverManager::add11.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ja = (jlong) a;
    jb = (jlong) b;
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_ObserverModuleJNI, Swig::director_method_ids[9], swigjobj, ja, jb);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    c_result = (long long)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in IObserverManager::add11 ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

int64_t SwigDirector_IObserverManager::add2(int64_t const &a,int64_t const &b) {
  int64_t c_result = SwigValueInit< int64_t >() ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong ja = 0 ;
  jlong jb = 0 ;
  
  if (!swig_override[6]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method IObserverManager::add2.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ja = a;
    
    
    jb = b;
    
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_ObserverModuleJNI, Swig::director_method_ids[10], swigjobj, ja, jb);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    
    c_result = jresult;
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in IObserverManager::add2 ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

long long SwigDirector_IObserverManager::add22(long long const &a,long long const &b) {
  long long c_result = SwigValueInit< long long >() ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong ja = 0 ;
  jlong jb = 0 ;
  
  if (!swig_override[7]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method IObserverManager::add22.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ja = (jlong)a;
    jb = (jlong)b;
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_ObserverModuleJNI, Swig::director_method_ids[11], swigjobj, ja, jb);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    c_result = (long long)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in IObserverManager::add22 ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::optional< int64_t > SwigDirector_IObserverManager::add3(std::optional< int64_t > a,std::optional< int64_t > b) {
  std::optional< int64_t > c_result = SwigValueInit< std::optional< int64_t > >() ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong ja  ;
  jlong jb  ;
  
  if (!swig_override[8]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method IObserverManager::add3.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    if ((&a)->has_value()) {
      ja = (&a)->value();
    } else {
      ja = 0;
    }
    
    
    if ((&b)->has_value()) {
      jb = (&b)->value();
    } else {
      jb = 0;
    }
    
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_ObserverModuleJNI, Swig::director_method_ids[12], swigjobj, ja, jb);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    
    c_result = std::make_optional<int64_t>(jresult);
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in IObserverManager::add3 ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::optional< int64_t > SwigDirector_IObserverManager::add33(std::optional< int64_t > const &a,std::optional< int64_t > const &b) {
  std::optional< int64_t > c_result = SwigValueInit< std::optional< int64_t > >() ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong ja = 0 ;
  jlong jb = 0 ;
  
  if (!swig_override[9]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method IObserverManager::add33.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    if ((&a)->has_value()) {
      ja = (&a)->value();
    } else {
      ja = 0;
    }
    
    
    if ((&b)->has_value()) {
      jb = (&b)->value();
    } else {
      jb = 0;
    }
    
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_ObserverModuleJNI, Swig::director_method_ids[13], swigjobj, ja, jb);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    
    c_result = std::make_optional<int64_t>(jresult);
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in IObserverManager::add33 ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_IObserverManager::byteTest1(std::vector< uint8_t > byteArray) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jbyteArray jbyteArray  ;
  
  if (!swig_override[10]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method IObserverManager::byteTest1.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    auto size = static_cast<jsize>((&byteArray)->size());
    jbyteArray = jenv->NewByteArray(size);
    jenv->SetByteArrayRegion(jbyteArray, 0, size, (jbyte*)(&byteArray)->data());
    
    jenv->CallStaticVoidMethod(Swig::jclass_ObserverModuleJNI, Swig::director_method_ids[14], swigjobj, jbyteArray);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in IObserverManager::byteTest1 ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_IObserverManager::byteTest2(std::vector< uint8_t > const &byteArray) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jbyteArray jbyteArray = 0 ;
  
  if (!swig_override[11]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method IObserverManager::byteTest2.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    auto size = static_cast<jsize>((&byteArray)->size());
    jbyteArray = jenv->NewByteArray(size);
    jenv->SetByteArrayRegion(jbyteArray, 0, size, (jbyte*)(&byteArray)->data());
    
    jenv->CallStaticVoidMethod(Swig::jclass_ObserverModuleJNI, Swig::director_method_ids[15], swigjobj, jbyteArray);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in IObserverManager::byteTest2 ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::vector< uint8_t > SwigDirector_IObserverManager::byteTest3() {
  SwigValueWrapper< std::vector< uint8_t > > c_result ;
  jbyteArray jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[12]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method IObserverManager::byteTest3.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jbyteArray) jenv->CallStaticObjectMethod(Swig::jclass_ObserverModuleJNI, Swig::director_method_ids[16], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    
    std::vector<uint8_t> c_result_temp;
    jsize len = jenv->GetArrayLength(jresult);
    c_result_temp.resize(len);
    jenv->GetByteArrayRegion(jresult, 0, len, (jbyte*)c_result_temp.data());
    c_result = c_result_temp;
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in IObserverManager::byteTest3 ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_IObserverManager::setTestObserver2List(std::vector< TestObserver2 > arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[13]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method IObserverManager::setTestObserver2List.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((std::vector< TestObserver2 > **)&jarg0) = new std::vector< TestObserver2 >(SWIG_STD_MOVE(arg0)); 
    jenv->CallStaticVoidMethod(Swig::jclass_ObserverModuleJNI, Swig::director_method_ids[17], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in IObserverManager::setTestObserver2List ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

TestEnum1 SwigDirector_IObserverManager::optionalEnum33() {
  TestEnum1 c_result = SwigValueInit< TestEnum1 >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[14]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method IObserverManager::optionalEnum33.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_ObserverModuleJNI, Swig::director_method_ids[18], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    c_result = (TestEnum1)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in IObserverManager::optionalEnum33 ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::shared_ptr< ITestObserver2 > SwigDirector_IObserverManager::getObserver2() {
  std::shared_ptr< ITestObserver2 > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[15]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method IObserverManager::getObserver2.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_ObserverModuleJNI, Swig::director_method_ids[19], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    
    if (jresult) {
      std::shared_ptr<ITestObserver2> *smartarg = *(std::shared_ptr<ITestObserver2> **)&jresult;
      auto *jresult_ptr = dynamic_cast<Swig::Director*>(smartarg->get());
      if (jresult_ptr) {
        jobject jobj = jresult_ptr->swig_get_self(jenv);
        // 创建全局引用
        jobject globalRef = jenv->NewGlobalRef(jobj);
        c_result = std::shared_ptr<ITestObserver2>(smartarg->get(), [globalRef](ITestObserver2* ptr) {
          JNIEnv *env = nullptr;
            JNIContext context(env);
            // 删除全局引用
            env->DeleteGlobalRef(globalRef);
          });
      } else {
        c_result = *smartarg;
      }
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in IObserverManager::getObserver2 ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::optional< double > SwigDirector_IObserverManager::test_double_1(std::optional< double > d) {
  std::optional< double > c_result = SwigValueInit< std::optional< double > >() ;
  jdouble jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jdouble jd  ;
  
  if (!swig_override[16]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method IObserverManager::test_double_1.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    if ((&d)->has_value()) {
      jd = (&d)->value();
    } else {
      jd = std::numeric_limits<double>::quiet_NaN();
    }
    
    jresult = (jdouble) jenv->CallStaticDoubleMethod(Swig::jclass_ObserverModuleJNI, Swig::director_method_ids[20], swigjobj, jd);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    
    if (std::isnan(jresult)) {
      c_result = std::nullopt;
    } else {
      c_result = std::make_optional<double>(jresult);
    }
    
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in IObserverManager::test_double_1 ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::optional< double > &SwigDirector_IObserverManager::test_double_2(std::optional< double > const &d) {
  static std::optional< double > result_default ;
  std::optional< double > * c_result ;
  jdouble jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jdouble jd = 0 ;
  
  result_default = SwigValueInit< std::optional< double > >();
  c_result = &result_default;
  if (!swig_override[17]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method IObserverManager::test_double_2.");
    return *c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    if ((&d)->has_value()) {
      jd = (&d)->value();
    } else {
      jd = std::numeric_limits<double>::quiet_NaN();
    }
    
    jresult = (jdouble) jenv->CallStaticDoubleMethod(Swig::jclass_ObserverModuleJNI, Swig::director_method_ids[21], swigjobj, jd);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    
#error "typemaps for std::optional< double > & not available"
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in IObserverManager::test_double_2 ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return *c_result;
}

void SwigDirector_IObserverManager::test_bool_1(std::optional< bool > d) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jbyte jd  ;
  
  if (!swig_override[18]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method IObserverManager::test_bool_1.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    if ((&d)->has_value()) {
      jd = (&d)->value() ? 1 : 0;
    } else {
      jd = 2;
    }
    
    jenv->CallStaticVoidMethod(Swig::jclass_ObserverModuleJNI, Swig::director_method_ids[22], swigjobj, jd);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in IObserverManager::test_bool_1 ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::optional< bool > SwigDirector_IObserverManager::test_bool_2() {
  std::optional< bool > c_result = SwigValueInit< std::optional< bool > >() ;
  jbyte jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[19]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method IObserverManager::test_bool_2.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jbyte) jenv->CallStaticByteMethod(Swig::jclass_ObserverModuleJNI, Swig::director_method_ids[23], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    
    switch (jresult) {
      0: {
        c_result = std::make_optional<bool>(false);
        break;
      }
      1: {
        c_result = std::make_optional<bool>(true);
        break;
      }
      default: {
        c_result = std::nullopt;
        break;
      }
    }
    
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in IObserverManager::test_bool_2 ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_IObserverManager::test_bool_3(std::optional< bool > const &d) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jbyte jd = 0 ;
  
  if (!swig_override[20]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method IObserverManager::test_bool_3.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    if ((&d)->has_value()) {
      jd = (&d)->value() ? 1 : 0;
    } else {
      jd = 2;
    }
    
    jenv->CallStaticVoidMethod(Swig::jclass_ObserverModuleJNI, Swig::director_method_ids[24], swigjobj, jd);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in IObserverManager::test_bool_3 ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::optional< bool > &SwigDirector_IObserverManager::test_bool_4() {
  static std::optional< bool > result_default ;
  std::optional< bool > * c_result ;
  jbyte jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  result_default = SwigValueInit< std::optional< bool > >();
  c_result = &result_default;
  if (!swig_override[21]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method IObserverManager::test_bool_4.");
    return *c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jbyte) jenv->CallStaticByteMethod(Swig::jclass_ObserverModuleJNI, Swig::director_method_ids[25], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    
#error "typemaps for std::optional< bool > & not available"
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in IObserverManager::test_bool_4 ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return *c_result;
}

void SwigDirector_IObserverManager::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static jclass baseclass = swig_new_global_ref(jenv, "com/hyh/jnitest/test/observer/IObserverManager");
  if (!baseclass) return;
  static SwigDirectorMethod methods[] = {
    SwigDirectorMethod(jenv, baseclass, "addObserver", "(Lcom/hyh/jnitest/test/observer/TestObserverBridge;)V"),
    SwigDirectorMethod(jenv, baseclass, "removeObserver", "(Lcom/hyh/jnitest/test/observer/TestObserverBridge;)V"),
    SwigDirectorMethod(jenv, baseclass, "addObserver2", "(Lcom/hyh/jnitest/test/observer/ITestObserver2Bridge;)V"),
    SwigDirectorMethod(jenv, baseclass, "removeObserver2", "(Lcom/hyh/jnitest/test/observer/ITestObserver2Bridge;)V"),
    SwigDirectorMethod(jenv, baseclass, "add1", "(JJ)J"),
    SwigDirectorMethod(jenv, baseclass, "add11", "(JJ)J"),
    SwigDirectorMethod(jenv, baseclass, "add2", "(JJ)J"),
    SwigDirectorMethod(jenv, baseclass, "add22", "(JJ)J"),
    SwigDirectorMethod(jenv, baseclass, "add3", "(JJ)J"),
    SwigDirectorMethod(jenv, baseclass, "add33", "(JJ)J"),
    SwigDirectorMethod(jenv, baseclass, "byteTest1", "([B)V"),
    SwigDirectorMethod(jenv, baseclass, "byteTest2", "([B)V"),
    SwigDirectorMethod(jenv, baseclass, "byteTest3", "()[B"),
    SwigDirectorMethod(jenv, baseclass, "setTestObserver2List", "(Lcom/hyh/jnitest/test/observer/TestObserver2Vector;)V"),
    SwigDirectorMethod(jenv, baseclass, "optionalEnum33", "()Lcom/hyh/jnitest/test/observer/TestEnum1;"),
    SwigDirectorMethod(jenv, baseclass, "getObserver2", "()Lcom/hyh/jnitest/test/observer/ITestObserver2Bridge;"),
    SwigDirectorMethod(jenv, baseclass, "test_double_1", "(D)D"),
    SwigDirectorMethod(jenv, baseclass, "test_double_2", "(D)D"),
    SwigDirectorMethod(jenv, baseclass, "test_bool_1", "(B)V"),
    SwigDirectorMethod(jenv, baseclass, "test_bool_2", "()B"),
    SwigDirectorMethod(jenv, baseclass, "test_bool_3", "(B)V"),
    SwigDirectorMethod(jenv, baseclass, "test_bool_4", "()B")
  };
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 22; ++i) {
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].name, methods[i].desc);
        swig_override[i] = methods[i].methid && (methid != methods[i].methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_new_1TestStructVariantBridge_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TestStructVariantBridge *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TestStructVariantBridge *)new TestStructVariantBridge();
  *(TestStructVariantBridge **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_new_1TestStructVariantBridge_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TestStruct *arg1 = 0 ;
  TestStructVariantBridge *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TestStruct **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TestStruct const & is null");
    return 0;
  } 
  result = (TestStructVariantBridge *)new TestStructVariantBridge((TestStruct const &)*arg1);
  *(TestStructVariantBridge **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestStructVariantBridge_1IsTestStruct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  TestStructVariantBridge *arg1 = (TestStructVariantBridge *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TestStructVariantBridge **)&jarg1; 
  result = (bool)(arg1)->IsTestStruct();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestStructVariantBridge_1GetTestStruct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TestStructVariantBridge *arg1 = (TestStructVariantBridge *) 0 ;
  TestStruct result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TestStructVariantBridge **)&jarg1; 
  result = (arg1)->GetTestStruct();
  *(TestStruct **)&jresult = new TestStruct(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_new_1TestStructVariantBridge_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TestStruct2 *arg1 = 0 ;
  TestStructVariantBridge *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TestStruct2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TestStruct2 const & is null");
    return 0;
  } 
  result = (TestStructVariantBridge *)new TestStructVariantBridge((TestStruct2 const &)*arg1);
  *(TestStructVariantBridge **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestStructVariantBridge_1IsTestStruct2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  TestStructVariantBridge *arg1 = (TestStructVariantBridge *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TestStructVariantBridge **)&jarg1; 
  result = (bool)(arg1)->IsTestStruct2();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestStructVariantBridge_1GetTestStruct2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TestStructVariantBridge *arg1 = (TestStructVariantBridge *) 0 ;
  TestStruct2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TestStructVariantBridge **)&jarg1; 
  result = (arg1)->GetTestStruct2();
  *(TestStruct2 **)&jresult = new TestStruct2(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_delete_1TestStructVariantBridge(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TestStructVariantBridge *arg1 = (TestStructVariantBridge *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TestStructVariantBridge **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_new_1TestObserverBridge(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TestObserverBridge *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TestObserverBridge *)new SwigDirector_TestObserverBridge(jenv);
  
  *(std::shared_ptr<  TestObserverBridge > **)&jresult = result ? new std::shared_ptr<  TestObserverBridge >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_delete_1TestObserverBridge(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TestObserverBridge *arg1 = (TestObserverBridge *) 0 ;
  std::shared_ptr< TestObserverBridge > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  TestObserverBridge > **)&jarg1;
  arg1 = (TestObserverBridge *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestObserverBridge_1onCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TestObserverBridge *arg1 = (TestObserverBridge *) 0 ;
  int *arg2 = 0 ;
  std::shared_ptr< TestObserverBridge > *smartarg1 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  TestObserverBridge > **)&jarg1;
  arg1 = (TestObserverBridge *)(smartarg1 ? smartarg1->get() : 0); 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->onCall((int const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestObserverBridge_1calculateHash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TestObserverBridge *arg1 = (TestObserverBridge *) 0 ;
  std::shared_ptr< TestObserverBridge > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  TestObserverBridge > **)&jarg1;
  arg1 = (TestObserverBridge *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->calculateHash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestObserverBridge_1isEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  TestObserverBridge *arg1 = (TestObserverBridge *) 0 ;
  TestObserverBridge *arg2 = 0 ;
  std::shared_ptr< TestObserverBridge > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  TestObserverBridge > **)&jarg1;
  arg1 = (TestObserverBridge *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (TestObserverBridge *)((*(std::shared_ptr< const TestObserverBridge > **)&jarg2) ? (*(std::shared_ptr< const TestObserverBridge > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TestObserverBridge const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->isEquals((TestObserverBridge const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestObserverBridge_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< TestObserverBridge > *obj = *((std::shared_ptr< TestObserverBridge > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_TestObserverBridge *director = static_cast<SwigDirector_TestObserverBridge *>(obj->operator->());
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestObserverBridge_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  std::shared_ptr< TestObserverBridge > *obj = *((std::shared_ptr< TestObserverBridge > **)&objarg);
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_TestObserverBridge *director = dynamic_cast<SwigDirector_TestObserverBridge *>(obj->operator->());
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_new_1TestObserver2Bridge(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TestObserver2Bridge *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TestObserver2Bridge *)new SwigDirector_TestObserver2Bridge(jenv);
  
  *(std::shared_ptr<  TestObserver2Bridge > **)&jresult = result ? new std::shared_ptr<  TestObserver2Bridge >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_delete_1TestObserver2Bridge(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TestObserver2Bridge *arg1 = (TestObserver2Bridge *) 0 ;
  std::shared_ptr< TestObserver2Bridge > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  TestObserver2Bridge > **)&jarg1;
  arg1 = (TestObserver2Bridge *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestObserver2Bridge_1onCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TestObserver2Bridge *arg1 = (TestObserver2Bridge *) 0 ;
  TestObserver2Data *arg2 = 0 ;
  std::shared_ptr< TestObserver2Bridge > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  TestObserver2Bridge > **)&jarg1;
  arg1 = (TestObserver2Bridge *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(TestObserver2Data **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TestObserver2Data const & is null");
    return ;
  } 
  (arg1)->onCall((TestObserver2Data const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestObserver2Bridge_1calculateHash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TestObserver2Bridge *arg1 = (TestObserver2Bridge *) 0 ;
  std::shared_ptr< TestObserver2Bridge > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  TestObserver2Bridge > **)&jarg1;
  arg1 = (TestObserver2Bridge *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->calculateHash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestObserver2Bridge_1isEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  TestObserver2Bridge *arg1 = (TestObserver2Bridge *) 0 ;
  TestObserver2Bridge *arg2 = 0 ;
  std::shared_ptr< TestObserver2Bridge > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  TestObserver2Bridge > **)&jarg1;
  arg1 = (TestObserver2Bridge *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (TestObserver2Bridge *)((*(std::shared_ptr< const TestObserver2Bridge > **)&jarg2) ? (*(std::shared_ptr< const TestObserver2Bridge > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TestObserver2Bridge const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->isEquals((TestObserver2Bridge const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestObserver2Bridge_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< TestObserver2Bridge > *obj = *((std::shared_ptr< TestObserver2Bridge > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_TestObserver2Bridge *director = static_cast<SwigDirector_TestObserver2Bridge *>(obj->operator->());
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestObserver2Bridge_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  std::shared_ptr< TestObserver2Bridge > *obj = *((std::shared_ptr< TestObserver2Bridge > **)&objarg);
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_TestObserver2Bridge *director = dynamic_cast<SwigDirector_TestObserver2Bridge *>(obj->operator->());
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_new_1TestObserver2Vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< TestObserver2 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< TestObserver2 > *)new std::vector< TestObserver2 >();
  *(std::vector< TestObserver2 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_new_1TestObserver2Vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< TestObserver2 > *arg1 = 0 ;
  std::vector< TestObserver2 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< TestObserver2 > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< TestObserver2 > const & is null");
    return 0;
  } 
  result = (std::vector< TestObserver2 > *)new std::vector< TestObserver2 >((std::vector< TestObserver2 > const &)*arg1);
  *(std::vector< TestObserver2 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestObserver2Vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< TestObserver2 > *arg1 = (std::vector< TestObserver2 > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< TestObserver2 > **)&jarg1; 
  result = (bool)((std::vector< TestObserver2 > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestObserver2Vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< TestObserver2 > *arg1 = (std::vector< TestObserver2 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< TestObserver2 > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_new_1TestObserver2Vector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  TestObserver2 *arg2 = 0 ;
  std::vector< TestObserver2 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  
  std::shared_ptr<TestObserver2Bridge> *smartarg2 = *(std::shared_ptr<TestObserver2Bridge> **)&jarg2;
  auto original2 = TestObserver2Bridge::obtainOriginal(jenv, smartarg2, jarg2_);
  arg2 = &original2;
  
  try {
    result = (std::vector< TestObserver2 > *)new_std_vector_Sl_TestObserver2_Sg___SWIG_2(SWIG_STD_MOVE(arg1),(std::function< void (TestObserver2Data const &) > const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< TestObserver2 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestObserver2Vector_1doCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< TestObserver2 > *arg1 = (std::vector< TestObserver2 > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< TestObserver2 > **)&jarg1; 
  try {
    result = std_vector_Sl_TestObserver2_Sg__doCapacity(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestObserver2Vector_1doReserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< TestObserver2 > *arg1 = (std::vector< TestObserver2 > *) 0 ;
  jint arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< TestObserver2 > **)&jarg1; 
  arg2 = jarg2; 
  try {
    std_vector_Sl_TestObserver2_Sg__doReserve(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jint JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestObserver2Vector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< TestObserver2 > *arg1 = (std::vector< TestObserver2 > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< TestObserver2 > **)&jarg1; 
  try {
    result = std_vector_Sl_TestObserver2_Sg__doSize((std::vector< TestObserver2 > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestObserver2Vector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< TestObserver2 > *arg1 = (std::vector< TestObserver2 > *) 0 ;
  std::vector< TestObserver2 >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< TestObserver2 > **)&jarg1; 
  arg2 = *(std::vector< TestObserver2 >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< TestObserver2 >::value_type const & is null");
    return ;
  } 
  std_vector_Sl_TestObserver2_Sg__doAdd__SWIG_0(arg1,(std::vector< TestObserver2 >::value_type const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestObserver2Vector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< TestObserver2 > *arg1 = (std::vector< TestObserver2 > *) 0 ;
  jint arg2 ;
  std::vector< TestObserver2 >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< TestObserver2 > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< TestObserver2 >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< TestObserver2 >::value_type const & is null");
    return ;
  } 
  try {
    std_vector_Sl_TestObserver2_Sg__doAdd__SWIG_1(arg1,SWIG_STD_MOVE(arg2),(std::vector< TestObserver2 >::value_type const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestObserver2Vector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< TestObserver2 > *arg1 = (std::vector< TestObserver2 > *) 0 ;
  jint arg2 ;
  std::vector< TestObserver2 >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< TestObserver2 > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_TestObserver2_Sg__doRemove(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< TestObserver2 >::value_type **)&jresult = new std::vector< TestObserver2 >::value_type(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestObserver2Vector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< TestObserver2 > *arg1 = (std::vector< TestObserver2 > *) 0 ;
  jint arg2 ;
  std::vector< TestObserver2 >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< TestObserver2 > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< TestObserver2 >::value_type *) &std_vector_Sl_TestObserver2_Sg__doGet(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< TestObserver2 >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestObserver2Vector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< TestObserver2 > *arg1 = (std::vector< TestObserver2 > *) 0 ;
  jint arg2 ;
  std::vector< TestObserver2 >::value_type *arg3 = 0 ;
  std::vector< TestObserver2 >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< TestObserver2 > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< TestObserver2 >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< TestObserver2 >::value_type const & is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_TestObserver2_Sg__doSet(arg1,SWIG_STD_MOVE(arg2),(std::vector< TestObserver2 >::value_type const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< TestObserver2 >::value_type **)&jresult = new std::vector< TestObserver2 >::value_type(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestObserver2Vector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< TestObserver2 > *arg1 = (std::vector< TestObserver2 > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< TestObserver2 > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_TestObserver2_Sg__doRemoveRange(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_delete_1TestObserver2Vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< TestObserver2 > *arg1 = (std::vector< TestObserver2 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< TestObserver2 > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_new_1TestStruct2Vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< TestStruct2 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< TestStruct2 > *)new std::vector< TestStruct2 >();
  *(std::vector< TestStruct2 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_new_1TestStruct2Vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< TestStruct2 > *arg1 = 0 ;
  std::vector< TestStruct2 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< TestStruct2 > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< TestStruct2 > const & is null");
    return 0;
  } 
  result = (std::vector< TestStruct2 > *)new std::vector< TestStruct2 >((std::vector< TestStruct2 > const &)*arg1);
  *(std::vector< TestStruct2 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestStruct2Vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< TestStruct2 > *arg1 = (std::vector< TestStruct2 > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< TestStruct2 > **)&jarg1; 
  result = (bool)((std::vector< TestStruct2 > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestStruct2Vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< TestStruct2 > *arg1 = (std::vector< TestStruct2 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< TestStruct2 > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_new_1TestStruct2Vector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  TestStruct2 *arg2 = 0 ;
  std::vector< TestStruct2 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(TestStruct2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TestStruct2 const & is null");
    return 0;
  } 
  try {
    result = (std::vector< TestStruct2 > *)new_std_vector_Sl_TestStruct2_Sg___SWIG_2(SWIG_STD_MOVE(arg1),(TestStruct2 const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< TestStruct2 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestStruct2Vector_1doCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< TestStruct2 > *arg1 = (std::vector< TestStruct2 > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< TestStruct2 > **)&jarg1; 
  try {
    result = std_vector_Sl_TestStruct2_Sg__doCapacity(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestStruct2Vector_1doReserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< TestStruct2 > *arg1 = (std::vector< TestStruct2 > *) 0 ;
  jint arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< TestStruct2 > **)&jarg1; 
  arg2 = jarg2; 
  try {
    std_vector_Sl_TestStruct2_Sg__doReserve(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jint JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestStruct2Vector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< TestStruct2 > *arg1 = (std::vector< TestStruct2 > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< TestStruct2 > **)&jarg1; 
  try {
    result = std_vector_Sl_TestStruct2_Sg__doSize((std::vector< TestStruct2 > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestStruct2Vector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< TestStruct2 > *arg1 = (std::vector< TestStruct2 > *) 0 ;
  std::vector< TestStruct2 >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< TestStruct2 > **)&jarg1; 
  arg2 = *(std::vector< TestStruct2 >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< TestStruct2 >::value_type const & is null");
    return ;
  } 
  std_vector_Sl_TestStruct2_Sg__doAdd__SWIG_0(arg1,(TestStruct2 const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestStruct2Vector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< TestStruct2 > *arg1 = (std::vector< TestStruct2 > *) 0 ;
  jint arg2 ;
  std::vector< TestStruct2 >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< TestStruct2 > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< TestStruct2 >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< TestStruct2 >::value_type const & is null");
    return ;
  } 
  try {
    std_vector_Sl_TestStruct2_Sg__doAdd__SWIG_1(arg1,SWIG_STD_MOVE(arg2),(TestStruct2 const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestStruct2Vector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< TestStruct2 > *arg1 = (std::vector< TestStruct2 > *) 0 ;
  jint arg2 ;
  std::vector< TestStruct2 >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< TestStruct2 > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_TestStruct2_Sg__doRemove(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< TestStruct2 >::value_type **)&jresult = new std::vector< TestStruct2 >::value_type(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestStruct2Vector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< TestStruct2 > *arg1 = (std::vector< TestStruct2 > *) 0 ;
  jint arg2 ;
  std::vector< TestStruct2 >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< TestStruct2 > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< TestStruct2 >::value_type *) &std_vector_Sl_TestStruct2_Sg__doGet(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< TestStruct2 >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestStruct2Vector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< TestStruct2 > *arg1 = (std::vector< TestStruct2 > *) 0 ;
  jint arg2 ;
  std::vector< TestStruct2 >::value_type *arg3 = 0 ;
  std::vector< TestStruct2 >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< TestStruct2 > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< TestStruct2 >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< TestStruct2 >::value_type const & is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_TestStruct2_Sg__doSet(arg1,SWIG_STD_MOVE(arg2),(TestStruct2 const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< TestStruct2 >::value_type **)&jresult = new std::vector< TestStruct2 >::value_type(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestStruct2Vector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< TestStruct2 > *arg1 = (std::vector< TestStruct2 > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< TestStruct2 > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_TestStruct2_Sg__doRemoveRange(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_delete_1TestStruct2Vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< TestStruct2 > *arg1 = (std::vector< TestStruct2 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< TestStruct2 > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_new_1TestStructVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< TestStruct > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< TestStruct > *)new std::vector< TestStruct >();
  *(std::vector< TestStruct > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_new_1TestStructVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< TestStruct > *arg1 = 0 ;
  std::vector< TestStruct > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< TestStruct > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< TestStruct > const & is null");
    return 0;
  } 
  result = (std::vector< TestStruct > *)new std::vector< TestStruct >((std::vector< TestStruct > const &)*arg1);
  *(std::vector< TestStruct > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestStructVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< TestStruct > *arg1 = (std::vector< TestStruct > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< TestStruct > **)&jarg1; 
  result = (bool)((std::vector< TestStruct > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestStructVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< TestStruct > *arg1 = (std::vector< TestStruct > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< TestStruct > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_new_1TestStructVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  TestStruct *arg2 = 0 ;
  std::vector< TestStruct > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(TestStruct **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TestStruct const & is null");
    return 0;
  } 
  try {
    result = (std::vector< TestStruct > *)new_std_vector_Sl_TestStruct_Sg___SWIG_2(SWIG_STD_MOVE(arg1),(TestStruct const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< TestStruct > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestStructVector_1doCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< TestStruct > *arg1 = (std::vector< TestStruct > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< TestStruct > **)&jarg1; 
  try {
    result = std_vector_Sl_TestStruct_Sg__doCapacity(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestStructVector_1doReserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< TestStruct > *arg1 = (std::vector< TestStruct > *) 0 ;
  jint arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< TestStruct > **)&jarg1; 
  arg2 = jarg2; 
  try {
    std_vector_Sl_TestStruct_Sg__doReserve(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jint JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestStructVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< TestStruct > *arg1 = (std::vector< TestStruct > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< TestStruct > **)&jarg1; 
  try {
    result = std_vector_Sl_TestStruct_Sg__doSize((std::vector< TestStruct > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestStructVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< TestStruct > *arg1 = (std::vector< TestStruct > *) 0 ;
  std::vector< TestStruct >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< TestStruct > **)&jarg1; 
  arg2 = *(std::vector< TestStruct >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< TestStruct >::value_type const & is null");
    return ;
  } 
  std_vector_Sl_TestStruct_Sg__doAdd__SWIG_0(arg1,(TestStruct const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestStructVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< TestStruct > *arg1 = (std::vector< TestStruct > *) 0 ;
  jint arg2 ;
  std::vector< TestStruct >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< TestStruct > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< TestStruct >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< TestStruct >::value_type const & is null");
    return ;
  } 
  try {
    std_vector_Sl_TestStruct_Sg__doAdd__SWIG_1(arg1,SWIG_STD_MOVE(arg2),(TestStruct const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestStructVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< TestStruct > *arg1 = (std::vector< TestStruct > *) 0 ;
  jint arg2 ;
  std::vector< TestStruct >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< TestStruct > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_TestStruct_Sg__doRemove(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< TestStruct >::value_type **)&jresult = new std::vector< TestStruct >::value_type(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestStructVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< TestStruct > *arg1 = (std::vector< TestStruct > *) 0 ;
  jint arg2 ;
  std::vector< TestStruct >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< TestStruct > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< TestStruct >::value_type *) &std_vector_Sl_TestStruct_Sg__doGet(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< TestStruct >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestStructVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< TestStruct > *arg1 = (std::vector< TestStruct > *) 0 ;
  jint arg2 ;
  std::vector< TestStruct >::value_type *arg3 = 0 ;
  std::vector< TestStruct >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< TestStruct > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< TestStruct >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< TestStruct >::value_type const & is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_TestStruct_Sg__doSet(arg1,SWIG_STD_MOVE(arg2),(TestStruct const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< TestStruct >::value_type **)&jresult = new std::vector< TestStruct >::value_type(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestStructVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< TestStruct > *arg1 = (std::vector< TestStruct > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< TestStruct > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_TestStruct_Sg__doRemoveRange(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_delete_1TestStructVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< TestStruct > *arg1 = (std::vector< TestStruct > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< TestStruct > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestObserver2Data_1a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TestObserver2Data *arg1 = (TestObserver2Data *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TestObserver2Data **)&jarg1; 
  result = (int)(int) ((arg1)->a);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_new_1TestObserver2Data(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  TestObserver2Data *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (TestObserver2Data *)new TestObserver2Data(arg1);
  *(TestObserver2Data **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_delete_1TestObserver2Data(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TestObserver2Data *arg1 = (TestObserver2Data *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TestObserver2Data **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestEnum1_1AllTradingTime_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TestEnum1 result;
  
  (void)jenv;
  (void)jcls;
  result = (TestEnum1)TestEnum1::AllTradingTime;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestEnum1_1UsPreMarketAfter_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TestEnum1 result;
  
  (void)jenv;
  (void)jcls;
  result = (TestEnum1)TestEnum1::UsPreMarketAfter;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestEnum2_1AllTradingTime_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TestEnum2 result;
  
  (void)jenv;
  (void)jcls;
  result = (TestEnum2)TestEnum2::AllTradingTime;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestEnum2_1UsPreMarketAfter_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TestEnum2 result;
  
  (void)jenv;
  (void)jcls;
  result = (TestEnum2)TestEnum2::UsPreMarketAfter;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestStruct_1groupName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  TestStruct *arg1 = (TestStruct *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TestStruct **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->groupName = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestStruct_1groupName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  TestStruct *arg1 = (TestStruct *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TestStruct **)&jarg1; 
  result = (std::string *) & ((arg1)->groupName);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_new_1TestStruct(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TestStruct *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TestStruct *)new TestStruct();
  *(TestStruct **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_delete_1TestStruct(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TestStruct *arg1 = (TestStruct *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TestStruct **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestStruct2_1groupName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  TestStruct2 *arg1 = (TestStruct2 *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TestStruct2 **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->groupName = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestStruct2_1groupName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  TestStruct2 *arg1 = (TestStruct2 *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TestStruct2 **)&jarg1; 
  result = (std::string *) & ((arg1)->groupName);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_new_1TestStruct2(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TestStruct2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TestStruct2 *)new TestStruct2();
  *(TestStruct2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_delete_1TestStruct2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TestStruct2 *arg1 = (TestStruct2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TestStruct2 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestOptionalBridge_1enum1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TestOptional *arg1 = (TestOptional *) 0 ;
  std::optional< TestEnum1 > arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TestOptional **)&jarg1; 
  
  if (jarg2 != INT32_MIN) {
    arg2 = std::make_optional<TestEnum1>((TestEnum1)jarg2);
  } else {
    arg2 = std::nullopt;
  }
  
  if (arg1) (arg1)->enum1 = arg2;
}


SWIGEXPORT jint JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestOptionalBridge_1enum1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TestOptional *arg1 = (TestOptional *) 0 ;
  std::optional< TestEnum1 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TestOptional **)&jarg1; 
  result =  ((arg1)->enum1);
  
  if ((&result)->has_value()) {
    jresult = (jint)(&result)->value();
  } else {
    jresult = INT32_MIN;
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestOptionalBridge_1enum11_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TestOptional *arg1 = (TestOptional *) 0 ;
  TestEnum1 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TestOptional **)&jarg1; 
  arg2 = (TestEnum1)jarg2; 
  if (arg1) (arg1)->enum11 = arg2;
}


SWIGEXPORT jint JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_TestOptionalBridge_1enum11_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TestOptional *arg1 = (TestOptional *) 0 ;
  TestEnum1 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TestOptional **)&jarg1; 
  result = (TestEnum1) ((arg1)->enum11);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_new_1TestOptionalBridge(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TestOptional *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TestOptional *)new TestOptional();
  *(TestOptional **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_delete_1TestOptionalBridge(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TestOptional *arg1 = (TestOptional *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TestOptional **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_delete_1ITestObserver2Bridge(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ITestObserver2 *arg1 = (ITestObserver2 *) 0 ;
  std::shared_ptr< ITestObserver2 > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  ITestObserver2 > **)&jarg1;
  arg1 = (ITestObserver2 *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_ITestObserver2Bridge_1onCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ITestObserver2 *arg1 = (ITestObserver2 *) 0 ;
  int *arg2 = 0 ;
  std::shared_ptr< ITestObserver2 > *smartarg1 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  ITestObserver2 > **)&jarg1;
  arg1 = (ITestObserver2 *)(smartarg1 ? smartarg1->get() : 0); 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->onCall((int const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_ITestObserver2Bridge_1onCall2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ITestObserver2 *arg1 = (ITestObserver2 *) 0 ;
  TestStructVariant *arg2 = 0 ;
  std::shared_ptr< ITestObserver2 > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  ITestObserver2 > **)&jarg1;
  arg1 = (ITestObserver2 *)(smartarg1 ? smartarg1->get() : 0); 
  
  TestStructVariantBridge* jarg2_element = (TestStructVariantBridge*)jarg2;
  if (jarg2_element) {
    arg2 = &jarg2_element->m_original;
  }
  
  (arg1)->onCall2((TestStructVariant const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_ITestObserver2Bridge_1calculateHash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ITestObserver2 *arg1 = (ITestObserver2 *) 0 ;
  std::shared_ptr< ITestObserver2 const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const ITestObserver2 > **)&jarg1;
  arg1 = (ITestObserver2 *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)ITestObserver2_calculateHash((ITestObserver2 const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_ITestObserver2Bridge_1isEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ITestObserver2 *arg1 = (ITestObserver2 *) 0 ;
  ITestObserver2 *arg2 = 0 ;
  std::shared_ptr< ITestObserver2 const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const ITestObserver2 > **)&jarg1;
  arg1 = (ITestObserver2 *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ITestObserver2 *)((*(std::shared_ptr< const ITestObserver2 > **)&jarg2) ? (*(std::shared_ptr< const ITestObserver2 > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ITestObserver2 const & reference is null");
    return 0;
  } 
  result = (bool)ITestObserver2_isEquals((ITestObserver2 const *)arg1,(ITestObserver2 const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_new_1ITestObserver2Bridge(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ITestObserver2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ITestObserver2 *)new SwigDirector_ITestObserver2Bridge(jenv);
  
  *(std::shared_ptr<  ITestObserver2 > **)&jresult = result ? new std::shared_ptr<  ITestObserver2 >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_ITestObserver2Bridge_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< ITestObserver2 > *obj = *((std::shared_ptr< ITestObserver2 > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_ITestObserver2Bridge *director = static_cast<SwigDirector_ITestObserver2Bridge *>(obj->operator->());
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_ITestObserver2Bridge_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  std::shared_ptr< ITestObserver2 > *obj = *((std::shared_ptr< ITestObserver2 > **)&objarg);
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_ITestObserver2Bridge *director = dynamic_cast<SwigDirector_ITestObserver2Bridge *>(obj->operator->());
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_delete_1IObserverManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  IObserverManager *arg1 = (IObserverManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(IObserverManager **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_IObserverManager_1addObserver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  IObserverManager *arg1 = (IObserverManager *) 0 ;
  SwigValueWrapper< std::shared_ptr< std::function< void (int const &) > > > arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(IObserverManager **)&jarg1; 
  
  std::shared_ptr<TestObserverBridge> *smartarg2 = *(std::shared_ptr<TestObserverBridge> **)&jarg2;
  auto original2 = TestObserverBridge::obtainOriginal(smartarg2);
  arg2 = original2;
  
  (arg1)->addObserver(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_IObserverManager_1removeObserver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  IObserverManager *arg1 = (IObserverManager *) 0 ;
  SwigValueWrapper< std::shared_ptr< std::function< void (int const &) > > > arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(IObserverManager **)&jarg1; 
  
  std::shared_ptr<TestObserverBridge> *smartarg2 = *(std::shared_ptr<TestObserverBridge> **)&jarg2;
  auto original2 = TestObserverBridge::obtainOriginal(smartarg2);
  arg2 = original2;
  
  (arg1)->removeObserver(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_IObserverManager_1addObserver2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  IObserverManager *arg1 = (IObserverManager *) 0 ;
  std::shared_ptr< ITestObserver2 > arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(IObserverManager **)&jarg1; 
  
  std::shared_ptr<ITestObserver2> *argp2 = *(std::shared_ptr<ITestObserver2> **)&jarg2;
  if (argp2) {
    // 创建全局引用
    jobject globalRef = jenv->NewGlobalRef(jarg2_);
    // 创建新的 shared_ptr，使用自定义删除器 x
    arg2 = std::shared_ptr<ITestObserver2>(argp2->get(), [globalRef](ITestObserver2* ptr) {
      JNIEnv *env = nullptr;
        JNIContext context(env);
        // 删除全局引用
        env->DeleteGlobalRef(globalRef);
      });
  }
  
  (arg1)->addObserver2(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_IObserverManager_1removeObserver2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  IObserverManager *arg1 = (IObserverManager *) 0 ;
  std::shared_ptr< ITestObserver2 > arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(IObserverManager **)&jarg1; 
  
  std::shared_ptr<ITestObserver2> *argp2 = *(std::shared_ptr<ITestObserver2> **)&jarg2;
  if (argp2) {
    // 创建全局引用
    jobject globalRef = jenv->NewGlobalRef(jarg2_);
    // 创建新的 shared_ptr，使用自定义删除器 x
    arg2 = std::shared_ptr<ITestObserver2>(argp2->get(), [globalRef](ITestObserver2* ptr) {
      JNIEnv *env = nullptr;
        JNIContext context(env);
        // 删除全局引用
        env->DeleteGlobalRef(globalRef);
      });
  }
  
  (arg1)->removeObserver2(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_IObserverManager_1add1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  IObserverManager *arg1 = (IObserverManager *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IObserverManager **)&jarg1; 
  
  arg2 = jarg2;
  
  
  arg3 = jarg3;
  
  result = (arg1)->add1(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  
  jresult = result;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_IObserverManager_1add11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  IObserverManager *arg1 = (IObserverManager *) 0 ;
  long long arg2 ;
  long long arg3 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IObserverManager **)&jarg1; 
  arg2 = (long long)jarg2; 
  arg3 = (long long)jarg3; 
  result = (long long)(arg1)->add11(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_IObserverManager_1add2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  IObserverManager *arg1 = (IObserverManager *) 0 ;
  int64_t *arg2 = 0 ;
  int64_t *arg3 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IObserverManager **)&jarg1; 
  
  arg2 = (int64_t *)&jarg2;
  
  
  arg3 = (int64_t *)&jarg3;
  
  result = (arg1)->add2((int64_t const &)*arg2,(int64_t const &)*arg3);
  
  jresult = result;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_IObserverManager_1add22(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  IObserverManager *arg1 = (IObserverManager *) 0 ;
  long long *arg2 = 0 ;
  long long *arg3 = 0 ;
  long long temp2 ;
  long long temp3 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IObserverManager **)&jarg1; 
  temp2 = (long long)jarg2; 
  arg2 = &temp2; 
  temp3 = (long long)jarg3; 
  arg3 = &temp3; 
  result = (long long)(arg1)->add22((long long const &)*arg2,(long long const &)*arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_IObserverManager_1add3(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  IObserverManager *arg1 = (IObserverManager *) 0 ;
  std::optional< int64_t > arg2 ;
  std::optional< int64_t > arg3 ;
  std::optional< int64_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IObserverManager **)&jarg1; 
  
  arg2 = std::make_optional<int64_t>(jarg2);
  
  
  arg3 = std::make_optional<int64_t>(jarg3);
  
  result = (arg1)->add3(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  
  if ((&result)->has_value()) {
    jresult = (&result)->value();
  } else {
    jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_IObserverManager_1add33(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  IObserverManager *arg1 = (IObserverManager *) 0 ;
  std::optional< int64_t > *arg2 = 0 ;
  std::optional< int64_t > *arg3 = 0 ;
  std::optional< int64_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IObserverManager **)&jarg1; 
  
  auto arg2_temp = std::make_optional<int64_t>(jarg2);
  arg2 = &arg2_temp;
  
  
  auto arg3_temp = std::make_optional<int64_t>(jarg3);
  arg3 = &arg3_temp;
  
  result = (arg1)->add33((std::optional< int64_t > const &)*arg2,(std::optional< int64_t > const &)*arg3);
  
  if ((&result)->has_value()) {
    jresult = (&result)->value();
  } else {
    jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_IObserverManager_1byteTest1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  IObserverManager *arg1 = (IObserverManager *) 0 ;
  SwigValueWrapper< std::vector< uint8_t > > arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IObserverManager **)&jarg1; 
  
  std::vector<uint8_t> arg2_temp;
  jsize len = jenv->GetArrayLength(jarg2);
  arg2_temp.resize(len);
  jenv->GetByteArrayRegion(jarg2, 0, len, (jbyte*)arg2_temp.data());
  arg2 = std::move(arg2_temp);
  
  (arg1)->byteTest1(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_IObserverManager_1byteTest2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  IObserverManager *arg1 = (IObserverManager *) 0 ;
  std::vector< uint8_t > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IObserverManager **)&jarg1; 
  
  std::vector<uint8_t> arg2_temp;
  jsize len = jenv->GetArrayLength(jarg2);
  arg2_temp.resize(len);
  jenv->GetByteArrayRegion(jarg2, 0, len, (jbyte*)arg2_temp.data());
  arg2 = &arg2_temp;
  
  (arg1)->byteTest2((std::vector< uint8_t > const &)*arg2);
}


SWIGEXPORT jbyteArray JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_IObserverManager_1byteTest3(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyteArray jresult = 0 ;
  IObserverManager *arg1 = (IObserverManager *) 0 ;
  SwigValueWrapper< std::vector< uint8_t > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IObserverManager **)&jarg1; 
  result = (arg1)->byteTest3();
  
  auto size = static_cast<jsize>((&result)->size());
  jbyteArray jba = jenv->NewByteArray(size);
  jenv->SetByteArrayRegion(jba, 0, size, (jbyte*)(&result)->data());
  jresult = jba;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_IObserverManager_1setTestObserver2List(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  IObserverManager *arg1 = (IObserverManager *) 0 ;
  std::vector< TestObserver2 > arg2 ;
  std::vector< TestObserver2 > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(IObserverManager **)&jarg1; 
  argp2 = *(std::vector< TestObserver2 > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< TestObserver2 >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setTestObserver2List(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT jint JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_IObserverManager_1optionalEnum33(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  IObserverManager *arg1 = (IObserverManager *) 0 ;
  TestEnum1 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IObserverManager **)&jarg1; 
  result = (TestEnum1)(arg1)->optionalEnum33();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_IObserverManager_1getObserver2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  IObserverManager *arg1 = (IObserverManager *) 0 ;
  std::shared_ptr< ITestObserver2 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IObserverManager **)&jarg1; 
  result = (arg1)->getObserver2();
  
  if (result) {
    auto *result_ptr = dynamic_cast<Swig::Director*>((&result)->get());
    if (result_ptr) {
      jobject result_jobj = result_ptr->swig_get_self(jenv);
      if (result_jobj) {
        *((SwigDirectorWrapper **)&jresult) = new SwigDirectorWrapper(jenv, result_jobj);
      } else {
        *((SwigDirectorWrapper **)&jresult) = new SwigDirectorWrapper(new std::shared_ptr<ITestObserver2>(result));
      }
    } else {
      *((SwigDirectorWrapper **)&jresult) = new SwigDirectorWrapper(new std::shared_ptr<ITestObserver2>(result));
    }
  }
  
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_IObserverManager_1test_1double_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jdouble jresult = 0 ;
  IObserverManager *arg1 = (IObserverManager *) 0 ;
  std::optional< double > arg2 ;
  std::optional< double > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IObserverManager **)&jarg1; 
  
  if (std::isnan(jarg2)) {
    arg2 = std::nullopt;
  } else {
    arg2 = std::make_optional<double>(jarg2);
  }
  
  result = (arg1)->test_double_1(SWIG_STD_MOVE(arg2));
  
  if ((&result)->has_value()) {
    jresult = (&result)->value();
  } else {
    jresult = std::numeric_limits<double>::quiet_NaN();
  }
  
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_IObserverManager_1test_1double_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jdouble jresult = 0 ;
  IObserverManager *arg1 = (IObserverManager *) 0 ;
  std::optional< double > *arg2 = 0 ;
  std::optional< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IObserverManager **)&jarg1; 
  
  auto arg2_temp = std::isnan(jarg2) ? std::nullopt : std::make_optional<double>(jarg2);
  arg2 = &arg2_temp;
  
  result = (std::optional< double > *) &(arg1)->test_double_2((std::optional< double > const &)*arg2);
  
  if (result->has_value()) {
    jresult = result->value();
  } else {
    jresult = std::numeric_limits<double>::quiet_NaN();
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_IObserverManager_1test_1bool_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyte jarg2) {
  IObserverManager *arg1 = (IObserverManager *) 0 ;
  std::optional< bool > arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IObserverManager **)&jarg1; 
  
  switch (jarg2) {
    case 0: {
      arg2 = std::make_optional<bool>(false);
      break;
    }
    case 1: {
      arg2 = std::make_optional<bool>(true);
      break;
    }
    default: {
      arg2 = std::nullopt;
      break;
    }
  }
  
  (arg1)->test_bool_1(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT jbyte JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_IObserverManager_1test_1bool_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyte jresult = 0 ;
  IObserverManager *arg1 = (IObserverManager *) 0 ;
  std::optional< bool > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IObserverManager **)&jarg1; 
  result = (arg1)->test_bool_2();
  
  if ((&result)->has_value()) {
    jresult = (&result)->value() ? 1 : 0;
  } else {
    jresult = 2;
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_IObserverManager_1test_1bool_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyte jarg2) {
  IObserverManager *arg1 = (IObserverManager *) 0 ;
  std::optional< bool > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IObserverManager **)&jarg1; 
  
  auto arg2_temp = jarg2 == 0 ? std::make_optional<bool>(false) : (jarg2 == 0 ? std::make_optional<double>(true) : std::nullopt);
  arg2 = &arg2_temp;
  
  (arg1)->test_bool_3((std::optional< bool > const &)*arg2);
}


SWIGEXPORT jbyte JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_IObserverManager_1test_1bool_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyte jresult = 0 ;
  IObserverManager *arg1 = (IObserverManager *) 0 ;
  std::optional< bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IObserverManager **)&jarg1; 
  result = (std::optional< bool > *) &(arg1)->test_bool_4();
  
  if (result->has_value()) {
    jresult = result->value() ? 1 : 0;
  } else {
    jresult = 2;
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_new_1IObserverManager(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  IObserverManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (IObserverManager *)new SwigDirector_IObserverManager(jenv);
  *(IObserverManager **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_IObserverManager_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  IObserverManager *obj = *((IObserverManager **)&objarg);
  (void)jcls;
  SwigDirector_IObserverManager *director = static_cast<SwigDirector_IObserverManager *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_IObserverManager_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  IObserverManager *obj = *((IObserverManager **)&objarg);
  SwigDirector_IObserverManager *director = dynamic_cast<SwigDirector_IObserverManager *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_ObserverManager_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  IObserverManager *arg1 = (IObserverManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IObserverManager **)&jarg1; 
  ObserverManager::init(arg1);
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_ObserverManager_1addObserver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SwigValueWrapper< std::shared_ptr< std::function< void (int const &) > > > arg1 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  std::shared_ptr<TestObserverBridge> *smartarg1 = *(std::shared_ptr<TestObserverBridge> **)&jarg1;
  auto original1 = TestObserverBridge::obtainOriginal(smartarg1);
  arg1 = original1;
  
  ObserverManager::addObserver(SWIG_STD_MOVE(arg1));
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_ObserverManager_1removeObserver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SwigValueWrapper< std::shared_ptr< std::function< void (int const &) > > > arg1 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  std::shared_ptr<TestObserverBridge> *smartarg1 = *(std::shared_ptr<TestObserverBridge> **)&jarg1;
  auto original1 = TestObserverBridge::obtainOriginal(smartarg1);
  arg1 = original1;
  
  ObserverManager::removeObserver(SWIG_STD_MOVE(arg1));
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_ObserverManager_1addObserver2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::shared_ptr< ITestObserver2 > arg1 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  std::shared_ptr<ITestObserver2> *argp1 = *(std::shared_ptr<ITestObserver2> **)&jarg1;
  if (argp1) {
    // 创建全局引用
    jobject globalRef = jenv->NewGlobalRef(jarg1_);
    // 创建新的 shared_ptr，使用自定义删除器 x
    arg1 = std::shared_ptr<ITestObserver2>(argp1->get(), [globalRef](ITestObserver2* ptr) {
      JNIEnv *env = nullptr;
        JNIContext context(env);
        // 删除全局引用
        env->DeleteGlobalRef(globalRef);
      });
  }
  
  ObserverManager::addObserver2(SWIG_STD_MOVE(arg1));
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_ObserverManager_1removeObserver2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::shared_ptr< ITestObserver2 > arg1 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  std::shared_ptr<ITestObserver2> *argp1 = *(std::shared_ptr<ITestObserver2> **)&jarg1;
  if (argp1) {
    // 创建全局引用
    jobject globalRef = jenv->NewGlobalRef(jarg1_);
    // 创建新的 shared_ptr，使用自定义删除器 x
    arg1 = std::shared_ptr<ITestObserver2>(argp1->get(), [globalRef](ITestObserver2* ptr) {
      JNIEnv *env = nullptr;
        JNIContext context(env);
        // 删除全局引用
        env->DeleteGlobalRef(globalRef);
      });
  }
  
  ObserverManager::removeObserver2(SWIG_STD_MOVE(arg1));
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_ObserverManager_1add1(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  int64_t arg1 ;
  int64_t arg2 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = jarg1;
  
  
  arg2 = jarg2;
  
  result = ObserverManager::add1(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  
  jresult = result;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_ObserverManager_1add11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  long long arg1 ;
  long long arg2 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (long long)jarg1; 
  arg2 = (long long)jarg2; 
  result = (long long)ObserverManager::add11(arg1,arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_ObserverManager_1add2(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  int64_t *arg1 = 0 ;
  int64_t *arg2 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (int64_t *)&jarg1;
  
  
  arg2 = (int64_t *)&jarg2;
  
  result = ObserverManager::add2(*arg1,*arg2);
  
  jresult = result;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_ObserverManager_1add22(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  long long *arg1 = 0 ;
  long long *arg2 = 0 ;
  long long temp1 ;
  long long temp2 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  temp1 = (long long)jarg1; 
  arg1 = &temp1; 
  temp2 = (long long)jarg2; 
  arg2 = &temp2; 
  result = (long long)ObserverManager::add22((long long const &)*arg1,(long long const &)*arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_ObserverManager_1add3(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  std::optional< int64_t > arg1 ;
  std::optional< int64_t > arg2 ;
  std::optional< int64_t > result;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = std::make_optional<int64_t>(jarg1);
  
  
  arg2 = std::make_optional<int64_t>(jarg2);
  
  result = ObserverManager::add3(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  
  if ((&result)->has_value()) {
    jresult = (&result)->value();
  } else {
    jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_ObserverManager_1add33(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  std::optional< int64_t > *arg1 = 0 ;
  std::optional< int64_t > *arg2 = 0 ;
  std::optional< int64_t > result;
  
  (void)jenv;
  (void)jcls;
  
  auto arg1_temp = std::make_optional<int64_t>(jarg1);
  arg1 = &arg1_temp;
  
  
  auto arg2_temp = std::make_optional<int64_t>(jarg2);
  arg2 = &arg2_temp;
  
  result = ObserverManager::add33((std::optional< int64_t > const &)*arg1,(std::optional< int64_t > const &)*arg2);
  
  if ((&result)->has_value()) {
    jresult = (&result)->value();
  } else {
    jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_ObserverManager_1byteTest1(JNIEnv *jenv, jclass jcls, jbyteArray jarg1) {
  SwigValueWrapper< std::vector< uint8_t > > arg1 ;
  
  (void)jenv;
  (void)jcls;
  
  std::vector<uint8_t> arg1_temp;
  jsize len = jenv->GetArrayLength(jarg1);
  arg1_temp.resize(len);
  jenv->GetByteArrayRegion(jarg1, 0, len, (jbyte*)arg1_temp.data());
  arg1 = std::move(arg1_temp);
  
  ObserverManager::byteTest1(SWIG_STD_MOVE(arg1));
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_ObserverManager_1byteTest2(JNIEnv *jenv, jclass jcls, jbyteArray jarg1) {
  std::vector< uint8_t > *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  std::vector<uint8_t> arg1_temp;
  jsize len = jenv->GetArrayLength(jarg1);
  arg1_temp.resize(len);
  jenv->GetByteArrayRegion(jarg1, 0, len, (jbyte*)arg1_temp.data());
  arg1 = &arg1_temp;
  
  ObserverManager::byteTest2((std::vector< uint8_t > const &)*arg1);
}


SWIGEXPORT jbyteArray JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_ObserverManager_1byteTest3(JNIEnv *jenv, jclass jcls) {
  jbyteArray jresult = 0 ;
  SwigValueWrapper< std::vector< uint8_t > > result;
  
  (void)jenv;
  (void)jcls;
  result = ObserverManager::byteTest3();
  
  auto size = static_cast<jsize>((&result)->size());
  jbyteArray jba = jenv->NewByteArray(size);
  jenv->SetByteArrayRegion(jba, 0, size, (jbyte*)(&result)->data());
  jresult = jba;
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_ObserverManager_1optionalEnum33(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TestEnum1 result;
  
  (void)jenv;
  (void)jcls;
  result = (TestEnum1)ObserverManager::optionalEnum33();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_ObserverManager_1getObserver2(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::shared_ptr< ITestObserver2 > result;
  
  (void)jenv;
  (void)jcls;
  result = ObserverManager::getObserver2();
  
  if (result) {
    auto *result_ptr = dynamic_cast<Swig::Director*>((&result)->get());
    if (result_ptr) {
      jobject result_jobj = result_ptr->swig_get_self(jenv);
      if (result_jobj) {
        *((SwigDirectorWrapper **)&jresult) = new SwigDirectorWrapper(jenv, result_jobj);
      } else {
        *((SwigDirectorWrapper **)&jresult) = new SwigDirectorWrapper(new std::shared_ptr<ITestObserver2>(result));
      }
    } else {
      *((SwigDirectorWrapper **)&jresult) = new SwigDirectorWrapper(new std::shared_ptr<ITestObserver2>(result));
    }
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_new_1ObserverManager(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ObserverManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ObserverManager *)new ObserverManager();
  *(ObserverManager **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_delete_1ObserverManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ObserverManager *arg1 = (ObserverManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ObserverManager **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_JNITestEntrance_1testAddObserver(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  JNITestEntrance::testAddObserver(arg1);
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_JNITestEntrance_1testRemoveObserver(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  JNITestEntrance::testRemoveObserver(arg1);
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_new_1JNITestEntrance(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  JNITestEntrance *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (JNITestEntrance *)new JNITestEntrance();
  *(JNITestEntrance **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_delete_1JNITestEntrance(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  JNITestEntrance *arg1 = (JNITestEntrance *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(JNITestEntrance **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_observer_ObserverModuleJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[26] = {
    {
      "SwigDirector_TestObserverBridge_onCall", "(Lcom/hyh/jnitest/test/observer/TestObserverBridge;I)V" 
    },
    {
      "SwigDirector_TestObserver2Bridge_onCall", "(Lcom/hyh/jnitest/test/observer/TestObserver2Bridge;J)V" 
    },
    {
      "SwigDirector_ITestObserver2Bridge_onCall", "(Lcom/hyh/jnitest/test/observer/ITestObserver2Bridge;I)V" 
    },
    {
      "SwigDirector_ITestObserver2Bridge_onCall2", "(Lcom/hyh/jnitest/test/observer/ITestObserver2Bridge;J)V" 
    },
    {
      "SwigDirector_IObserverManager_addObserver", "(Lcom/hyh/jnitest/test/observer/IObserverManager;J)V" 
    },
    {
      "SwigDirector_IObserverManager_removeObserver", "(Lcom/hyh/jnitest/test/observer/IObserverManager;J)V" 
    },
    {
      "SwigDirector_IObserverManager_addObserver2", "(Lcom/hyh/jnitest/test/observer/IObserverManager;J)V" 
    },
    {
      "SwigDirector_IObserverManager_removeObserver2", "(Lcom/hyh/jnitest/test/observer/IObserverManager;J)V" 
    },
    {
      "SwigDirector_IObserverManager_add1", "(Lcom/hyh/jnitest/test/observer/IObserverManager;JJ)J" 
    },
    {
      "SwigDirector_IObserverManager_add11", "(Lcom/hyh/jnitest/test/observer/IObserverManager;JJ)J" 
    },
    {
      "SwigDirector_IObserverManager_add2", "(Lcom/hyh/jnitest/test/observer/IObserverManager;JJ)J" 
    },
    {
      "SwigDirector_IObserverManager_add22", "(Lcom/hyh/jnitest/test/observer/IObserverManager;JJ)J" 
    },
    {
      "SwigDirector_IObserverManager_add3", "(Lcom/hyh/jnitest/test/observer/IObserverManager;JJ)J" 
    },
    {
      "SwigDirector_IObserverManager_add33", "(Lcom/hyh/jnitest/test/observer/IObserverManager;JJ)J" 
    },
    {
      "SwigDirector_IObserverManager_byteTest1", "(Lcom/hyh/jnitest/test/observer/IObserverManager;[B)V" 
    },
    {
      "SwigDirector_IObserverManager_byteTest2", "(Lcom/hyh/jnitest/test/observer/IObserverManager;[B)V" 
    },
    {
      "SwigDirector_IObserverManager_byteTest3", "(Lcom/hyh/jnitest/test/observer/IObserverManager;)[B" 
    },
    {
      "SwigDirector_IObserverManager_setTestObserver2List", "(Lcom/hyh/jnitest/test/observer/IObserverManager;J)V" 
    },
    {
      "SwigDirector_IObserverManager_optionalEnum33", "(Lcom/hyh/jnitest/test/observer/IObserverManager;)I" 
    },
    {
      "SwigDirector_IObserverManager_getObserver2", "(Lcom/hyh/jnitest/test/observer/IObserverManager;)J" 
    },
    {
      "SwigDirector_IObserverManager_test_double_1", "(Lcom/hyh/jnitest/test/observer/IObserverManager;D)D" 
    },
    {
      "SwigDirector_IObserverManager_test_double_2", "(Lcom/hyh/jnitest/test/observer/IObserverManager;D)D" 
    },
    {
      "SwigDirector_IObserverManager_test_bool_1", "(Lcom/hyh/jnitest/test/observer/IObserverManager;B)V" 
    },
    {
      "SwigDirector_IObserverManager_test_bool_2", "(Lcom/hyh/jnitest/test/observer/IObserverManager;)B" 
    },
    {
      "SwigDirector_IObserverManager_test_bool_3", "(Lcom/hyh/jnitest/test/observer/IObserverManager;B)V" 
    },
    {
      "SwigDirector_IObserverManager_test_bool_4", "(Lcom/hyh/jnitest/test/observer/IObserverManager;)B" 
    }
  };
  Swig::jclass_ObserverModuleJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_ObserverModuleJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_method_ids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_method_ids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

