/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.3.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_ObserverModule_WRAP_H_
#define SWIG_ObserverModule_WRAP_H_

class SwigDirector_TestObserverBridge : public TestObserverBridge, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_TestObserverBridge(JNIEnv *jenv);
    virtual ~SwigDirector_TestObserverBridge();
    virtual void onCall(int const &data);
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<1> swig_override;
};

class SwigDirector_TestObserver2Bridge : public TestObserver2Bridge, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_TestObserver2Bridge(JNIEnv *jenv);
    virtual ~SwigDirector_TestObserver2Bridge();
    virtual void onCall(TestObserver2Data const &data);
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<1> swig_override;
};

class SwigDirector_ITestObserver2Bridge : public ITestObserver2, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_ITestObserver2Bridge(JNIEnv *jenv);
    virtual ~SwigDirector_ITestObserver2Bridge();
    virtual void onCall(int const &data);
    virtual void onCall2(TestStructVariant const &variant);
public:
    bool swig_overrides(int n) {
      return (n < 2 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<2> swig_override;
};

class SwigDirector_IObserverManager : public IObserverManager, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_IObserverManager(JNIEnv *jenv);
    virtual ~SwigDirector_IObserverManager();
    virtual void addObserver(std::shared_ptr< TestObserver > observer);
    virtual void removeObserver(std::shared_ptr< TestObserver > observer);
    virtual void addObserver2(std::shared_ptr< ITestObserver2 > observer);
    virtual void removeObserver2(std::shared_ptr< ITestObserver2 > observer);
    virtual int64_t add1(int64_t a,int64_t b);
    virtual long long add11(long long a,long long b);
    virtual int64_t add2(int64_t const &a,int64_t const &b);
    virtual long long add22(long long const &a,long long const &b);
    virtual std::optional< int64_t > add3(std::optional< int64_t > a,std::optional< int64_t > b);
    virtual std::optional< int64_t > add33(std::optional< int64_t > const &a,std::optional< int64_t > const &b);
    virtual void byteTest1(std::vector< uint8_t > byteArray);
    virtual void byteTest2(std::vector< uint8_t > const &byteArray);
    virtual std::vector< uint8_t > byteTest3();
    virtual void setTestObserver2List(std::vector< TestObserver2 > arg0);
    virtual TestEnum1 optionalEnum33();
    virtual std::shared_ptr< ITestObserver2 > getObserver2();
    virtual std::optional< double > test_double_1(std::optional< double > d);
    virtual std::optional< double > &test_double_2(std::optional< double > const &d);
public:
    bool swig_overrides(int n) {
      return (n < 18 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<18> swig_override;
};


#endif
