/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.3.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#include "../../swig_gen_common.h"
#include "../../../../cpp/JNIContext.h"

namespace Swig {
  namespace {
    jclass jclass_ItemModuleJNI = NULL;
    jmethodID director_method_ids[21];
  }
}




#include <map>
#include <unordered_map>
#include <variant>
#include <memory>
#include <mutex>
#include <list>
#include <vector>
#include <functional>


#include "model/N2CTestItem.h"
#include "model/N2CItemIcon.h"
#include "model/TestItem.h"
#include "model/ItemIcon.h"


/* Check for overflow converting to Java int (always signed 32-bit) from (unsigned variable-bit) size_t */
SWIGINTERN jint SWIG_JavaIntFromSize_t(size_t size) {
  static const jint JINT_MAX = 0x7FFFFFFF;
  return (size > (size_t)JINT_MAX) ? -1 : (jint)size;
}


SWIGINTERN jint SWIG_VectorSize(size_t size) {
  jint sz = SWIG_JavaIntFromSize_t(size);
  if (sz == -1)
    throw std::out_of_range("vector size is too large to fit into a Java int");
  return sz;
}

SWIGINTERN std::vector< std::shared_ptr< IItemIcon > > *new_std_vector_Sl_std_shared_ptr_Sl_IItemIcon_Sg__Sg___SWIG_2(jint count,std::shared_ptr< IItemIcon > const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< std::shared_ptr< IItemIcon > >(static_cast<std::vector< std::shared_ptr< IItemIcon > >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_std_shared_ptr_Sl_IItemIcon_Sg__Sg__doCapacity(std::vector< std::shared_ptr< IItemIcon > > *self){
        return SWIG_VectorSize(self->capacity());
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_IItemIcon_Sg__Sg__doReserve(std::vector< std::shared_ptr< IItemIcon > > *self,jint n){
        if (n < 0)
          throw std::out_of_range("vector reserve size must be positive");
        self->reserve(n);
      }
SWIGINTERN jint std_vector_Sl_std_shared_ptr_Sl_IItemIcon_Sg__Sg__doSize(std::vector< std::shared_ptr< IItemIcon > > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_IItemIcon_Sg__Sg__doAdd__SWIG_0(std::vector< std::shared_ptr< IItemIcon > > *self,std::vector< std::shared_ptr< IItemIcon > >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_IItemIcon_Sg__Sg__doAdd__SWIG_1(std::vector< std::shared_ptr< IItemIcon > > *self,jint index,std::vector< std::shared_ptr< IItemIcon > >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::shared_ptr< IItemIcon > >::value_type std_vector_Sl_std_shared_ptr_Sl_IItemIcon_Sg__Sg__doRemove(std::vector< std::shared_ptr< IItemIcon > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          std::shared_ptr< IItemIcon > const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::shared_ptr< IItemIcon > >::value_type const &std_vector_Sl_std_shared_ptr_Sl_IItemIcon_Sg__Sg__doGet(std::vector< std::shared_ptr< IItemIcon > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< std::shared_ptr< IItemIcon > >::value_type std_vector_Sl_std_shared_ptr_Sl_IItemIcon_Sg__Sg__doSet(std::vector< std::shared_ptr< IItemIcon > > *self,jint index,std::vector< std::shared_ptr< IItemIcon > >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          std::shared_ptr< IItemIcon > const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_IItemIcon_Sg__Sg__doRemoveRange(std::vector< std::shared_ptr< IItemIcon > > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }

struct SWIG_null_deleter {
  void operator() (void const *) const {
  }
};
#define SWIG_NO_NULL_DELETER_0 , SWIG_null_deleter()
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "item_wrap.h"

SwigDirector_IItemIcon::SwigDirector_IItemIcon(JNIEnv *jenv) : IItemIcon(), Swig::Director(jenv) {
}

SwigDirector_IItemIcon::~SwigDirector_IItemIcon() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_IItemIcon::getName() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method IItemIcon::getName.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_ItemModuleJNI, Swig::director_method_ids[0], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in IItemIcon::getName ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_IItemIcon::getIcon() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method IItemIcon::getIcon.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_ItemModuleJNI, Swig::director_method_ids[1], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in IItemIcon::getIcon ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_IItemIcon::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static jclass baseclass = swig_new_global_ref(jenv, "com/hyh/jnitest/test/item/IItemIcon");
  if (!baseclass) return;
  static SwigDirectorMethod methods[] = {
    SwigDirectorMethod(jenv, baseclass, "getName", "()Ljava/lang/String;"),
    SwigDirectorMethod(jenv, baseclass, "getIcon", "()Ljava/lang/String;")
  };
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 2; ++i) {
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].name, methods[i].desc);
        swig_override[i] = methods[i].methid && (methid != methods[i].methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_ITestItem::SwigDirector_ITestItem(JNIEnv *jenv) : ITestItem(), Swig::Director(jenv) {
}

SwigDirector_ITestItem::~SwigDirector_ITestItem() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_ITestItem::getId() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ITestItem::getId.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_ItemModuleJNI, Swig::director_method_ids[2], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ITestItem::getId ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_ITestItem::getTitle() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ITestItem::getTitle.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_ItemModuleJNI, Swig::director_method_ids[3], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ITestItem::getTitle ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_ITestItem::getEnvelopePic() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ITestItem::getEnvelopePic.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_ItemModuleJNI, Swig::director_method_ids[4], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ITestItem::getEnvelopePic ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_ITestItem::getDesc() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ITestItem::getDesc.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_ItemModuleJNI, Swig::director_method_ids[5], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ITestItem::getDesc ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_ITestItem::getNiceDate() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[4]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ITestItem::getNiceDate.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_ItemModuleJNI, Swig::director_method_ids[6], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ITestItem::getNiceDate ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_ITestItem::getAuthor() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[5]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ITestItem::getAuthor.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_ItemModuleJNI, Swig::director_method_ids[7], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ITestItem::getAuthor ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::vector< std::string > SwigDirector_ITestItem::getTags() {
  std::vector< std::string > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::vector< std::string > *argp ;
  
  if (!swig_override[6]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ITestItem::getTags.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_ItemModuleJNI, Swig::director_method_ids[8], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    argp = *(std::vector< std::string > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::vector< std::string >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ITestItem::getTags ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::vector< std::shared_ptr< IItemIcon > > SwigDirector_ITestItem::getIcons() {
  std::vector< std::shared_ptr< IItemIcon > > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::vector< std::shared_ptr< IItemIcon > > *argp ;
  
  if (!swig_override[7]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ITestItem::getIcons.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_ItemModuleJNI, Swig::director_method_ids[9], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    argp = *(std::vector< std::shared_ptr< IItemIcon > > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::vector< std::shared_ptr< IItemIcon > >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ITestItem::getIcons ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ITestItem::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static jclass baseclass = swig_new_global_ref(jenv, "com/hyh/jnitest/test/item/ITestItem");
  if (!baseclass) return;
  static SwigDirectorMethod methods[] = {
    SwigDirectorMethod(jenv, baseclass, "getId", "()Ljava/lang/String;"),
    SwigDirectorMethod(jenv, baseclass, "getTitle", "()Ljava/lang/String;"),
    SwigDirectorMethod(jenv, baseclass, "getEnvelopePic", "()Ljava/lang/String;"),
    SwigDirectorMethod(jenv, baseclass, "getDesc", "()Ljava/lang/String;"),
    SwigDirectorMethod(jenv, baseclass, "getNiceDate", "()Ljava/lang/String;"),
    SwigDirectorMethod(jenv, baseclass, "getAuthor", "()Ljava/lang/String;"),
    SwigDirectorMethod(jenv, baseclass, "getTags", "()Lcom/hyh/jnitest/basic/infrastructure/StringVector;"),
    SwigDirectorMethod(jenv, baseclass, "getIcons", "()Lcom/hyh/jnitest/test/item/IItemIconVector;")
  };
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 8; ++i) {
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].name, methods[i].desc);
        swig_override[i] = methods[i].methid && (methid != methods[i].methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_IC2NTestItemFactory::SwigDirector_IC2NTestItemFactory(JNIEnv *jenv) : IC2NTestItemFactory(), Swig::Director(jenv) {
}

SwigDirector_IC2NTestItemFactory::~SwigDirector_IC2NTestItemFactory() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::shared_ptr< ITestItem > SwigDirector_IC2NTestItemFactory::create(int index) {
  std::shared_ptr< ITestItem > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jindex  ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method IC2NTestItemFactory::create.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jindex = (jint) index;
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_ItemModuleJNI, Swig::director_method_ids[10], swigjobj, jindex);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    
    if (jresult) {
      std::shared_ptr<ITestItem> *smartarg = *(std::shared_ptr<ITestItem> **)&jresult;
      auto *jresult_ptr = dynamic_cast<Swig::Director*>(smartarg->get());
      if (jresult_ptr) {
        jobject jobj = jresult_ptr->swig_get_self(jenv);
        // 创建全局引用
        jobject globalRef = jenv->NewGlobalRef(jobj);
        c_result = std::shared_ptr<ITestItem>(smartarg->get(), [globalRef](ITestItem* ptr) {
          JNIEnv *env = nullptr;
            JNIContext context(env);
            // 删除全局引用
            env->DeleteGlobalRef(globalRef);
          });
      } else {
        c_result = *smartarg;
      }
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in IC2NTestItemFactory::create ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_IC2NTestItemFactory::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static jclass baseclass = swig_new_global_ref(jenv, "com/hyh/jnitest/test/item/IC2NTestItemFactory");
  if (!baseclass) return;
  static SwigDirectorMethod methods[] = {
    SwigDirectorMethod(jenv, baseclass, "create", "(I)Lcom/hyh/jnitest/test/item/ITestItem;")
  };
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].name, methods[i].desc);
        swig_override[i] = methods[i].methid && (methid != methods[i].methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_N2CTestItem::SwigDirector_N2CTestItem(JNIEnv *jenv,int index) : N2CTestItem(index), Swig::Director(jenv) {
}

SwigDirector_N2CTestItem::~SwigDirector_N2CTestItem() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_N2CTestItem::getId() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return N2CTestItem::getId();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_ItemModuleJNI, Swig::director_method_ids[11], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in N2CTestItem::getId ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_N2CTestItem::getTitle() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    return N2CTestItem::getTitle();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_ItemModuleJNI, Swig::director_method_ids[12], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in N2CTestItem::getTitle ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_N2CTestItem::getEnvelopePic() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    return N2CTestItem::getEnvelopePic();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_ItemModuleJNI, Swig::director_method_ids[13], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in N2CTestItem::getEnvelopePic ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_N2CTestItem::getDesc() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    return N2CTestItem::getDesc();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_ItemModuleJNI, Swig::director_method_ids[14], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in N2CTestItem::getDesc ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_N2CTestItem::getNiceDate() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[4]) {
    return N2CTestItem::getNiceDate();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_ItemModuleJNI, Swig::director_method_ids[15], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in N2CTestItem::getNiceDate ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_N2CTestItem::getAuthor() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[5]) {
    return N2CTestItem::getAuthor();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_ItemModuleJNI, Swig::director_method_ids[16], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in N2CTestItem::getAuthor ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::vector< std::string > SwigDirector_N2CTestItem::getTags() {
  std::vector< std::string > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::vector< std::string > *argp ;
  
  if (!swig_override[6]) {
    return N2CTestItem::getTags();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_ItemModuleJNI, Swig::director_method_ids[17], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    argp = *(std::vector< std::string > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::vector< std::string >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in N2CTestItem::getTags ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::vector< std::shared_ptr< IItemIcon > > SwigDirector_N2CTestItem::getIcons() {
  std::vector< std::shared_ptr< IItemIcon > > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::vector< std::shared_ptr< IItemIcon > > *argp ;
  
  if (!swig_override[7]) {
    return N2CTestItem::getIcons();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_ItemModuleJNI, Swig::director_method_ids[18], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    argp = *(std::vector< std::shared_ptr< IItemIcon > > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::vector< std::shared_ptr< IItemIcon > >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in N2CTestItem::getIcons ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_N2CTestItem::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static jclass baseclass = swig_new_global_ref(jenv, "com/hyh/jnitest/test/item/N2CTestItem");
  if (!baseclass) return;
  static SwigDirectorMethod methods[] = {
    SwigDirectorMethod(jenv, baseclass, "getId", "()Ljava/lang/String;"),
    SwigDirectorMethod(jenv, baseclass, "getTitle", "()Ljava/lang/String;"),
    SwigDirectorMethod(jenv, baseclass, "getEnvelopePic", "()Ljava/lang/String;"),
    SwigDirectorMethod(jenv, baseclass, "getDesc", "()Ljava/lang/String;"),
    SwigDirectorMethod(jenv, baseclass, "getNiceDate", "()Ljava/lang/String;"),
    SwigDirectorMethod(jenv, baseclass, "getAuthor", "()Ljava/lang/String;"),
    SwigDirectorMethod(jenv, baseclass, "getTags", "()Lcom/hyh/jnitest/basic/infrastructure/StringVector;"),
    SwigDirectorMethod(jenv, baseclass, "getIcons", "()Lcom/hyh/jnitest/test/item/IItemIconVector;")
  };
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 8; ++i) {
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].name, methods[i].desc);
        swig_override[i] = methods[i].methid && (methid != methods[i].methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_N2CItemIcon::SwigDirector_N2CItemIcon(JNIEnv *jenv,int index) : N2CItemIcon(index), Swig::Director(jenv) {
}

SwigDirector_N2CItemIcon::~SwigDirector_N2CItemIcon() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_N2CItemIcon::getName() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return N2CItemIcon::getName();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_ItemModuleJNI, Swig::director_method_ids[19], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in N2CItemIcon::getName ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_N2CItemIcon::getIcon() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    return N2CItemIcon::getIcon();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_ItemModuleJNI, Swig::director_method_ids[20], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in N2CItemIcon::getIcon ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_N2CItemIcon::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static jclass baseclass = swig_new_global_ref(jenv, "com/hyh/jnitest/test/item/N2CItemIcon");
  if (!baseclass) return;
  static SwigDirectorMethod methods[] = {
    SwigDirectorMethod(jenv, baseclass, "getName", "()Ljava/lang/String;"),
    SwigDirectorMethod(jenv, baseclass, "getIcon", "()Ljava/lang/String;")
  };
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 2; ++i) {
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].name, methods[i].desc);
        swig_override[i] = methods[i].methid && (methid != methods[i].methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_new_1IItemIconVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< IItemIcon > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::shared_ptr< IItemIcon > > *)new std::vector< std::shared_ptr< IItemIcon > >();
  *(std::vector< std::shared_ptr< IItemIcon > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_new_1IItemIconVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< IItemIcon > > *arg1 = 0 ;
  std::vector< std::shared_ptr< IItemIcon > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< IItemIcon > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::shared_ptr< IItemIcon > > const & is null");
    return 0;
  } 
  result = (std::vector< std::shared_ptr< IItemIcon > > *)new std::vector< std::shared_ptr< IItemIcon > >((std::vector< std::shared_ptr< IItemIcon > > const &)*arg1);
  *(std::vector< std::shared_ptr< IItemIcon > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_IItemIconVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::shared_ptr< IItemIcon > > *arg1 = (std::vector< std::shared_ptr< IItemIcon > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< IItemIcon > > **)&jarg1; 
  result = (bool)((std::vector< std::shared_ptr< IItemIcon > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_IItemIconVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::shared_ptr< IItemIcon > > *arg1 = (std::vector< std::shared_ptr< IItemIcon > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< IItemIcon > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_new_1IItemIconVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  std::shared_ptr< IItemIcon > *arg2 = 0 ;
  std::vector< std::shared_ptr< IItemIcon > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  
  std::shared_ptr<IItemIcon> temp2;
  arg2 = &temp2;
  std::shared_ptr<IItemIcon> *argp2 = *(std::shared_ptr<IItemIcon> **)&jarg2;
  if (argp2) {
    // 创建全局引用
    jobject globalRef = jenv->NewGlobalRef(jarg2_);
    // 创建新的 shared_ptr，使用自定义删除器
    *arg2 = std::shared_ptr<IItemIcon>(argp2->get(), [globalRef](IItemIcon* ptr) {
      JNIEnv *env = nullptr;
        JNIContext context(env);
        // 删除全局引用
        env->DeleteGlobalRef(globalRef);
      });
  }
  
  try {
    result = (std::vector< std::shared_ptr< IItemIcon > > *)new_std_vector_Sl_std_shared_ptr_Sl_IItemIcon_Sg__Sg___SWIG_2(SWIG_STD_MOVE(arg1),(std::shared_ptr< IItemIcon > const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::shared_ptr< IItemIcon > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_IItemIconVector_1doCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< std::shared_ptr< IItemIcon > > *arg1 = (std::vector< std::shared_ptr< IItemIcon > > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< IItemIcon > > **)&jarg1; 
  try {
    result = std_vector_Sl_std_shared_ptr_Sl_IItemIcon_Sg__Sg__doCapacity(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_IItemIconVector_1doReserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< std::shared_ptr< IItemIcon > > *arg1 = (std::vector< std::shared_ptr< IItemIcon > > *) 0 ;
  jint arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< IItemIcon > > **)&jarg1; 
  arg2 = jarg2; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_IItemIcon_Sg__Sg__doReserve(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jint JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_IItemIconVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< std::shared_ptr< IItemIcon > > *arg1 = (std::vector< std::shared_ptr< IItemIcon > > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< IItemIcon > > **)&jarg1; 
  try {
    result = std_vector_Sl_std_shared_ptr_Sl_IItemIcon_Sg__Sg__doSize((std::vector< std::shared_ptr< IItemIcon > > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_IItemIconVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::shared_ptr< IItemIcon > > *arg1 = (std::vector< std::shared_ptr< IItemIcon > > *) 0 ;
  std::vector< std::shared_ptr< IItemIcon > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::shared_ptr< IItemIcon > > **)&jarg1; 
  
  std::shared_ptr<IItemIcon> temp2;
  arg2 = &temp2;
  std::shared_ptr<IItemIcon> *argp2 = *(std::shared_ptr<IItemIcon> **)&jarg2;
  if (argp2) {
    // 创建全局引用
    jobject globalRef = jenv->NewGlobalRef(jarg2_);
    // 创建新的 shared_ptr，使用自定义删除器
    *arg2 = std::shared_ptr<IItemIcon>(argp2->get(), [globalRef](IItemIcon* ptr) {
      JNIEnv *env = nullptr;
        JNIContext context(env);
        // 删除全局引用
        env->DeleteGlobalRef(globalRef);
      });
  }
  
  std_vector_Sl_std_shared_ptr_Sl_IItemIcon_Sg__Sg__doAdd__SWIG_0(arg1,(std::shared_ptr< IItemIcon > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_IItemIconVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::shared_ptr< IItemIcon > > *arg1 = (std::vector< std::shared_ptr< IItemIcon > > *) 0 ;
  jint arg2 ;
  std::vector< std::shared_ptr< IItemIcon > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::shared_ptr< IItemIcon > > **)&jarg1; 
  arg2 = jarg2; 
  
  std::shared_ptr<IItemIcon> temp3;
  arg3 = &temp3;
  std::shared_ptr<IItemIcon> *argp3 = *(std::shared_ptr<IItemIcon> **)&jarg3;
  if (argp3) {
    // 创建全局引用
    jobject globalRef = jenv->NewGlobalRef(jarg3_);
    // 创建新的 shared_ptr，使用自定义删除器
    *arg3 = std::shared_ptr<IItemIcon>(argp3->get(), [globalRef](IItemIcon* ptr) {
      JNIEnv *env = nullptr;
        JNIContext context(env);
        // 删除全局引用
        env->DeleteGlobalRef(globalRef);
      });
  }
  
  try {
    std_vector_Sl_std_shared_ptr_Sl_IItemIcon_Sg__Sg__doAdd__SWIG_1(arg1,SWIG_STD_MOVE(arg2),(std::shared_ptr< IItemIcon > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_IItemIconVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< IItemIcon > > *arg1 = (std::vector< std::shared_ptr< IItemIcon > > *) 0 ;
  jint arg2 ;
  std::vector< std::shared_ptr< IItemIcon > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< IItemIcon > > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_std_shared_ptr_Sl_IItemIcon_Sg__Sg__doRemove(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::shared_ptr< IItemIcon > >::value_type **)&jresult = result ? new std::vector< std::shared_ptr< IItemIcon > >::value_type(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_IItemIconVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< IItemIcon > > *arg1 = (std::vector< std::shared_ptr< IItemIcon > > *) 0 ;
  jint arg2 ;
  std::vector< std::shared_ptr< IItemIcon > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< IItemIcon > > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< std::shared_ptr< IItemIcon > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_IItemIcon_Sg__Sg__doGet(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::shared_ptr< IItemIcon > >::value_type **)&jresult = *result ? new std::vector< std::shared_ptr< IItemIcon > >::value_type(*result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_IItemIconVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< IItemIcon > > *arg1 = (std::vector< std::shared_ptr< IItemIcon > > *) 0 ;
  jint arg2 ;
  std::vector< std::shared_ptr< IItemIcon > >::value_type *arg3 = 0 ;
  std::vector< std::shared_ptr< IItemIcon > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::shared_ptr< IItemIcon > > **)&jarg1; 
  arg2 = jarg2; 
  
  std::shared_ptr<IItemIcon> temp3;
  arg3 = &temp3;
  std::shared_ptr<IItemIcon> *argp3 = *(std::shared_ptr<IItemIcon> **)&jarg3;
  if (argp3) {
    // 创建全局引用
    jobject globalRef = jenv->NewGlobalRef(jarg3_);
    // 创建新的 shared_ptr，使用自定义删除器
    *arg3 = std::shared_ptr<IItemIcon>(argp3->get(), [globalRef](IItemIcon* ptr) {
      JNIEnv *env = nullptr;
        JNIContext context(env);
        // 删除全局引用
        env->DeleteGlobalRef(globalRef);
      });
  }
  
  try {
    result = std_vector_Sl_std_shared_ptr_Sl_IItemIcon_Sg__Sg__doSet(arg1,SWIG_STD_MOVE(arg2),(std::shared_ptr< IItemIcon > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::shared_ptr< IItemIcon > >::value_type **)&jresult = result ? new std::vector< std::shared_ptr< IItemIcon > >::value_type(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_IItemIconVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< std::shared_ptr< IItemIcon > > *arg1 = (std::vector< std::shared_ptr< IItemIcon > > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< IItemIcon > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_IItemIcon_Sg__Sg__doRemoveRange(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_delete_1IItemIconVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::shared_ptr< IItemIcon > > *arg1 = (std::vector< std::shared_ptr< IItemIcon > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::shared_ptr< IItemIcon > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_delete_1IItemIcon(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  IItemIcon *arg1 = (IItemIcon *) 0 ;
  std::shared_ptr< IItemIcon > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  IItemIcon > **)&jarg1;
  arg1 = (IItemIcon *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jstring JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_IItemIcon_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  IItemIcon *arg1 = (IItemIcon *) 0 ;
  std::shared_ptr< IItemIcon > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  IItemIcon > **)&jarg1;
  arg1 = (IItemIcon *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_IItemIcon_1getIcon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  IItemIcon *arg1 = (IItemIcon *) 0 ;
  std::shared_ptr< IItemIcon > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  IItemIcon > **)&jarg1;
  arg1 = (IItemIcon *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getIcon();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_new_1IItemIcon(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  IItemIcon *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (IItemIcon *)new SwigDirector_IItemIcon(jenv);
  
  *(std::shared_ptr<  IItemIcon > **)&jresult = result ? new std::shared_ptr<  IItemIcon >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_IItemIcon_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< IItemIcon > *obj = *((std::shared_ptr< IItemIcon > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_IItemIcon *director = static_cast<SwigDirector_IItemIcon *>(obj->operator->());
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_IItemIcon_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  std::shared_ptr< IItemIcon > *obj = *((std::shared_ptr< IItemIcon > **)&objarg);
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_IItemIcon *director = dynamic_cast<SwigDirector_IItemIcon *>(obj->operator->());
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_delete_1ITestItem(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ITestItem *arg1 = (ITestItem *) 0 ;
  std::shared_ptr< ITestItem > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  ITestItem > **)&jarg1;
  arg1 = (ITestItem *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jstring JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_ITestItem_1getId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ITestItem *arg1 = (ITestItem *) 0 ;
  std::shared_ptr< ITestItem > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  ITestItem > **)&jarg1;
  arg1 = (ITestItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getId();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_ITestItem_1getTitle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ITestItem *arg1 = (ITestItem *) 0 ;
  std::shared_ptr< ITestItem > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  ITestItem > **)&jarg1;
  arg1 = (ITestItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getTitle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_ITestItem_1getEnvelopePic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ITestItem *arg1 = (ITestItem *) 0 ;
  std::shared_ptr< ITestItem > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  ITestItem > **)&jarg1;
  arg1 = (ITestItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getEnvelopePic();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_ITestItem_1getDesc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ITestItem *arg1 = (ITestItem *) 0 ;
  std::shared_ptr< ITestItem > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  ITestItem > **)&jarg1;
  arg1 = (ITestItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getDesc();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_ITestItem_1getNiceDate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ITestItem *arg1 = (ITestItem *) 0 ;
  std::shared_ptr< ITestItem > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  ITestItem > **)&jarg1;
  arg1 = (ITestItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getNiceDate();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_ITestItem_1getAuthor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ITestItem *arg1 = (ITestItem *) 0 ;
  std::shared_ptr< ITestItem > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  ITestItem > **)&jarg1;
  arg1 = (ITestItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getAuthor();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_ITestItem_1getTags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ITestItem *arg1 = (ITestItem *) 0 ;
  std::shared_ptr< ITestItem > *smartarg1 = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  ITestItem > **)&jarg1;
  arg1 = (ITestItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getTags();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_ITestItem_1getIcons(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ITestItem *arg1 = (ITestItem *) 0 ;
  std::shared_ptr< ITestItem > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< IItemIcon > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  ITestItem > **)&jarg1;
  arg1 = (ITestItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getIcons();
  *(std::vector< std::shared_ptr< IItemIcon > > **)&jresult = new std::vector< std::shared_ptr< IItemIcon > >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_new_1ITestItem(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ITestItem *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ITestItem *)new SwigDirector_ITestItem(jenv);
  
  *(std::shared_ptr<  ITestItem > **)&jresult = result ? new std::shared_ptr<  ITestItem >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_ITestItem_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< ITestItem > *obj = *((std::shared_ptr< ITestItem > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_ITestItem *director = static_cast<SwigDirector_ITestItem *>(obj->operator->());
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_ITestItem_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  std::shared_ptr< ITestItem > *obj = *((std::shared_ptr< ITestItem > **)&objarg);
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_ITestItem *director = dynamic_cast<SwigDirector_ITestItem *>(obj->operator->());
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_delete_1IC2NTestItemFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  IC2NTestItemFactory *arg1 = (IC2NTestItemFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(IC2NTestItemFactory **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_IC2NTestItemFactory_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  IC2NTestItemFactory *arg1 = (IC2NTestItemFactory *) 0 ;
  int arg2 ;
  std::shared_ptr< ITestItem > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IC2NTestItemFactory **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->create(arg2);
  
  if (result) {
    auto *result_ptr = dynamic_cast<Swig::Director*>((&result)->get());
    if (result_ptr) {
      jobject result_jobj = result_ptr->swig_get_self(jenv);
      if (result_jobj) {
        *((SwigDirectorWrapper **)&jresult) = new SwigDirectorWrapper(jenv, result_jobj);
      } else {
        *((SwigDirectorWrapper **)&jresult) = new SwigDirectorWrapper(new std::shared_ptr<ITestItem>(result));
      }
    } else {
      *((SwigDirectorWrapper **)&jresult) = new SwigDirectorWrapper(new std::shared_ptr<ITestItem>(result));
    }
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_new_1IC2NTestItemFactory(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  IC2NTestItemFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (IC2NTestItemFactory *)new SwigDirector_IC2NTestItemFactory(jenv);
  *(IC2NTestItemFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_IC2NTestItemFactory_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  IC2NTestItemFactory *obj = *((IC2NTestItemFactory **)&objarg);
  (void)jcls;
  SwigDirector_IC2NTestItemFactory *director = static_cast<SwigDirector_IC2NTestItemFactory *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_IC2NTestItemFactory_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  IC2NTestItemFactory *obj = *((IC2NTestItemFactory **)&objarg);
  SwigDirector_IC2NTestItemFactory *director = dynamic_cast<SwigDirector_IC2NTestItemFactory *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_C2NTestItemFactory_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  IC2NTestItemFactory *arg1 = (IC2NTestItemFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IC2NTestItemFactory **)&jarg1; 
  C2NTestItemFactory::init(arg1);
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_C2NTestItemFactory_1create(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  std::shared_ptr< ITestItem > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = C2NTestItemFactory::create(arg1);
  
  if (result) {
    auto *result_ptr = dynamic_cast<Swig::Director*>((&result)->get());
    if (result_ptr) {
      jobject result_jobj = result_ptr->swig_get_self(jenv);
      if (result_jobj) {
        *((SwigDirectorWrapper **)&jresult) = new SwigDirectorWrapper(jenv, result_jobj);
      } else {
        *((SwigDirectorWrapper **)&jresult) = new SwigDirectorWrapper(new std::shared_ptr<ITestItem>(result));
      }
    } else {
      *((SwigDirectorWrapper **)&jresult) = new SwigDirectorWrapper(new std::shared_ptr<ITestItem>(result));
    }
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_new_1C2NTestItemFactory(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  C2NTestItemFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (C2NTestItemFactory *)new C2NTestItemFactory();
  *(C2NTestItemFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_delete_1C2NTestItemFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  C2NTestItemFactory *arg1 = (C2NTestItemFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(C2NTestItemFactory **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_new_1N2CTestItem(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  N2CTestItem *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (N2CTestItem *)new SwigDirector_N2CTestItem(jenv,arg1);
  
  *(std::shared_ptr<  N2CTestItem > **)&jresult = result ? new std::shared_ptr<  N2CTestItem >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_delete_1N2CTestItem(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  N2CTestItem *arg1 = (N2CTestItem *) 0 ;
  std::shared_ptr< N2CTestItem > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  N2CTestItem > **)&jarg1;
  arg1 = (N2CTestItem *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jstring JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_N2CTestItem_1getId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  N2CTestItem *arg1 = (N2CTestItem *) 0 ;
  std::shared_ptr< N2CTestItem > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  N2CTestItem > **)&jarg1;
  arg1 = (N2CTestItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getId();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_N2CTestItem_1getIdSwigExplicitN2CTestItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  N2CTestItem *arg1 = (N2CTestItem *) 0 ;
  std::shared_ptr< N2CTestItem > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  N2CTestItem > **)&jarg1;
  arg1 = (N2CTestItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->N2CTestItem::getId();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_N2CTestItem_1getTitle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  N2CTestItem *arg1 = (N2CTestItem *) 0 ;
  std::shared_ptr< N2CTestItem > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  N2CTestItem > **)&jarg1;
  arg1 = (N2CTestItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getTitle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_N2CTestItem_1getTitleSwigExplicitN2CTestItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  N2CTestItem *arg1 = (N2CTestItem *) 0 ;
  std::shared_ptr< N2CTestItem > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  N2CTestItem > **)&jarg1;
  arg1 = (N2CTestItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->N2CTestItem::getTitle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_N2CTestItem_1getEnvelopePic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  N2CTestItem *arg1 = (N2CTestItem *) 0 ;
  std::shared_ptr< N2CTestItem > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  N2CTestItem > **)&jarg1;
  arg1 = (N2CTestItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getEnvelopePic();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_N2CTestItem_1getEnvelopePicSwigExplicitN2CTestItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  N2CTestItem *arg1 = (N2CTestItem *) 0 ;
  std::shared_ptr< N2CTestItem > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  N2CTestItem > **)&jarg1;
  arg1 = (N2CTestItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->N2CTestItem::getEnvelopePic();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_N2CTestItem_1getDesc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  N2CTestItem *arg1 = (N2CTestItem *) 0 ;
  std::shared_ptr< N2CTestItem > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  N2CTestItem > **)&jarg1;
  arg1 = (N2CTestItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getDesc();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_N2CTestItem_1getDescSwigExplicitN2CTestItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  N2CTestItem *arg1 = (N2CTestItem *) 0 ;
  std::shared_ptr< N2CTestItem > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  N2CTestItem > **)&jarg1;
  arg1 = (N2CTestItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->N2CTestItem::getDesc();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_N2CTestItem_1getNiceDate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  N2CTestItem *arg1 = (N2CTestItem *) 0 ;
  std::shared_ptr< N2CTestItem > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  N2CTestItem > **)&jarg1;
  arg1 = (N2CTestItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getNiceDate();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_N2CTestItem_1getNiceDateSwigExplicitN2CTestItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  N2CTestItem *arg1 = (N2CTestItem *) 0 ;
  std::shared_ptr< N2CTestItem > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  N2CTestItem > **)&jarg1;
  arg1 = (N2CTestItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->N2CTestItem::getNiceDate();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_N2CTestItem_1getAuthor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  N2CTestItem *arg1 = (N2CTestItem *) 0 ;
  std::shared_ptr< N2CTestItem > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  N2CTestItem > **)&jarg1;
  arg1 = (N2CTestItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getAuthor();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_N2CTestItem_1getAuthorSwigExplicitN2CTestItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  N2CTestItem *arg1 = (N2CTestItem *) 0 ;
  std::shared_ptr< N2CTestItem > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  N2CTestItem > **)&jarg1;
  arg1 = (N2CTestItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->N2CTestItem::getAuthor();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_N2CTestItem_1getTags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  N2CTestItem *arg1 = (N2CTestItem *) 0 ;
  std::shared_ptr< N2CTestItem > *smartarg1 = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  N2CTestItem > **)&jarg1;
  arg1 = (N2CTestItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getTags();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_N2CTestItem_1getTagsSwigExplicitN2CTestItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  N2CTestItem *arg1 = (N2CTestItem *) 0 ;
  std::shared_ptr< N2CTestItem > *smartarg1 = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  N2CTestItem > **)&jarg1;
  arg1 = (N2CTestItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->N2CTestItem::getTags();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_N2CTestItem_1getIcons(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  N2CTestItem *arg1 = (N2CTestItem *) 0 ;
  std::shared_ptr< N2CTestItem > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< IItemIcon > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  N2CTestItem > **)&jarg1;
  arg1 = (N2CTestItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getIcons();
  *(std::vector< std::shared_ptr< IItemIcon > > **)&jresult = new std::vector< std::shared_ptr< IItemIcon > >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_N2CTestItem_1getIconsSwigExplicitN2CTestItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  N2CTestItem *arg1 = (N2CTestItem *) 0 ;
  std::shared_ptr< N2CTestItem > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< IItemIcon > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  N2CTestItem > **)&jarg1;
  arg1 = (N2CTestItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->N2CTestItem::getIcons();
  *(std::vector< std::shared_ptr< IItemIcon > > **)&jresult = new std::vector< std::shared_ptr< IItemIcon > >(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_N2CTestItem_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< N2CTestItem > *obj = *((std::shared_ptr< N2CTestItem > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_N2CTestItem *director = static_cast<SwigDirector_N2CTestItem *>(obj->operator->());
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_N2CTestItem_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  std::shared_ptr< N2CTestItem > *obj = *((std::shared_ptr< N2CTestItem > **)&objarg);
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_N2CTestItem *director = dynamic_cast<SwigDirector_N2CTestItem *>(obj->operator->());
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_new_1N2CItemIcon(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  N2CItemIcon *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (N2CItemIcon *)new SwigDirector_N2CItemIcon(jenv,arg1);
  
  *(std::shared_ptr<  N2CItemIcon > **)&jresult = result ? new std::shared_ptr<  N2CItemIcon >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_N2CItemIcon_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  N2CItemIcon *arg1 = (N2CItemIcon *) 0 ;
  std::shared_ptr< N2CItemIcon > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  N2CItemIcon > **)&jarg1;
  arg1 = (N2CItemIcon *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_N2CItemIcon_1getNameSwigExplicitN2CItemIcon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  N2CItemIcon *arg1 = (N2CItemIcon *) 0 ;
  std::shared_ptr< N2CItemIcon > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  N2CItemIcon > **)&jarg1;
  arg1 = (N2CItemIcon *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->N2CItemIcon::getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_N2CItemIcon_1getIcon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  N2CItemIcon *arg1 = (N2CItemIcon *) 0 ;
  std::shared_ptr< N2CItemIcon > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  N2CItemIcon > **)&jarg1;
  arg1 = (N2CItemIcon *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getIcon();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_N2CItemIcon_1getIconSwigExplicitN2CItemIcon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  N2CItemIcon *arg1 = (N2CItemIcon *) 0 ;
  std::shared_ptr< N2CItemIcon > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  N2CItemIcon > **)&jarg1;
  arg1 = (N2CItemIcon *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->N2CItemIcon::getIcon();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_delete_1N2CItemIcon(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  N2CItemIcon *arg1 = (N2CItemIcon *) 0 ;
  std::shared_ptr< N2CItemIcon > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  N2CItemIcon > **)&jarg1;
  arg1 = (N2CItemIcon *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_N2CItemIcon_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< N2CItemIcon > *obj = *((std::shared_ptr< N2CItemIcon > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_N2CItemIcon *director = static_cast<SwigDirector_N2CItemIcon *>(obj->operator->());
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_N2CItemIcon_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  std::shared_ptr< N2CItemIcon > *obj = *((std::shared_ptr< N2CItemIcon > **)&objarg);
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_N2CItemIcon *director = dynamic_cast<SwigDirector_N2CItemIcon *>(obj->operator->());
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_N2CTestItem_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< N2CTestItem > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< N2CTestItem > **)&jarg1;
    *(std::shared_ptr< ITestItem > **)&baseptr = argp1 ? new std::shared_ptr< ITestItem >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_N2CItemIcon_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< N2CItemIcon > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< N2CItemIcon > **)&jarg1;
    *(std::shared_ptr< IItemIcon > **)&baseptr = argp1 ? new std::shared_ptr< IItemIcon >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT void JNICALL Java_com_hyh_jnitest_test_item_ItemModuleJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[21] = {
    {
      "SwigDirector_IItemIcon_getName", "(Lcom/hyh/jnitest/test/item/IItemIcon;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_IItemIcon_getIcon", "(Lcom/hyh/jnitest/test/item/IItemIcon;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_ITestItem_getId", "(Lcom/hyh/jnitest/test/item/ITestItem;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_ITestItem_getTitle", "(Lcom/hyh/jnitest/test/item/ITestItem;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_ITestItem_getEnvelopePic", "(Lcom/hyh/jnitest/test/item/ITestItem;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_ITestItem_getDesc", "(Lcom/hyh/jnitest/test/item/ITestItem;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_ITestItem_getNiceDate", "(Lcom/hyh/jnitest/test/item/ITestItem;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_ITestItem_getAuthor", "(Lcom/hyh/jnitest/test/item/ITestItem;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_ITestItem_getTags", "(Lcom/hyh/jnitest/test/item/ITestItem;)J" 
    },
    {
      "SwigDirector_ITestItem_getIcons", "(Lcom/hyh/jnitest/test/item/ITestItem;)J" 
    },
    {
      "SwigDirector_IC2NTestItemFactory_create", "(Lcom/hyh/jnitest/test/item/IC2NTestItemFactory;I)J" 
    },
    {
      "SwigDirector_N2CTestItem_getId", "(Lcom/hyh/jnitest/test/item/N2CTestItem;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_N2CTestItem_getTitle", "(Lcom/hyh/jnitest/test/item/N2CTestItem;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_N2CTestItem_getEnvelopePic", "(Lcom/hyh/jnitest/test/item/N2CTestItem;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_N2CTestItem_getDesc", "(Lcom/hyh/jnitest/test/item/N2CTestItem;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_N2CTestItem_getNiceDate", "(Lcom/hyh/jnitest/test/item/N2CTestItem;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_N2CTestItem_getAuthor", "(Lcom/hyh/jnitest/test/item/N2CTestItem;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_N2CTestItem_getTags", "(Lcom/hyh/jnitest/test/item/N2CTestItem;)J" 
    },
    {
      "SwigDirector_N2CTestItem_getIcons", "(Lcom/hyh/jnitest/test/item/N2CTestItem;)J" 
    },
    {
      "SwigDirector_N2CItemIcon_getName", "(Lcom/hyh/jnitest/test/item/N2CItemIcon;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_N2CItemIcon_getIcon", "(Lcom/hyh/jnitest/test/item/N2CItemIcon;)Ljava/lang/String;" 
    }
  };
  Swig::jclass_ItemModuleJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_ItemModuleJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_method_ids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_method_ids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

