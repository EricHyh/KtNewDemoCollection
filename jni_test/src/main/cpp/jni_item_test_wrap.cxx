/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.3.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040300
#define SWIGJAVA
#define SWIG_DIRECTORS

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 *
 * Note that SWIG expects __cplusplus to be defined to the appropriate C++ standard.
 * MSVC users are urged to check and examine the /Zc:__cplusplus compiler option.
 * See https://learn.microsoft.com/en-us/cpp/build/reference/zc-cplusplus.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif


#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } } while (0)

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Java proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED) || defined(DEBUG_DIRECTOR_EXCEPTION) || defined(DEBUG_DIRECTOR_THREAD_NAME)
#include <iostream>
#endif

#include <exception>

#if defined(SWIG_JAVA_USE_THREAD_NAME)

#if !defined(SWIG_JAVA_GET_THREAD_NAME)
namespace Swig {
  SWIGINTERN int GetThreadName(char *name, size_t len);
}

#if defined(__linux__)

#include <sys/prctl.h>
SWIGINTERN int Swig::GetThreadName(char *name, size_t len) {
  (void)len;
#if defined(PR_GET_NAME)
  return prctl(PR_GET_NAME, (unsigned long)name, 0, 0, 0);
#else
  (void)name;
  return 1;
#endif
}

#elif defined(__unix__) || defined(__APPLE__)

#include <pthread.h>
SWIGINTERN int Swig::GetThreadName(char *name, size_t len) {
  return pthread_getname_np(pthread_self(), name, len);
}

#else

SWIGINTERN int Swig::GetThreadName(char *name, size_t len) {
  (void)len;
  (void)name;
  return 1;
}
#endif

#endif

#endif

#if defined(SWIG_JAVA_DETACH_ON_THREAD_END)
#include <pthread.h>
#endif

namespace Swig {

  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(SWIG_NULLPTR), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = SWIG_NULLPTR;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, SWIG_NULLPTR) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = SWIG_NULLPTR;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else {
	/* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

#if defined(SWIG_JAVA_DETACH_ON_THREAD_END)
    static void detach(void *jvm) {
      static_cast<JavaVM *>(jvm)->DetachCurrentThread();
    }

    static void make_detach_key() {
      pthread_key_create(&detach_key_, detach);
    }

    /* thread-local key to register a destructor */
    static pthread_key_t detach_key_;
#endif

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

#if defined(SWIG_JAVA_DETACH_ON_THREAD_END)
  pthread_key_t JObjectWrapper::detach_key_;
#endif

  /* Local JNI reference deleter */
  class LocalRefGuard {
    JNIEnv *jenv_;
    jobject jobj_;

    // non-copyable
    LocalRefGuard(const LocalRefGuard &);
    LocalRefGuard &operator=(const LocalRefGuard &);
  public:
    LocalRefGuard(JNIEnv *jenv, jobject jobj): jenv_(jenv), jobj_(jobj) {}
    ~LocalRefGuard() {
      if (jobj_)
        jenv_->DeleteLocalRef(jobj_);
    }
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(SWIG_NULLPTR), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
        JavaVMAttachArgs args;
        args.version = JNI_VERSION_1_2;
        args.group = SWIG_NULLPTR;
        args.name = SWIG_NULLPTR;
#if defined(SWIG_JAVA_USE_THREAD_NAME)
        char thread_name[64];  // MAX_TASK_COMM_LEN=16 is hard-coded in the Linux kernel and MacOS has MAXTHREADNAMESIZE=64.
        if (Swig::GetThreadName(thread_name, sizeof(thread_name)) == 0) {
          args.name = thread_name;
#if defined(DEBUG_DIRECTOR_THREAD_NAME)
          std::cout << "JNIEnvWrapper: thread name: " << thread_name << std::endl;
        } else {
          std::cout << "JNIEnvWrapper: Couldn't set Java thread name" << std::endl;
#endif
        }
#endif
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, &args);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, &args);
#endif

#if defined(SWIG_JAVA_DETACH_ON_THREAD_END)
        // At least on Android 6, detaching after every call causes a memory leak.
        // Instead, register a thread desructor and detach only when the thread ends.
        // See https://developer.android.com/training/articles/perf-jni#threads
        static pthread_once_t once = PTHREAD_ONCE_INIT;

        pthread_once(&once, JObjectWrapper::make_detach_key);
        pthread_setspecific(JObjectWrapper::detach_key_, director->swig_jvm_);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_DETACH_ON_THREAD_END) && !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    struct SwigDirectorMethod {
      const char *name;
      const char *desc;
      jmethodID methid;
      SwigDirectorMethod(JNIEnv *jenv, jclass baseclass, const char *name, const char *desc) : name(name), desc(desc) {
        methid = jenv->GetMethodID(baseclass, name, desc);
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
      LocalRefGuard ref_deleter(jenv, jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, SWIG_NULLPTR) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

    jclass swig_new_global_ref(JNIEnv *jenv, const char *classname) {
      jclass clz = jenv->FindClass(classname);
      return clz ? (jclass)jenv->NewGlobalRef(clz) : SWIG_NULLPTR;
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) SWIG_NULLPTR), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };

  // Zero initialized bool array
  template<size_t N> class BoolArray {
    bool array_[N];
  public:
    BoolArray() {
      memset(array_, 0, sizeof(array_));
    }
    bool& operator[](size_t n) {
      return array_[n];
    }
    bool operator[](size_t n) const {
      return array_[n];
    }
  };

  // Utility classes and functions for exception handling.

  // Simple holder for a Java string during exception handling, providing access to a c-style string
  class JavaString {
  public:
    JavaString(JNIEnv *jenv, jstring jstr) : jenv_(jenv), jstr_(jstr), cstr_(SWIG_NULLPTR) {
      if (jenv_ && jstr_)
	cstr_ = (const char *) jenv_->GetStringUTFChars(jstr_, SWIG_NULLPTR);
    }

    ~JavaString() {
      if (jenv_ && jstr_ && cstr_)
	jenv_->ReleaseStringUTFChars(jstr_, cstr_);
    }

    const char *c_str(const char *null_string = "null JavaString") const {
      return cstr_ ? cstr_ : null_string;
    }

  private:
    // non-copyable
    JavaString(const JavaString &);
    JavaString &operator=(const JavaString &);

    JNIEnv *jenv_;
    jstring jstr_;
    const char *cstr_;
  };

  // Helper class to extract the exception message from a Java throwable
  class JavaExceptionMessage {
  public:
    JavaExceptionMessage(JNIEnv *jenv, jthrowable throwable) : message_(jenv, exceptionMessageFromThrowable(jenv, throwable)) {
    }

    // Return a C string of the exception message in the jthrowable passed in the constructor
    // If no message is available, null_string is return instead
    const char *message(const char *null_string = "Could not get exception message in JavaExceptionMessage") const {
      return message_.c_str(null_string);
    }

  private:
    // non-copyable
    JavaExceptionMessage(const JavaExceptionMessage &);
    JavaExceptionMessage &operator=(const JavaExceptionMessage &);

    // Get exception message by calling Java method Throwable.getMessage()
    static jstring exceptionMessageFromThrowable(JNIEnv *jenv, jthrowable throwable) {
      jstring jmsg = SWIG_NULLPTR;
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  // All Throwable classes have a getMessage() method, so call it to extract the exception message
	  jmethodID getMessageMethodID = jenv->GetMethodID(throwclz, "getMessage", "()Ljava/lang/String;");
	  if (getMessageMethodID)
	    jmsg = (jstring)jenv->CallObjectMethod(throwable, getMessageMethodID);
	}
	if (jmsg == SWIG_NULLPTR && jenv->ExceptionCheck())
	  jenv->ExceptionClear();
      }
      return jmsg;
    }

    JavaString message_;
  };

  // C++ Exception class for handling Java exceptions thrown during a director method Java upcall
  class DirectorException : public std::exception {
  public:

    // Construct exception from a Java throwable
    DirectorException(JNIEnv *jenv, jthrowable throwable) : jenv_(jenv), throwable_(throwable), classname_(SWIG_NULLPTR), msg_(SWIG_NULLPTR) {

      // Call Java method Object.getClass().getName() to obtain the throwable's class name (delimited by '/')
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  jclass clzclz = jenv->GetObjectClass(throwclz);
	  if (clzclz) {
	    jmethodID getNameMethodID = jenv->GetMethodID(clzclz, "getName", "()Ljava/lang/String;");
	    if (getNameMethodID) {
	      jstring jstr_classname = (jstring)(jenv->CallObjectMethod(throwclz, getNameMethodID));
              // Copy strings, since there is no guarantee that jenv will be active when handled
              if (jstr_classname) {
                JavaString jsclassname(jenv, jstr_classname);
                const char *classname = jsclassname.c_str(SWIG_NULLPTR);
                if (classname)
                  classname_ = copypath(classname);
              }
	    }
	  }
	}
      }

      JavaExceptionMessage exceptionmsg(jenv, throwable);
      msg_ = copystr(exceptionmsg.message(SWIG_NULLPTR));
    }

    // More general constructor for handling as a java.lang.RuntimeException
    DirectorException(const char *msg) : jenv_(SWIG_NULLPTR), throwable_(SWIG_NULLPTR), classname_(SWIG_NULLPTR), msg_(msg ? copystr(msg) : SWIG_NULLPTR) {
    }

    ~DirectorException() throw() {
      delete[] classname_;
      delete[] msg_;
    }

    const char *what() const throw() {
      return msg_ ? msg_ : "Unspecified DirectorException message";
    }

    // Reconstruct and raise/throw the Java Exception that caused the DirectorException
    // Note that any error in the JNI exception handling results in a Java RuntimeException
    void throwException(JNIEnv *jenv) const {
      if (jenv) {
        if (jenv == jenv_ && throwable_) {
          // Throw original exception if not already pending
          jthrowable throwable = jenv->ExceptionOccurred();
          if (throwable && jenv->IsSameObject(throwable, throwable_) == JNI_FALSE) {
            jenv->ExceptionClear();
            throwable = SWIG_NULLPTR;
          }
          if (!throwable)
            jenv->Throw(throwable_);
        } else {
          // Try and reconstruct original exception, but original stacktrace is not reconstructed
          jenv->ExceptionClear();

          jmethodID ctorMethodID = SWIG_NULLPTR;
          jclass throwableclass = SWIG_NULLPTR;
          if (classname_) {
            throwableclass = jenv->FindClass(classname_);
            if (throwableclass)
              ctorMethodID = jenv->GetMethodID(throwableclass, "<init>", "(Ljava/lang/String;)V");
          }

          if (ctorMethodID) {
            jenv->ThrowNew(throwableclass, what());
          } else {
            SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, what());
          }
        }
      }
    }

    // Deprecated - use throwException
    void raiseJavaException(JNIEnv *jenv) const {
      throwException(jenv);
    }

    // Create and throw the DirectorException
    static void raise(JNIEnv *jenv, jthrowable throwable) {
      throw DirectorException(jenv, throwable);
    }

  private:
    static char *copypath(const char *srcmsg) {
      char *target = copystr(srcmsg);
      for (char *c=target; *c; ++c) {
        if ('.' == *c)
          *c = '/';
      }
      return target;
    }

    static char *copystr(const char *srcmsg) {
      char *target = SWIG_NULLPTR;
      if (srcmsg) {
	size_t msglen = strlen(srcmsg) + 1;
	target = new char[msglen];
	strncpy(target, srcmsg, msglen);
      }
      return target;
    }

    JNIEnv *jenv_;
    jthrowable throwable_;
    const char *classname_;
    const char *msg_;
  };

  // Helper method to determine if a Java throwable matches a particular Java class type
  // Note side effect of clearing any pending exceptions
  SWIGINTERN bool ExceptionMatches(JNIEnv *jenv, jthrowable throwable, const char *classname) {
    bool matches = false;

    if (throwable && jenv && classname) {
      // Exceptions need to be cleared for correct behavior.
      // The caller of ExceptionMatches should restore pending exceptions if desired -
      // the caller already has the throwable.
      jenv->ExceptionClear();

      jclass clz = jenv->FindClass(classname);
      if (clz) {
	jclass classclz = jenv->GetObjectClass(clz);
	jmethodID isInstanceMethodID = jenv->GetMethodID(classclz, "isInstance", "(Ljava/lang/Object;)Z");
	if (isInstanceMethodID) {
	  matches = jenv->CallBooleanMethod(clz, isInstanceMethodID, throwable) != 0;
	}
      }

#if defined(DEBUG_DIRECTOR_EXCEPTION)
      if (jenv->ExceptionCheck()) {
        // Typically occurs when an invalid classname argument is passed resulting in a ClassNotFoundException
        JavaExceptionMessage exc(jenv, jenv->ExceptionOccurred());
        std::cout << "Error: ExceptionMatches: class '" << classname << "' : " << exc.message() << std::endl;
      }
#endif
    }
    return matches;
  }
}

namespace Swig {
  namespace {
    jclass jclass_JNIItemTestJNI = NULL;
    jmethodID director_method_ids[31];
  }
}

#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#include <map>
#include <unordered_map>
#include <variant>
#include <memory>
#include <mutex>
#include <list>
#include <vector>
#include <functional>


#include "model/N2CTestItem.h"
#include "model/N2CItemIcon.h"
#include "observer/ObserverManager.h"

#include "model/TestItem.h"
#include "model/ItemIcon.h"

#include "color/TestColor.h"

#include "JNITestEntrance.h"
#include "JNIContext.h"



class SwigDirectorWrapper {
public:
    explicit SwigDirectorWrapper(JNIEnv *env, jobject obj)
            : m_data(std::make_unique<JNIGlobalRef>(env, obj)) {}

    explicit SwigDirectorWrapper(void *ptr) : m_data(ptr) {}

    ~SwigDirectorWrapper() = default;

    SwigDirectorWrapper(const SwigDirectorWrapper &) = delete;

    SwigDirectorWrapper &operator=(const SwigDirectorWrapper &) = delete;

    SwigDirectorWrapper(SwigDirectorWrapper &&) = default;

    SwigDirectorWrapper &operator=(SwigDirectorWrapper &&) = default;

    bool IsJObject() const noexcept {
        return std::holds_alternative<std::unique_ptr<JNIGlobalRef>>(m_data);
    }

    bool IsCPtr() const noexcept {
        return std::holds_alternative<void *>(m_data);
    }

    jobject GetJObject() const noexcept {
        if (auto jref = std::get_if<std::unique_ptr<JNIGlobalRef>>(&m_data)) {
            JNIEnv *env = nullptr;
            JNIContext context(env);
            return env->NewLocalRef((*jref)->get());
        }
        return nullptr;
    }

    uintptr_t GetCPtr() const noexcept {
        if (auto ptr = std::get_if<void *>(&m_data)) {
            return reinterpret_cast<uintptr_t>(*ptr);
        }
        return 0;
    }

private:
    std::variant<std::unique_ptr<JNIGlobalRef>, void *> m_data;
};



#include <memory>


/* Check for overflow converting to Java int (always signed 32-bit) from (unsigned variable-bit) size_t */
SWIGINTERN jint SWIG_JavaIntFromSize_t(size_t size) {
  static const jint JINT_MAX = 0x7FFFFFFF;
  return (size > (size_t)JINT_MAX) ? -1 : (jint)size;
}


SWIGINTERN jint SWIG_VectorSize(size_t size) {
  jint sz = SWIG_JavaIntFromSize_t(size);
  if (sz == -1)
    throw std::out_of_range("vector size is too large to fit into a Java int");
  return sz;
}

SWIGINTERN std::vector< std::string > *new_std_vector_Sl_std_string_Sg___SWIG_2(jint count,std::string const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< std::string >(static_cast<std::vector< std::string >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_std_string_Sg__doCapacity(std::vector< std::string > *self){
        return SWIG_VectorSize(self->capacity());
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__doReserve(std::vector< std::string > *self,jint n){
        if (n < 0)
          throw std::out_of_range("vector reserve size must be positive");
        self->reserve(n);
      }
SWIGINTERN jint std_vector_Sl_std_string_Sg__doSize(std::vector< std::string > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__doAdd__SWIG_0(std::vector< std::string > *self,std::vector< std::string >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__doAdd__SWIG_1(std::vector< std::string > *self,jint index,std::vector< std::string >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::string >::value_type std_vector_Sl_std_string_Sg__doRemove(std::vector< std::string > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          std::string const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::string >::value_type const &std_vector_Sl_std_string_Sg__doGet(std::vector< std::string > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< std::string >::value_type std_vector_Sl_std_string_Sg__doSet(std::vector< std::string > *self,jint index,std::vector< std::string >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          std::string const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__doRemoveRange(std::vector< std::string > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::shared_ptr< IItemIcon > > *new_std_vector_Sl_std_shared_ptr_Sl_IItemIcon_Sg__Sg___SWIG_2(jint count,std::shared_ptr< IItemIcon > const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< std::shared_ptr< IItemIcon > >(static_cast<std::vector< std::shared_ptr< IItemIcon > >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_std_shared_ptr_Sl_IItemIcon_Sg__Sg__doCapacity(std::vector< std::shared_ptr< IItemIcon > > *self){
        return SWIG_VectorSize(self->capacity());
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_IItemIcon_Sg__Sg__doReserve(std::vector< std::shared_ptr< IItemIcon > > *self,jint n){
        if (n < 0)
          throw std::out_of_range("vector reserve size must be positive");
        self->reserve(n);
      }
SWIGINTERN jint std_vector_Sl_std_shared_ptr_Sl_IItemIcon_Sg__Sg__doSize(std::vector< std::shared_ptr< IItemIcon > > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_IItemIcon_Sg__Sg__doAdd__SWIG_0(std::vector< std::shared_ptr< IItemIcon > > *self,std::vector< std::shared_ptr< IItemIcon > >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_IItemIcon_Sg__Sg__doAdd__SWIG_1(std::vector< std::shared_ptr< IItemIcon > > *self,jint index,std::vector< std::shared_ptr< IItemIcon > >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::shared_ptr< IItemIcon > >::value_type std_vector_Sl_std_shared_ptr_Sl_IItemIcon_Sg__Sg__doRemove(std::vector< std::shared_ptr< IItemIcon > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          std::shared_ptr< IItemIcon > const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::shared_ptr< IItemIcon > >::value_type const &std_vector_Sl_std_shared_ptr_Sl_IItemIcon_Sg__Sg__doGet(std::vector< std::shared_ptr< IItemIcon > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< std::shared_ptr< IItemIcon > >::value_type std_vector_Sl_std_shared_ptr_Sl_IItemIcon_Sg__Sg__doSet(std::vector< std::shared_ptr< IItemIcon > > *self,jint index,std::vector< std::shared_ptr< IItemIcon > >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          std::shared_ptr< IItemIcon > const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_IItemIcon_Sg__Sg__doRemoveRange(std::vector< std::shared_ptr< IItemIcon > > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }

class TestObserverBridge {

public:
    TestObserverBridge() = default;
    virtual ~TestObserverBridge() = default;

    virtual void onCall(const int &data) = 0;

    virtual int calculateHash() {
        return static_cast<int>(std::hash<const TestObserverBridge*>{}(this));
    }

    virtual bool isEquals(const TestObserverBridge& other) {
        return this == &other;
    }

    static std::shared_ptr<TestObserver> obtainOriginal(JNIEnv *jenv, std::shared_ptr<TestObserverBridge> *function_bridge, jobject j_function_bridge){
        std::lock_guard<std::mutex> lock(function_bridge->get()->m_mutex);
        if (auto original_ptr = function_bridge->get()->m_weakOriginal.lock()) {
            // 如果原始回调函数还存在，直接返回
            return original_ptr;
        }

        // 创建全局引用
        jobject globalRef = jenv->NewGlobalRef(j_function_bridge);
        // 创建新的 shared_ptr，使用自定义删除器
        std::shared_ptr<TestObserverBridge> new_function_bridge = std::shared_ptr<TestObserverBridge>(function_bridge->get(), [globalRef](TestObserverBridge* ptr) {
            JNIEnv *env = nullptr;
            JNIContext context(env);
            // 删除全局引用
            env->DeleteGlobalRef(globalRef);
        });

        std::shared_ptr<TestObserver> p_function = std::make_shared<TestObserver>([new_function_bridge](const int &data) -> void {
            return new_function_bridge->onCall(data);
        });

        new_function_bridge->m_weakOriginal = std::weak_ptr< TestObserver >(p_function);

        return p_function;
    }

private:
    std::mutex m_mutex;

    std::weak_ptr<TestObserver> m_weakOriginal;

};



struct SWIG_null_deleter {
  void operator() (void const *) const {
  }
};
#define SWIG_NO_NULL_DELETER_0 , SWIG_null_deleter()
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN



class TestObserverBridge4DI : public TestObserverBridge {

public:
    explicit TestObserverBridge4DI(TestObserver function) : m_original(std::move(function)) {}

    void onCall(const int &data) override {
        if (m_original) {
            return m_original(data);
        } else {
            JNIEnv* env;
            JNIContext context(env);
            SWIG_JavaThrowException(env, SWIG_JavaNullPointerException, "TestObserverBridge##4DI m_original is null");
            return m_original(data);
        }
    }

private:
    TestObserver m_original;
};

class SharedPtrTestObserverBridge4DI : public TestObserverBridge {

public:
    explicit SharedPtrTestObserverBridge4DI(const std::shared_ptr<TestObserver>& function) : m_original(function) {}

    void onCall(const int &data) override {
        if (m_original) {
            return m_original->operator()(data);
        } else {
            JNIEnv* env;
            JNIContext context(env);
            SWIG_JavaThrowException(env, SWIG_JavaNullPointerException, "SharedPtr##TestObserverBridge##4DI m_original is null");
            return m_original->operator()(data);
        }
    }

    int calculateHash() override {
        return static_cast<int>(std::hash<const TestObserver*>{}(this->m_original.get()));
    }

    bool isEquals(const TestObserverBridge& other) override {
        if (this == &other) {
            return true;
        }
        const auto* other_ptr = dynamic_cast<const SharedPtrTestObserverBridge4DI*>(&other);
        if(other_ptr == nullptr) {
            return false;
        }
        return this->m_original.get() == other_ptr->m_original.get();
    }

private:
    std::shared_ptr<TestObserver> m_original;
};


SWIGINTERN int ITestObserver2_calculateHash(ITestObserver2 const *self){
    return static_cast<int>(std::hash<const ITestObserver2*>{}(self));
  }
SWIGINTERN bool ITestObserver2_isEquals(ITestObserver2 const *self,ITestObserver2 const &other){
    return self == &other;
  }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "jni_item_test_wrap.h"

SwigDirector_TestObserverBridge::SwigDirector_TestObserverBridge(JNIEnv *jenv) : TestObserverBridge(), Swig::Director(jenv) {
}

SwigDirector_TestObserverBridge::~SwigDirector_TestObserverBridge() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_TestObserverBridge::onCall(int const &data) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jdata = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method TestObserverBridge::onCall.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jdata = (jint)data;
    jenv->CallStaticVoidMethod(Swig::jclass_JNIItemTestJNI, Swig::director_method_ids[0], swigjobj, jdata);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in TestObserverBridge::onCall ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_TestObserverBridge::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static jclass baseclass = swig_new_global_ref(jenv, "com/example/jni_test/model/TestObserverBridge");
  if (!baseclass) return;
  static SwigDirectorMethod methods[] = {
    SwigDirectorMethod(jenv, baseclass, "onCall", "(I)V")
  };
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].name, methods[i].desc);
        swig_override[i] = methods[i].methid && (methid != methods[i].methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_IItemIcon::SwigDirector_IItemIcon(JNIEnv *jenv) : IItemIcon(), Swig::Director(jenv) {
}

SwigDirector_IItemIcon::~SwigDirector_IItemIcon() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_IItemIcon::getName() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method IItemIcon::getName.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_JNIItemTestJNI, Swig::director_method_ids[1], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in IItemIcon::getName ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_IItemIcon::getIcon() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method IItemIcon::getIcon.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_JNIItemTestJNI, Swig::director_method_ids[2], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in IItemIcon::getIcon ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_IItemIcon::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static jclass baseclass = swig_new_global_ref(jenv, "com/example/jni_test/model/IItemIcon");
  if (!baseclass) return;
  static SwigDirectorMethod methods[] = {
    SwigDirectorMethod(jenv, baseclass, "getName", "()Ljava/lang/String;"),
    SwigDirectorMethod(jenv, baseclass, "getIcon", "()Ljava/lang/String;")
  };
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 2; ++i) {
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].name, methods[i].desc);
        swig_override[i] = methods[i].methid && (methid != methods[i].methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_ITestItem::SwigDirector_ITestItem(JNIEnv *jenv) : ITestItem(), Swig::Director(jenv) {
}

SwigDirector_ITestItem::~SwigDirector_ITestItem() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_ITestItem::getId() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ITestItem::getId.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_JNIItemTestJNI, Swig::director_method_ids[3], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ITestItem::getId ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_ITestItem::getTitle() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ITestItem::getTitle.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_JNIItemTestJNI, Swig::director_method_ids[4], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ITestItem::getTitle ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_ITestItem::getEnvelopePic() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ITestItem::getEnvelopePic.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_JNIItemTestJNI, Swig::director_method_ids[5], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ITestItem::getEnvelopePic ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_ITestItem::getDesc() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ITestItem::getDesc.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_JNIItemTestJNI, Swig::director_method_ids[6], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ITestItem::getDesc ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_ITestItem::getNiceDate() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[4]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ITestItem::getNiceDate.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_JNIItemTestJNI, Swig::director_method_ids[7], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ITestItem::getNiceDate ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_ITestItem::getAuthor() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[5]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ITestItem::getAuthor.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_JNIItemTestJNI, Swig::director_method_ids[8], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ITestItem::getAuthor ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::vector< std::string > SwigDirector_ITestItem::getTags() {
  std::vector< std::string > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::vector< std::string > *argp ;
  
  if (!swig_override[6]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ITestItem::getTags.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_JNIItemTestJNI, Swig::director_method_ids[9], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    argp = *(std::vector< std::string > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::vector< std::string >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ITestItem::getTags ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::vector< std::shared_ptr< IItemIcon > > SwigDirector_ITestItem::getIcons() {
  std::vector< std::shared_ptr< IItemIcon > > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::vector< std::shared_ptr< IItemIcon > > *argp ;
  
  if (!swig_override[7]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ITestItem::getIcons.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_JNIItemTestJNI, Swig::director_method_ids[10], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    argp = *(std::vector< std::shared_ptr< IItemIcon > > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::vector< std::shared_ptr< IItemIcon > >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ITestItem::getIcons ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ITestItem::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static jclass baseclass = swig_new_global_ref(jenv, "com/example/jni_test/model/ITestItem");
  if (!baseclass) return;
  static SwigDirectorMethod methods[] = {
    SwigDirectorMethod(jenv, baseclass, "getId", "()Ljava/lang/String;"),
    SwigDirectorMethod(jenv, baseclass, "getTitle", "()Ljava/lang/String;"),
    SwigDirectorMethod(jenv, baseclass, "getEnvelopePic", "()Ljava/lang/String;"),
    SwigDirectorMethod(jenv, baseclass, "getDesc", "()Ljava/lang/String;"),
    SwigDirectorMethod(jenv, baseclass, "getNiceDate", "()Ljava/lang/String;"),
    SwigDirectorMethod(jenv, baseclass, "getAuthor", "()Ljava/lang/String;"),
    SwigDirectorMethod(jenv, baseclass, "getTags", "()Lcom/example/jni_test/model/StringVector;"),
    SwigDirectorMethod(jenv, baseclass, "getIcons", "()Lcom/example/jni_test/model/IItemIconVector;")
  };
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 8; ++i) {
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].name, methods[i].desc);
        swig_override[i] = methods[i].methid && (methid != methods[i].methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_IC2NTestItemFactory::SwigDirector_IC2NTestItemFactory(JNIEnv *jenv) : IC2NTestItemFactory(), Swig::Director(jenv) {
}

SwigDirector_IC2NTestItemFactory::~SwigDirector_IC2NTestItemFactory() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::shared_ptr< ITestItem > SwigDirector_IC2NTestItemFactory::create(int index) {
  std::shared_ptr< ITestItem > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jindex  ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method IC2NTestItemFactory::create.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jindex = (jint) index;
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_JNIItemTestJNI, Swig::director_method_ids[11], swigjobj, jindex);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    
    if (jresult) {
      std::shared_ptr<ITestItem> *smartarg = *(std::shared_ptr<ITestItem> **)&jresult;
      auto *jresult_ptr = dynamic_cast<Swig::Director*>(smartarg->get());
      if (jresult_ptr) {
        jobject jobj = jresult_ptr->swig_get_self(jenv);
        // 创建全局引用
        jobject globalRef = jenv->NewGlobalRef(jobj);
        c_result = std::shared_ptr<ITestItem>(smartarg->get(), [globalRef](ITestItem* ptr) {
          JNIEnv *env = nullptr;
            JNIContext context(env);
            // 删除全局引用
            env->DeleteGlobalRef(globalRef);
          });
      } else {
        c_result = *smartarg;
      }
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in IC2NTestItemFactory::create ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_IC2NTestItemFactory::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static jclass baseclass = swig_new_global_ref(jenv, "com/example/jni_test/model/IC2NTestItemFactory");
  if (!baseclass) return;
  static SwigDirectorMethod methods[] = {
    SwigDirectorMethod(jenv, baseclass, "create", "(I)Lcom/example/jni_test/model/ITestItem;")
  };
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].name, methods[i].desc);
        swig_override[i] = methods[i].methid && (methid != methods[i].methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_N2CTestItem::SwigDirector_N2CTestItem(JNIEnv *jenv,int index) : N2CTestItem(index), Swig::Director(jenv) {
}

SwigDirector_N2CTestItem::~SwigDirector_N2CTestItem() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_N2CTestItem::getId() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return N2CTestItem::getId();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_JNIItemTestJNI, Swig::director_method_ids[12], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in N2CTestItem::getId ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_N2CTestItem::getTitle() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    return N2CTestItem::getTitle();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_JNIItemTestJNI, Swig::director_method_ids[13], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in N2CTestItem::getTitle ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_N2CTestItem::getEnvelopePic() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    return N2CTestItem::getEnvelopePic();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_JNIItemTestJNI, Swig::director_method_ids[14], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in N2CTestItem::getEnvelopePic ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_N2CTestItem::getDesc() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    return N2CTestItem::getDesc();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_JNIItemTestJNI, Swig::director_method_ids[15], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in N2CTestItem::getDesc ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_N2CTestItem::getNiceDate() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[4]) {
    return N2CTestItem::getNiceDate();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_JNIItemTestJNI, Swig::director_method_ids[16], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in N2CTestItem::getNiceDate ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_N2CTestItem::getAuthor() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[5]) {
    return N2CTestItem::getAuthor();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_JNIItemTestJNI, Swig::director_method_ids[17], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in N2CTestItem::getAuthor ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::vector< std::string > SwigDirector_N2CTestItem::getTags() {
  std::vector< std::string > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::vector< std::string > *argp ;
  
  if (!swig_override[6]) {
    return N2CTestItem::getTags();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_JNIItemTestJNI, Swig::director_method_ids[18], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    argp = *(std::vector< std::string > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::vector< std::string >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in N2CTestItem::getTags ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::vector< std::shared_ptr< IItemIcon > > SwigDirector_N2CTestItem::getIcons() {
  std::vector< std::shared_ptr< IItemIcon > > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::vector< std::shared_ptr< IItemIcon > > *argp ;
  
  if (!swig_override[7]) {
    return N2CTestItem::getIcons();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_JNIItemTestJNI, Swig::director_method_ids[19], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    argp = *(std::vector< std::shared_ptr< IItemIcon > > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::vector< std::shared_ptr< IItemIcon > >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in N2CTestItem::getIcons ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_N2CTestItem::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static jclass baseclass = swig_new_global_ref(jenv, "com/example/jni_test/model/N2CTestItem");
  if (!baseclass) return;
  static SwigDirectorMethod methods[] = {
    SwigDirectorMethod(jenv, baseclass, "getId", "()Ljava/lang/String;"),
    SwigDirectorMethod(jenv, baseclass, "getTitle", "()Ljava/lang/String;"),
    SwigDirectorMethod(jenv, baseclass, "getEnvelopePic", "()Ljava/lang/String;"),
    SwigDirectorMethod(jenv, baseclass, "getDesc", "()Ljava/lang/String;"),
    SwigDirectorMethod(jenv, baseclass, "getNiceDate", "()Ljava/lang/String;"),
    SwigDirectorMethod(jenv, baseclass, "getAuthor", "()Ljava/lang/String;"),
    SwigDirectorMethod(jenv, baseclass, "getTags", "()Lcom/example/jni_test/model/StringVector;"),
    SwigDirectorMethod(jenv, baseclass, "getIcons", "()Lcom/example/jni_test/model/IItemIconVector;")
  };
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 8; ++i) {
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].name, methods[i].desc);
        swig_override[i] = methods[i].methid && (methid != methods[i].methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_N2CItemIcon::SwigDirector_N2CItemIcon(JNIEnv *jenv,int index) : N2CItemIcon(index), Swig::Director(jenv) {
}

SwigDirector_N2CItemIcon::~SwigDirector_N2CItemIcon() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_N2CItemIcon::getName() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return N2CItemIcon::getName();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_JNIItemTestJNI, Swig::director_method_ids[20], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in N2CItemIcon::getName ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_N2CItemIcon::getIcon() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    return N2CItemIcon::getIcon();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_JNIItemTestJNI, Swig::director_method_ids[21], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in N2CItemIcon::getIcon ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_N2CItemIcon::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static jclass baseclass = swig_new_global_ref(jenv, "com/example/jni_test/model/N2CItemIcon");
  if (!baseclass) return;
  static SwigDirectorMethod methods[] = {
    SwigDirectorMethod(jenv, baseclass, "getName", "()Ljava/lang/String;"),
    SwigDirectorMethod(jenv, baseclass, "getIcon", "()Ljava/lang/String;")
  };
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 2; ++i) {
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].name, methods[i].desc);
        swig_override[i] = methods[i].methid && (methid != methods[i].methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_ITestColor::SwigDirector_ITestColor(JNIEnv *jenv) : ITestColor(), Swig::Director(jenv) {
}

SwigDirector_ITestColor::~SwigDirector_ITestColor() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


int SwigDirector_ITestColor::getRandomColor() {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ITestColor::getRandomColor.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_JNIItemTestJNI, Swig::director_method_ids[22], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ITestColor::getRandomColor ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_ITestColor::add(std::string a,std::string b) {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring ja  ;
  jstring jb  ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ITestColor::add.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ja = jenv->NewStringUTF((&a)->c_str());
    Swig::LocalRefGuard a_refguard(jenv, ja); 
    jb = jenv->NewStringUTF((&b)->c_str());
    Swig::LocalRefGuard b_refguard(jenv, jb); 
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_JNIItemTestJNI, Swig::director_method_ids[23], swigjobj, ja, jb);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ITestColor::add ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ITestColor::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static jclass baseclass = swig_new_global_ref(jenv, "com/example/jni_test/model/ITestColor");
  if (!baseclass) return;
  static SwigDirectorMethod methods[] = {
    SwigDirectorMethod(jenv, baseclass, "getRandomColor", "()I"),
    SwigDirectorMethod(jenv, baseclass, "add", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;")
  };
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 2; ++i) {
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].name, methods[i].desc);
        swig_override[i] = methods[i].methid && (methid != methods[i].methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_N2CTestColor::SwigDirector_N2CTestColor(JNIEnv *jenv) : N2CTestColor(), Swig::Director(jenv) {
}

SwigDirector_N2CTestColor::~SwigDirector_N2CTestColor() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


int SwigDirector_N2CTestColor::getRandomColor() {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return N2CTestColor::getRandomColor();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_JNIItemTestJNI, Swig::director_method_ids[24], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in N2CTestColor::getRandomColor ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_N2CTestColor::add(std::string a,std::string b) {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring ja  ;
  jstring jb  ;
  
  if (!swig_override[1]) {
    return N2CTestColor::add(a,b);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ja = jenv->NewStringUTF((&a)->c_str());
    Swig::LocalRefGuard a_refguard(jenv, ja); 
    jb = jenv->NewStringUTF((&b)->c_str());
    Swig::LocalRefGuard b_refguard(jenv, jb); 
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_JNIItemTestJNI, Swig::director_method_ids[25], swigjobj, ja, jb);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in N2CTestColor::add ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_N2CTestColor::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static jclass baseclass = swig_new_global_ref(jenv, "com/example/jni_test/model/N2CTestColor");
  if (!baseclass) return;
  static SwigDirectorMethod methods[] = {
    SwigDirectorMethod(jenv, baseclass, "getRandomColor", "()I"),
    SwigDirectorMethod(jenv, baseclass, "add", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;")
  };
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 2; ++i) {
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].name, methods[i].desc);
        swig_override[i] = methods[i].methid && (methid != methods[i].methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_ITestObserver2Bridge::SwigDirector_ITestObserver2Bridge(JNIEnv *jenv) : ITestObserver2(), Swig::Director(jenv) {
}

SwigDirector_ITestObserver2Bridge::~SwigDirector_ITestObserver2Bridge() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_ITestObserver2Bridge::onCall(int const &data) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jdata = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ITestObserver2::onCall.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jdata = (jint)data;
    jenv->CallStaticVoidMethod(Swig::jclass_JNIItemTestJNI, Swig::director_method_ids[26], swigjobj, jdata);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ITestObserver2::onCall ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ITestObserver2Bridge::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static jclass baseclass = swig_new_global_ref(jenv, "com/example/jni_test/model/ITestObserver2Bridge");
  if (!baseclass) return;
  static SwigDirectorMethod methods[] = {
    SwigDirectorMethod(jenv, baseclass, "onCall", "(I)V")
  };
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].name, methods[i].desc);
        swig_override[i] = methods[i].methid && (methid != methods[i].methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_IObserverManager::SwigDirector_IObserverManager(JNIEnv *jenv) : IObserverManager(), Swig::Director(jenv) {
}

SwigDirector_IObserverManager::~SwigDirector_IObserverManager() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_IObserverManager::addObserver(std::shared_ptr< TestObserver > observer) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jobserver  ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method IObserverManager::addObserver.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    TestObserverBridge *function_bridge1 = new SharedPtrTestObserverBridge4DI(observer);
    *(std::shared_ptr<TestObserverBridge> **) &jobserver = new std::shared_ptr<TestObserverBridge>(function_bridge1);
    
    
    jenv->CallStaticVoidMethod(Swig::jclass_JNIItemTestJNI, Swig::director_method_ids[27], swigjobj, jobserver);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in IObserverManager::addObserver ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_IObserverManager::removeObserver(std::shared_ptr< TestObserver > observer) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jobserver  ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method IObserverManager::removeObserver.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    TestObserverBridge *function_bridge1 = new SharedPtrTestObserverBridge4DI(observer);
    *(std::shared_ptr<TestObserverBridge> **) &jobserver = new std::shared_ptr<TestObserverBridge>(function_bridge1);
    
    
    jenv->CallStaticVoidMethod(Swig::jclass_JNIItemTestJNI, Swig::director_method_ids[28], swigjobj, jobserver);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in IObserverManager::removeObserver ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_IObserverManager::addObserver2(std::shared_ptr< ITestObserver2 > observer) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jobserver  ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method IObserverManager::addObserver2.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jobserver = 0;
    if (observer) {
      *((std::shared_ptr<  ITestObserver2 > **)&jobserver) = new std::shared_ptr<  ITestObserver2 >(observer);
    } 
    jenv->CallStaticVoidMethod(Swig::jclass_JNIItemTestJNI, Swig::director_method_ids[29], swigjobj, jobserver);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in IObserverManager::addObserver2 ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_IObserverManager::removeObserver2(std::shared_ptr< ITestObserver2 > observer) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jobserver  ;
  
  if (!swig_override[3]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method IObserverManager::removeObserver2.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jobserver = 0;
    if (observer) {
      *((std::shared_ptr<  ITestObserver2 > **)&jobserver) = new std::shared_ptr<  ITestObserver2 >(observer);
    } 
    jenv->CallStaticVoidMethod(Swig::jclass_JNIItemTestJNI, Swig::director_method_ids[30], swigjobj, jobserver);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in IObserverManager::removeObserver2 ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_IObserverManager::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static jclass baseclass = swig_new_global_ref(jenv, "com/example/jni_test/model/IObserverManager");
  if (!baseclass) return;
  static SwigDirectorMethod methods[] = {
    SwigDirectorMethod(jenv, baseclass, "addObserver", "(Lcom/example/jni_test/model/TestObserverBridge;)V"),
    SwigDirectorMethod(jenv, baseclass, "removeObserver", "(Lcom/example/jni_test/model/TestObserverBridge;)V"),
    SwigDirectorMethod(jenv, baseclass, "addObserver2", "(Lcom/example/jni_test/model/ITestObserver2Bridge;)V"),
    SwigDirectorMethod(jenv, baseclass, "removeObserver2", "(Lcom/example/jni_test/model/ITestObserver2Bridge;)V")
  };
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 4; ++i) {
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].name, methods[i].desc);
        swig_override[i] = methods[i].methid && (methid != methods[i].methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_delete_1SwigDirectorWrapper(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SwigDirectorWrapper *arg1 = (SwigDirectorWrapper *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SwigDirectorWrapper **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_new_1SwigDirectorWrapper(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SwigDirectorWrapper *arg1 = 0 ;
  std::unique_ptr< SwigDirectorWrapper > rvrdeleter1 ;
  SwigDirectorWrapper *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SwigDirectorWrapper **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SwigDirectorWrapper && is null");
    return 0;
  }
  rvrdeleter1.reset(arg1); 
  result = (SwigDirectorWrapper *)new SwigDirectorWrapper((SwigDirectorWrapper &&)*arg1);
  *(SwigDirectorWrapper **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_SwigDirectorWrapper_1IsJObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SwigDirectorWrapper *arg1 = (SwigDirectorWrapper *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SwigDirectorWrapper **)&jarg1; 
  result = (bool)((SwigDirectorWrapper const *)arg1)->IsJObject();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_SwigDirectorWrapper_1IsCPtr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SwigDirectorWrapper *arg1 = (SwigDirectorWrapper *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SwigDirectorWrapper **)&jarg1; 
  result = (bool)((SwigDirectorWrapper const *)arg1)->IsCPtr();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_SwigDirectorWrapper_1GetJObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  SwigDirectorWrapper *arg1 = (SwigDirectorWrapper *) 0 ;
  jobject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SwigDirectorWrapper **)&jarg1; 
  result = ((SwigDirectorWrapper const *)arg1)->GetJObject();
  jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_SwigDirectorWrapper_1GetCPtr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SwigDirectorWrapper *arg1 = (SwigDirectorWrapper *) 0 ;
  uintptr_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SwigDirectorWrapper **)&jarg1; 
  result = ((SwigDirectorWrapper const *)arg1)->GetCPtr();
  
  jresult = result;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_new_1StringVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::string > *)new std::vector< std::string >();
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_new_1StringVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & is null");
    return 0;
  } 
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_StringVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_StringVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_new_1StringVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  jint arg1 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (std::vector< std::string > *)new_std_vector_Sl_std_string_Sg___SWIG_2(SWIG_STD_MOVE(arg1),(std::string const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_StringVector_1doCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  try {
    result = std_vector_Sl_std_string_Sg__doCapacity(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_StringVector_1doReserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = jarg2; 
  try {
    std_vector_Sl_std_string_Sg__doReserve(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jint JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_StringVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  try {
    result = std_vector_Sl_std_string_Sg__doSize((std::vector< std::string > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_StringVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::vector< std::string >::value_type arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  std_vector_Sl_std_string_Sg__doAdd__SWIG_0(arg1,(std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_StringVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::vector< std::string >::value_type arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    std_vector_Sl_std_string_Sg__doAdd__SWIG_1(arg1,SWIG_STD_MOVE(arg2),(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jstring JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_StringVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint arg2 ;
  std::vector< std::string >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_std_string_Sg__doRemove(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_StringVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__doGet(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_StringVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  std::vector< std::string >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::vector< std::string >::value_type arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    result = std_vector_Sl_std_string_Sg__doSet(arg1,SWIG_STD_MOVE(arg2),(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_StringVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_std_string_Sg__doRemoveRange(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_delete_1StringVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_new_1IItemIconVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< IItemIcon > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::shared_ptr< IItemIcon > > *)new std::vector< std::shared_ptr< IItemIcon > >();
  *(std::vector< std::shared_ptr< IItemIcon > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_new_1IItemIconVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< IItemIcon > > *arg1 = 0 ;
  std::vector< std::shared_ptr< IItemIcon > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< IItemIcon > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::shared_ptr< IItemIcon > > const & is null");
    return 0;
  } 
  result = (std::vector< std::shared_ptr< IItemIcon > > *)new std::vector< std::shared_ptr< IItemIcon > >((std::vector< std::shared_ptr< IItemIcon > > const &)*arg1);
  *(std::vector< std::shared_ptr< IItemIcon > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_IItemIconVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::shared_ptr< IItemIcon > > *arg1 = (std::vector< std::shared_ptr< IItemIcon > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< IItemIcon > > **)&jarg1; 
  result = (bool)((std::vector< std::shared_ptr< IItemIcon > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_IItemIconVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::shared_ptr< IItemIcon > > *arg1 = (std::vector< std::shared_ptr< IItemIcon > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< IItemIcon > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_new_1IItemIconVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  std::shared_ptr< IItemIcon > *arg2 = 0 ;
  std::vector< std::shared_ptr< IItemIcon > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  
  std::shared_ptr<IItemIcon> temp2;
  arg2 = &temp2;
  std::shared_ptr<IItemIcon> *argp2 = *(std::shared_ptr<IItemIcon> **)&jarg2;
  if (argp2) {
    // 创建全局引用
    jobject globalRef = jenv->NewGlobalRef(jarg2_);
    // 创建新的 shared_ptr，使用自定义删除器
    *arg2 = std::shared_ptr<IItemIcon>(argp2->get(), [globalRef](IItemIcon* ptr) {
      JNIEnv *env = nullptr;
        JNIContext context(env);
        // 删除全局引用
        env->DeleteGlobalRef(globalRef);
      });
  }
  
  try {
    result = (std::vector< std::shared_ptr< IItemIcon > > *)new_std_vector_Sl_std_shared_ptr_Sl_IItemIcon_Sg__Sg___SWIG_2(SWIG_STD_MOVE(arg1),(std::shared_ptr< IItemIcon > const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::shared_ptr< IItemIcon > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_IItemIconVector_1doCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< std::shared_ptr< IItemIcon > > *arg1 = (std::vector< std::shared_ptr< IItemIcon > > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< IItemIcon > > **)&jarg1; 
  try {
    result = std_vector_Sl_std_shared_ptr_Sl_IItemIcon_Sg__Sg__doCapacity(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_IItemIconVector_1doReserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< std::shared_ptr< IItemIcon > > *arg1 = (std::vector< std::shared_ptr< IItemIcon > > *) 0 ;
  jint arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< IItemIcon > > **)&jarg1; 
  arg2 = jarg2; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_IItemIcon_Sg__Sg__doReserve(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jint JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_IItemIconVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< std::shared_ptr< IItemIcon > > *arg1 = (std::vector< std::shared_ptr< IItemIcon > > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< IItemIcon > > **)&jarg1; 
  try {
    result = std_vector_Sl_std_shared_ptr_Sl_IItemIcon_Sg__Sg__doSize((std::vector< std::shared_ptr< IItemIcon > > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_IItemIconVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::shared_ptr< IItemIcon > > *arg1 = (std::vector< std::shared_ptr< IItemIcon > > *) 0 ;
  std::vector< std::shared_ptr< IItemIcon > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::shared_ptr< IItemIcon > > **)&jarg1; 
  
  std::shared_ptr<IItemIcon> temp2;
  arg2 = &temp2;
  std::shared_ptr<IItemIcon> *argp2 = *(std::shared_ptr<IItemIcon> **)&jarg2;
  if (argp2) {
    // 创建全局引用
    jobject globalRef = jenv->NewGlobalRef(jarg2_);
    // 创建新的 shared_ptr，使用自定义删除器
    *arg2 = std::shared_ptr<IItemIcon>(argp2->get(), [globalRef](IItemIcon* ptr) {
      JNIEnv *env = nullptr;
        JNIContext context(env);
        // 删除全局引用
        env->DeleteGlobalRef(globalRef);
      });
  }
  
  std_vector_Sl_std_shared_ptr_Sl_IItemIcon_Sg__Sg__doAdd__SWIG_0(arg1,(std::shared_ptr< IItemIcon > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_IItemIconVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::shared_ptr< IItemIcon > > *arg1 = (std::vector< std::shared_ptr< IItemIcon > > *) 0 ;
  jint arg2 ;
  std::vector< std::shared_ptr< IItemIcon > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::shared_ptr< IItemIcon > > **)&jarg1; 
  arg2 = jarg2; 
  
  std::shared_ptr<IItemIcon> temp3;
  arg3 = &temp3;
  std::shared_ptr<IItemIcon> *argp3 = *(std::shared_ptr<IItemIcon> **)&jarg3;
  if (argp3) {
    // 创建全局引用
    jobject globalRef = jenv->NewGlobalRef(jarg3_);
    // 创建新的 shared_ptr，使用自定义删除器
    *arg3 = std::shared_ptr<IItemIcon>(argp3->get(), [globalRef](IItemIcon* ptr) {
      JNIEnv *env = nullptr;
        JNIContext context(env);
        // 删除全局引用
        env->DeleteGlobalRef(globalRef);
      });
  }
  
  try {
    std_vector_Sl_std_shared_ptr_Sl_IItemIcon_Sg__Sg__doAdd__SWIG_1(arg1,SWIG_STD_MOVE(arg2),(std::shared_ptr< IItemIcon > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_IItemIconVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< IItemIcon > > *arg1 = (std::vector< std::shared_ptr< IItemIcon > > *) 0 ;
  jint arg2 ;
  std::vector< std::shared_ptr< IItemIcon > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< IItemIcon > > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_std_shared_ptr_Sl_IItemIcon_Sg__Sg__doRemove(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::shared_ptr< IItemIcon > >::value_type **)&jresult = result ? new std::vector< std::shared_ptr< IItemIcon > >::value_type(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_IItemIconVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< IItemIcon > > *arg1 = (std::vector< std::shared_ptr< IItemIcon > > *) 0 ;
  jint arg2 ;
  std::vector< std::shared_ptr< IItemIcon > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< IItemIcon > > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< std::shared_ptr< IItemIcon > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_IItemIcon_Sg__Sg__doGet(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::shared_ptr< IItemIcon > >::value_type **)&jresult = *result ? new std::vector< std::shared_ptr< IItemIcon > >::value_type(*result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_IItemIconVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< IItemIcon > > *arg1 = (std::vector< std::shared_ptr< IItemIcon > > *) 0 ;
  jint arg2 ;
  std::vector< std::shared_ptr< IItemIcon > >::value_type *arg3 = 0 ;
  std::vector< std::shared_ptr< IItemIcon > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::shared_ptr< IItemIcon > > **)&jarg1; 
  arg2 = jarg2; 
  
  std::shared_ptr<IItemIcon> temp3;
  arg3 = &temp3;
  std::shared_ptr<IItemIcon> *argp3 = *(std::shared_ptr<IItemIcon> **)&jarg3;
  if (argp3) {
    // 创建全局引用
    jobject globalRef = jenv->NewGlobalRef(jarg3_);
    // 创建新的 shared_ptr，使用自定义删除器
    *arg3 = std::shared_ptr<IItemIcon>(argp3->get(), [globalRef](IItemIcon* ptr) {
      JNIEnv *env = nullptr;
        JNIContext context(env);
        // 删除全局引用
        env->DeleteGlobalRef(globalRef);
      });
  }
  
  try {
    result = std_vector_Sl_std_shared_ptr_Sl_IItemIcon_Sg__Sg__doSet(arg1,SWIG_STD_MOVE(arg2),(std::shared_ptr< IItemIcon > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::shared_ptr< IItemIcon > >::value_type **)&jresult = result ? new std::vector< std::shared_ptr< IItemIcon > >::value_type(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_IItemIconVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< std::shared_ptr< IItemIcon > > *arg1 = (std::vector< std::shared_ptr< IItemIcon > > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< IItemIcon > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_IItemIcon_Sg__Sg__doRemoveRange(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_delete_1IItemIconVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::shared_ptr< IItemIcon > > *arg1 = (std::vector< std::shared_ptr< IItemIcon > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::shared_ptr< IItemIcon > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_new_1TestObserverBridge(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TestObserverBridge *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TestObserverBridge *)new SwigDirector_TestObserverBridge(jenv);
  
  *(std::shared_ptr<  TestObserverBridge > **)&jresult = result ? new std::shared_ptr<  TestObserverBridge >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_delete_1TestObserverBridge(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TestObserverBridge *arg1 = (TestObserverBridge *) 0 ;
  std::shared_ptr< TestObserverBridge > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  TestObserverBridge > **)&jarg1;
  arg1 = (TestObserverBridge *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_TestObserverBridge_1onCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TestObserverBridge *arg1 = (TestObserverBridge *) 0 ;
  int *arg2 = 0 ;
  std::shared_ptr< TestObserverBridge > *smartarg1 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  TestObserverBridge > **)&jarg1;
  arg1 = (TestObserverBridge *)(smartarg1 ? smartarg1->get() : 0); 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->onCall((int const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_TestObserverBridge_1calculateHash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TestObserverBridge *arg1 = (TestObserverBridge *) 0 ;
  std::shared_ptr< TestObserverBridge > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  TestObserverBridge > **)&jarg1;
  arg1 = (TestObserverBridge *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->calculateHash();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_TestObserverBridge_1isEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  TestObserverBridge *arg1 = (TestObserverBridge *) 0 ;
  TestObserverBridge *arg2 = 0 ;
  std::shared_ptr< TestObserverBridge > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  TestObserverBridge > **)&jarg1;
  arg1 = (TestObserverBridge *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (TestObserverBridge *)((*(std::shared_ptr< const TestObserverBridge > **)&jarg2) ? (*(std::shared_ptr< const TestObserverBridge > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TestObserverBridge const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->isEquals((TestObserverBridge const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_TestObserverBridge_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< TestObserverBridge > *obj = *((std::shared_ptr< TestObserverBridge > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_TestObserverBridge *director = static_cast<SwigDirector_TestObserverBridge *>(obj->operator->());
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_TestObserverBridge_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  std::shared_ptr< TestObserverBridge > *obj = *((std::shared_ptr< TestObserverBridge > **)&objarg);
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_TestObserverBridge *director = dynamic_cast<SwigDirector_TestObserverBridge *>(obj->operator->());
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_delete_1IItemIcon(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  IItemIcon *arg1 = (IItemIcon *) 0 ;
  std::shared_ptr< IItemIcon > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  IItemIcon > **)&jarg1;
  arg1 = (IItemIcon *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jstring JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_IItemIcon_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  IItemIcon *arg1 = (IItemIcon *) 0 ;
  std::shared_ptr< IItemIcon > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  IItemIcon > **)&jarg1;
  arg1 = (IItemIcon *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_IItemIcon_1getIcon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  IItemIcon *arg1 = (IItemIcon *) 0 ;
  std::shared_ptr< IItemIcon > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  IItemIcon > **)&jarg1;
  arg1 = (IItemIcon *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getIcon();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_new_1IItemIcon(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  IItemIcon *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (IItemIcon *)new SwigDirector_IItemIcon(jenv);
  
  *(std::shared_ptr<  IItemIcon > **)&jresult = result ? new std::shared_ptr<  IItemIcon >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_IItemIcon_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< IItemIcon > *obj = *((std::shared_ptr< IItemIcon > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_IItemIcon *director = static_cast<SwigDirector_IItemIcon *>(obj->operator->());
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_IItemIcon_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  std::shared_ptr< IItemIcon > *obj = *((std::shared_ptr< IItemIcon > **)&objarg);
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_IItemIcon *director = dynamic_cast<SwigDirector_IItemIcon *>(obj->operator->());
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_delete_1ITestItem(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ITestItem *arg1 = (ITestItem *) 0 ;
  std::shared_ptr< ITestItem > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  ITestItem > **)&jarg1;
  arg1 = (ITestItem *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jstring JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_ITestItem_1getId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ITestItem *arg1 = (ITestItem *) 0 ;
  std::shared_ptr< ITestItem > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  ITestItem > **)&jarg1;
  arg1 = (ITestItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getId();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_ITestItem_1getTitle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ITestItem *arg1 = (ITestItem *) 0 ;
  std::shared_ptr< ITestItem > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  ITestItem > **)&jarg1;
  arg1 = (ITestItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getTitle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_ITestItem_1getEnvelopePic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ITestItem *arg1 = (ITestItem *) 0 ;
  std::shared_ptr< ITestItem > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  ITestItem > **)&jarg1;
  arg1 = (ITestItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getEnvelopePic();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_ITestItem_1getDesc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ITestItem *arg1 = (ITestItem *) 0 ;
  std::shared_ptr< ITestItem > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  ITestItem > **)&jarg1;
  arg1 = (ITestItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getDesc();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_ITestItem_1getNiceDate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ITestItem *arg1 = (ITestItem *) 0 ;
  std::shared_ptr< ITestItem > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  ITestItem > **)&jarg1;
  arg1 = (ITestItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getNiceDate();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_ITestItem_1getAuthor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ITestItem *arg1 = (ITestItem *) 0 ;
  std::shared_ptr< ITestItem > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  ITestItem > **)&jarg1;
  arg1 = (ITestItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getAuthor();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_ITestItem_1getTags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ITestItem *arg1 = (ITestItem *) 0 ;
  std::shared_ptr< ITestItem > *smartarg1 = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  ITestItem > **)&jarg1;
  arg1 = (ITestItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getTags();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_ITestItem_1getIcons(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ITestItem *arg1 = (ITestItem *) 0 ;
  std::shared_ptr< ITestItem > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< IItemIcon > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  ITestItem > **)&jarg1;
  arg1 = (ITestItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getIcons();
  *(std::vector< std::shared_ptr< IItemIcon > > **)&jresult = new std::vector< std::shared_ptr< IItemIcon > >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_new_1ITestItem(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ITestItem *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ITestItem *)new SwigDirector_ITestItem(jenv);
  
  *(std::shared_ptr<  ITestItem > **)&jresult = result ? new std::shared_ptr<  ITestItem >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_ITestItem_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< ITestItem > *obj = *((std::shared_ptr< ITestItem > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_ITestItem *director = static_cast<SwigDirector_ITestItem *>(obj->operator->());
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_ITestItem_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  std::shared_ptr< ITestItem > *obj = *((std::shared_ptr< ITestItem > **)&objarg);
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_ITestItem *director = dynamic_cast<SwigDirector_ITestItem *>(obj->operator->());
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_delete_1IC2NTestItemFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  IC2NTestItemFactory *arg1 = (IC2NTestItemFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(IC2NTestItemFactory **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_IC2NTestItemFactory_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  IC2NTestItemFactory *arg1 = (IC2NTestItemFactory *) 0 ;
  int arg2 ;
  std::shared_ptr< ITestItem > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IC2NTestItemFactory **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->create(arg2);
  
  if (result) {
    auto *result_ptr = dynamic_cast<Swig::Director*>((&result)->get());
    if (result_ptr) {
      jobject result_jobj = result_ptr->swig_get_self(jenv);
      if (result_jobj) {
        *((SwigDirectorWrapper **)&jresult) = new SwigDirectorWrapper(result_jobj);
      } else {
        *((SwigDirectorWrapper **)&jresult) = new SwigDirectorWrapper(new std::shared_ptr<ITestItem>(result));
      }
    } else {
      *((SwigDirectorWrapper **)&jresult) = new SwigDirectorWrapper(new std::shared_ptr<ITestItem>(result));
    }
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_new_1IC2NTestItemFactory(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  IC2NTestItemFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (IC2NTestItemFactory *)new SwigDirector_IC2NTestItemFactory(jenv);
  *(IC2NTestItemFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_IC2NTestItemFactory_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  IC2NTestItemFactory *obj = *((IC2NTestItemFactory **)&objarg);
  (void)jcls;
  SwigDirector_IC2NTestItemFactory *director = static_cast<SwigDirector_IC2NTestItemFactory *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_IC2NTestItemFactory_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  IC2NTestItemFactory *obj = *((IC2NTestItemFactory **)&objarg);
  SwigDirector_IC2NTestItemFactory *director = dynamic_cast<SwigDirector_IC2NTestItemFactory *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_C2NTestItemFactory_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  IC2NTestItemFactory *arg1 = (IC2NTestItemFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IC2NTestItemFactory **)&jarg1; 
  C2NTestItemFactory::init(arg1);
}


SWIGEXPORT jlong JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_C2NTestItemFactory_1create(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  std::shared_ptr< ITestItem > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = C2NTestItemFactory::create(arg1);
  
  if (result) {
    auto *result_ptr = dynamic_cast<Swig::Director*>((&result)->get());
    if (result_ptr) {
      jobject result_jobj = result_ptr->swig_get_self(jenv);
      if (result_jobj) {
        *((SwigDirectorWrapper **)&jresult) = new SwigDirectorWrapper(result_jobj);
      } else {
        *((SwigDirectorWrapper **)&jresult) = new SwigDirectorWrapper(new std::shared_ptr<ITestItem>(result));
      }
    } else {
      *((SwigDirectorWrapper **)&jresult) = new SwigDirectorWrapper(new std::shared_ptr<ITestItem>(result));
    }
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_new_1C2NTestItemFactory(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  C2NTestItemFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (C2NTestItemFactory *)new C2NTestItemFactory();
  *(C2NTestItemFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_delete_1C2NTestItemFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  C2NTestItemFactory *arg1 = (C2NTestItemFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(C2NTestItemFactory **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_new_1N2CTestItem(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  N2CTestItem *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (N2CTestItem *)new SwigDirector_N2CTestItem(jenv,arg1);
  
  *(std::shared_ptr<  N2CTestItem > **)&jresult = result ? new std::shared_ptr<  N2CTestItem >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_delete_1N2CTestItem(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  N2CTestItem *arg1 = (N2CTestItem *) 0 ;
  std::shared_ptr< N2CTestItem > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  N2CTestItem > **)&jarg1;
  arg1 = (N2CTestItem *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jstring JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_N2CTestItem_1getId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  N2CTestItem *arg1 = (N2CTestItem *) 0 ;
  std::shared_ptr< N2CTestItem > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  N2CTestItem > **)&jarg1;
  arg1 = (N2CTestItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getId();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_N2CTestItem_1getIdSwigExplicitN2CTestItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  N2CTestItem *arg1 = (N2CTestItem *) 0 ;
  std::shared_ptr< N2CTestItem > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  N2CTestItem > **)&jarg1;
  arg1 = (N2CTestItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->N2CTestItem::getId();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_N2CTestItem_1getTitle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  N2CTestItem *arg1 = (N2CTestItem *) 0 ;
  std::shared_ptr< N2CTestItem > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  N2CTestItem > **)&jarg1;
  arg1 = (N2CTestItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getTitle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_N2CTestItem_1getTitleSwigExplicitN2CTestItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  N2CTestItem *arg1 = (N2CTestItem *) 0 ;
  std::shared_ptr< N2CTestItem > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  N2CTestItem > **)&jarg1;
  arg1 = (N2CTestItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->N2CTestItem::getTitle();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_N2CTestItem_1getEnvelopePic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  N2CTestItem *arg1 = (N2CTestItem *) 0 ;
  std::shared_ptr< N2CTestItem > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  N2CTestItem > **)&jarg1;
  arg1 = (N2CTestItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getEnvelopePic();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_N2CTestItem_1getEnvelopePicSwigExplicitN2CTestItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  N2CTestItem *arg1 = (N2CTestItem *) 0 ;
  std::shared_ptr< N2CTestItem > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  N2CTestItem > **)&jarg1;
  arg1 = (N2CTestItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->N2CTestItem::getEnvelopePic();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_N2CTestItem_1getDesc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  N2CTestItem *arg1 = (N2CTestItem *) 0 ;
  std::shared_ptr< N2CTestItem > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  N2CTestItem > **)&jarg1;
  arg1 = (N2CTestItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getDesc();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_N2CTestItem_1getDescSwigExplicitN2CTestItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  N2CTestItem *arg1 = (N2CTestItem *) 0 ;
  std::shared_ptr< N2CTestItem > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  N2CTestItem > **)&jarg1;
  arg1 = (N2CTestItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->N2CTestItem::getDesc();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_N2CTestItem_1getNiceDate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  N2CTestItem *arg1 = (N2CTestItem *) 0 ;
  std::shared_ptr< N2CTestItem > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  N2CTestItem > **)&jarg1;
  arg1 = (N2CTestItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getNiceDate();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_N2CTestItem_1getNiceDateSwigExplicitN2CTestItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  N2CTestItem *arg1 = (N2CTestItem *) 0 ;
  std::shared_ptr< N2CTestItem > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  N2CTestItem > **)&jarg1;
  arg1 = (N2CTestItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->N2CTestItem::getNiceDate();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_N2CTestItem_1getAuthor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  N2CTestItem *arg1 = (N2CTestItem *) 0 ;
  std::shared_ptr< N2CTestItem > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  N2CTestItem > **)&jarg1;
  arg1 = (N2CTestItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getAuthor();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_N2CTestItem_1getAuthorSwigExplicitN2CTestItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  N2CTestItem *arg1 = (N2CTestItem *) 0 ;
  std::shared_ptr< N2CTestItem > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  N2CTestItem > **)&jarg1;
  arg1 = (N2CTestItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->N2CTestItem::getAuthor();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_N2CTestItem_1getTags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  N2CTestItem *arg1 = (N2CTestItem *) 0 ;
  std::shared_ptr< N2CTestItem > *smartarg1 = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  N2CTestItem > **)&jarg1;
  arg1 = (N2CTestItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getTags();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_N2CTestItem_1getTagsSwigExplicitN2CTestItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  N2CTestItem *arg1 = (N2CTestItem *) 0 ;
  std::shared_ptr< N2CTestItem > *smartarg1 = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  N2CTestItem > **)&jarg1;
  arg1 = (N2CTestItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->N2CTestItem::getTags();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_N2CTestItem_1getIcons(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  N2CTestItem *arg1 = (N2CTestItem *) 0 ;
  std::shared_ptr< N2CTestItem > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< IItemIcon > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  N2CTestItem > **)&jarg1;
  arg1 = (N2CTestItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getIcons();
  *(std::vector< std::shared_ptr< IItemIcon > > **)&jresult = new std::vector< std::shared_ptr< IItemIcon > >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_N2CTestItem_1getIconsSwigExplicitN2CTestItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  N2CTestItem *arg1 = (N2CTestItem *) 0 ;
  std::shared_ptr< N2CTestItem > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< IItemIcon > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  N2CTestItem > **)&jarg1;
  arg1 = (N2CTestItem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->N2CTestItem::getIcons();
  *(std::vector< std::shared_ptr< IItemIcon > > **)&jresult = new std::vector< std::shared_ptr< IItemIcon > >(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_N2CTestItem_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< N2CTestItem > *obj = *((std::shared_ptr< N2CTestItem > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_N2CTestItem *director = static_cast<SwigDirector_N2CTestItem *>(obj->operator->());
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_N2CTestItem_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  std::shared_ptr< N2CTestItem > *obj = *((std::shared_ptr< N2CTestItem > **)&objarg);
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_N2CTestItem *director = dynamic_cast<SwigDirector_N2CTestItem *>(obj->operator->());
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_new_1N2CItemIcon(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  N2CItemIcon *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (N2CItemIcon *)new SwigDirector_N2CItemIcon(jenv,arg1);
  
  *(std::shared_ptr<  N2CItemIcon > **)&jresult = result ? new std::shared_ptr<  N2CItemIcon >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_N2CItemIcon_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  N2CItemIcon *arg1 = (N2CItemIcon *) 0 ;
  std::shared_ptr< N2CItemIcon > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  N2CItemIcon > **)&jarg1;
  arg1 = (N2CItemIcon *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_N2CItemIcon_1getNameSwigExplicitN2CItemIcon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  N2CItemIcon *arg1 = (N2CItemIcon *) 0 ;
  std::shared_ptr< N2CItemIcon > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  N2CItemIcon > **)&jarg1;
  arg1 = (N2CItemIcon *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->N2CItemIcon::getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_N2CItemIcon_1getIcon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  N2CItemIcon *arg1 = (N2CItemIcon *) 0 ;
  std::shared_ptr< N2CItemIcon > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  N2CItemIcon > **)&jarg1;
  arg1 = (N2CItemIcon *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getIcon();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_N2CItemIcon_1getIconSwigExplicitN2CItemIcon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  N2CItemIcon *arg1 = (N2CItemIcon *) 0 ;
  std::shared_ptr< N2CItemIcon > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  N2CItemIcon > **)&jarg1;
  arg1 = (N2CItemIcon *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->N2CItemIcon::getIcon();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_delete_1N2CItemIcon(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  N2CItemIcon *arg1 = (N2CItemIcon *) 0 ;
  std::shared_ptr< N2CItemIcon > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  N2CItemIcon > **)&jarg1;
  arg1 = (N2CItemIcon *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_N2CItemIcon_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< N2CItemIcon > *obj = *((std::shared_ptr< N2CItemIcon > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_N2CItemIcon *director = static_cast<SwigDirector_N2CItemIcon *>(obj->operator->());
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_N2CItemIcon_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  std::shared_ptr< N2CItemIcon > *obj = *((std::shared_ptr< N2CItemIcon > **)&objarg);
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_N2CItemIcon *director = dynamic_cast<SwigDirector_N2CItemIcon *>(obj->operator->());
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_delete_1ITestColor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ITestColor *arg1 = (ITestColor *) 0 ;
  std::shared_ptr< ITestColor > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  ITestColor > **)&jarg1;
  arg1 = (ITestColor *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_ITestColor_1getRandomColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ITestColor *arg1 = (ITestColor *) 0 ;
  std::shared_ptr< ITestColor > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  ITestColor > **)&jarg1;
  arg1 = (ITestColor *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->getRandomColor();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_ITestColor_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  ITestColor *arg1 = (ITestColor *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::shared_ptr< ITestColor > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  ITestColor > **)&jarg1;
  arg1 = (ITestColor *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (arg1)->add(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_new_1ITestColor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ITestColor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ITestColor *)new SwigDirector_ITestColor(jenv);
  
  *(std::shared_ptr<  ITestColor > **)&jresult = result ? new std::shared_ptr<  ITestColor >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_ITestColor_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< ITestColor > *obj = *((std::shared_ptr< ITestColor > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_ITestColor *director = static_cast<SwigDirector_ITestColor *>(obj->operator->());
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_ITestColor_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  std::shared_ptr< ITestColor > *obj = *((std::shared_ptr< ITestColor > **)&objarg);
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_ITestColor *director = dynamic_cast<SwigDirector_ITestColor *>(obj->operator->());
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jint JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_N2CTestColor_1getRandomColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  N2CTestColor *arg1 = (N2CTestColor *) 0 ;
  std::shared_ptr< N2CTestColor > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  N2CTestColor > **)&jarg1;
  arg1 = (N2CTestColor *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->getRandomColor();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_N2CTestColor_1getRandomColorSwigExplicitN2CTestColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  N2CTestColor *arg1 = (N2CTestColor *) 0 ;
  std::shared_ptr< N2CTestColor > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  N2CTestColor > **)&jarg1;
  arg1 = (N2CTestColor *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->N2CTestColor::getRandomColor();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_N2CTestColor_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  N2CTestColor *arg1 = (N2CTestColor *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::shared_ptr< N2CTestColor > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  N2CTestColor > **)&jarg1;
  arg1 = (N2CTestColor *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (arg1)->add(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_N2CTestColor_1addSwigExplicitN2CTestColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  N2CTestColor *arg1 = (N2CTestColor *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::shared_ptr< N2CTestColor > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  N2CTestColor > **)&jarg1;
  arg1 = (N2CTestColor *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (arg1)->N2CTestColor::add(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_new_1N2CTestColor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  N2CTestColor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (N2CTestColor *)new SwigDirector_N2CTestColor(jenv);
  
  *(std::shared_ptr<  N2CTestColor > **)&jresult = result ? new std::shared_ptr<  N2CTestColor >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_delete_1N2CTestColor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  N2CTestColor *arg1 = (N2CTestColor *) 0 ;
  std::shared_ptr< N2CTestColor > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  N2CTestColor > **)&jarg1;
  arg1 = (N2CTestColor *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_N2CTestColor_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< N2CTestColor > *obj = *((std::shared_ptr< N2CTestColor > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_N2CTestColor *director = static_cast<SwigDirector_N2CTestColor *>(obj->operator->());
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_N2CTestColor_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  std::shared_ptr< N2CTestColor > *obj = *((std::shared_ptr< N2CTestColor > **)&objarg);
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_N2CTestColor *director = dynamic_cast<SwigDirector_N2CTestColor *>(obj->operator->());
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_TestColorFactory_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ITestColor *arg1 = (ITestColor *) 0 ;
  std::shared_ptr< ITestColor > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  ITestColor > **)&jarg1;
  arg1 = (ITestColor *)(smartarg1 ? smartarg1->get() : 0); 
  TestColorFactory::init(arg1);
}


SWIGEXPORT jlong JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_TestColorFactory_1create(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ITestColor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ITestColor *)TestColorFactory::create();
  
  *(std::shared_ptr<  ITestColor > **)&jresult = result ? new std::shared_ptr<  ITestColor >(result SWIG_NO_NULL_DELETER_0) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_new_1TestColorFactory(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TestColorFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TestColorFactory *)new TestColorFactory();
  *(TestColorFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_delete_1TestColorFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TestColorFactory *arg1 = (TestColorFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TestColorFactory **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_TestEnum1_1AllTradingTime_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TestEnum1 result;
  
  (void)jenv;
  (void)jcls;
  result = (TestEnum1)TestEnum1::AllTradingTime;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_TestEnum1_1UsPreMarketAfter_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TestEnum1 result;
  
  (void)jenv;
  (void)jcls;
  result = (TestEnum1)TestEnum1::UsPreMarketAfter;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_TestEnum2_1AllTradingTime_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TestEnum2 result;
  
  (void)jenv;
  (void)jcls;
  result = (TestEnum2)TestEnum2::AllTradingTime;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_TestEnum2_1UsPreMarketAfter_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TestEnum2 result;
  
  (void)jenv;
  (void)jcls;
  result = (TestEnum2)TestEnum2::UsPreMarketAfter;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_TestStruct_1groupName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  TestStruct *arg1 = (TestStruct *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TestStruct **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->groupName = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_TestStruct_1groupName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  TestStruct *arg1 = (TestStruct *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TestStruct **)&jarg1; 
  result = (std::string *) & ((arg1)->groupName);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_new_1TestStruct(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TestStruct *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TestStruct *)new TestStruct();
  *(TestStruct **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_delete_1TestStruct(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TestStruct *arg1 = (TestStruct *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TestStruct **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_delete_1ITestObserver2Bridge(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ITestObserver2 *arg1 = (ITestObserver2 *) 0 ;
  std::shared_ptr< ITestObserver2 > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  ITestObserver2 > **)&jarg1;
  arg1 = (ITestObserver2 *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_ITestObserver2Bridge_1onCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ITestObserver2 *arg1 = (ITestObserver2 *) 0 ;
  int *arg2 = 0 ;
  std::shared_ptr< ITestObserver2 > *smartarg1 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  ITestObserver2 > **)&jarg1;
  arg1 = (ITestObserver2 *)(smartarg1 ? smartarg1->get() : 0); 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->onCall((int const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_ITestObserver2Bridge_1calculateHash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ITestObserver2 *arg1 = (ITestObserver2 *) 0 ;
  std::shared_ptr< ITestObserver2 const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const ITestObserver2 > **)&jarg1;
  arg1 = (ITestObserver2 *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)ITestObserver2_calculateHash((ITestObserver2 const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_ITestObserver2Bridge_1isEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ITestObserver2 *arg1 = (ITestObserver2 *) 0 ;
  ITestObserver2 *arg2 = 0 ;
  std::shared_ptr< ITestObserver2 const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const ITestObserver2 > **)&jarg1;
  arg1 = (ITestObserver2 *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ITestObserver2 *)((*(std::shared_ptr< const ITestObserver2 > **)&jarg2) ? (*(std::shared_ptr< const ITestObserver2 > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ITestObserver2 const & reference is null");
    return 0;
  } 
  result = (bool)ITestObserver2_isEquals((ITestObserver2 const *)arg1,(ITestObserver2 const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_new_1ITestObserver2Bridge(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ITestObserver2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ITestObserver2 *)new SwigDirector_ITestObserver2Bridge(jenv);
  
  *(std::shared_ptr<  ITestObserver2 > **)&jresult = result ? new std::shared_ptr<  ITestObserver2 >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_ITestObserver2Bridge_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< ITestObserver2 > *obj = *((std::shared_ptr< ITestObserver2 > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_ITestObserver2Bridge *director = static_cast<SwigDirector_ITestObserver2Bridge *>(obj->operator->());
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_ITestObserver2Bridge_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  std::shared_ptr< ITestObserver2 > *obj = *((std::shared_ptr< ITestObserver2 > **)&objarg);
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_ITestObserver2Bridge *director = dynamic_cast<SwigDirector_ITestObserver2Bridge *>(obj->operator->());
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_delete_1IObserverManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  IObserverManager *arg1 = (IObserverManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(IObserverManager **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_IObserverManager_1addObserver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  IObserverManager *arg1 = (IObserverManager *) 0 ;
  SwigValueWrapper< std::shared_ptr< std::function< void (int const &) > > > arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(IObserverManager **)&jarg1; 
  
  std::shared_ptr<TestObserverBridge> *smartarg2 = *(std::shared_ptr<TestObserverBridge> **)&jarg2;
  auto original2 = TestObserverBridge::obtainOriginal(jenv, smartarg2, jarg2_);
  arg2 = original2;
  
  (arg1)->addObserver(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_IObserverManager_1removeObserver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  IObserverManager *arg1 = (IObserverManager *) 0 ;
  SwigValueWrapper< std::shared_ptr< std::function< void (int const &) > > > arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(IObserverManager **)&jarg1; 
  
  std::shared_ptr<TestObserverBridge> *smartarg2 = *(std::shared_ptr<TestObserverBridge> **)&jarg2;
  auto original2 = TestObserverBridge::obtainOriginal(jenv, smartarg2, jarg2_);
  arg2 = original2;
  
  (arg1)->removeObserver(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_IObserverManager_1addObserver2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  IObserverManager *arg1 = (IObserverManager *) 0 ;
  std::shared_ptr< ITestObserver2 > arg2 ;
  std::shared_ptr< ITestObserver2 > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(IObserverManager **)&jarg1; 
  argp2 = *(std::shared_ptr< ITestObserver2 > **)&jarg2;
  if (argp2) arg2 = *argp2; 
  (arg1)->addObserver2(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_IObserverManager_1removeObserver2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  IObserverManager *arg1 = (IObserverManager *) 0 ;
  std::shared_ptr< ITestObserver2 > arg2 ;
  std::shared_ptr< ITestObserver2 > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(IObserverManager **)&jarg1; 
  argp2 = *(std::shared_ptr< ITestObserver2 > **)&jarg2;
  if (argp2) arg2 = *argp2; 
  (arg1)->removeObserver2(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT jlong JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_new_1IObserverManager(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  IObserverManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (IObserverManager *)new SwigDirector_IObserverManager(jenv);
  *(IObserverManager **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_IObserverManager_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  IObserverManager *obj = *((IObserverManager **)&objarg);
  (void)jcls;
  SwigDirector_IObserverManager *director = static_cast<SwigDirector_IObserverManager *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_IObserverManager_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  IObserverManager *obj = *((IObserverManager **)&objarg);
  SwigDirector_IObserverManager *director = dynamic_cast<SwigDirector_IObserverManager *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_ObserverManager_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  IObserverManager *arg1 = (IObserverManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IObserverManager **)&jarg1; 
  ObserverManager::init(arg1);
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_ObserverManager_1addObserver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SwigValueWrapper< std::shared_ptr< std::function< void (int const &) > > > arg1 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  std::shared_ptr<TestObserverBridge> *smartarg1 = *(std::shared_ptr<TestObserverBridge> **)&jarg1;
  auto original1 = TestObserverBridge::obtainOriginal(jenv, smartarg1, jarg1_);
  arg1 = original1;
  
  ObserverManager::addObserver(SWIG_STD_MOVE(arg1));
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_ObserverManager_1removeObserver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SwigValueWrapper< std::shared_ptr< std::function< void (int const &) > > > arg1 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  std::shared_ptr<TestObserverBridge> *smartarg1 = *(std::shared_ptr<TestObserverBridge> **)&jarg1;
  auto original1 = TestObserverBridge::obtainOriginal(jenv, smartarg1, jarg1_);
  arg1 = original1;
  
  ObserverManager::removeObserver(SWIG_STD_MOVE(arg1));
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_ObserverManager_1addObserver2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::shared_ptr< ITestObserver2 > arg1 ;
  std::shared_ptr< ITestObserver2 > *argp1 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::shared_ptr< ITestObserver2 > **)&jarg1;
  if (argp1) arg1 = *argp1; 
  ObserverManager::addObserver2(SWIG_STD_MOVE(arg1));
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_ObserverManager_1removeObserver2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::shared_ptr< ITestObserver2 > arg1 ;
  std::shared_ptr< ITestObserver2 > *argp1 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::shared_ptr< ITestObserver2 > **)&jarg1;
  if (argp1) arg1 = *argp1; 
  ObserverManager::removeObserver2(SWIG_STD_MOVE(arg1));
}


SWIGEXPORT jlong JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_new_1ObserverManager(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ObserverManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ObserverManager *)new ObserverManager();
  *(ObserverManager **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_delete_1ObserverManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ObserverManager *arg1 = (ObserverManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ObserverManager **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_JNITestEntrance_1testAddObserver(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  JNITestEntrance::testAddObserver(arg1);
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_JNITestEntrance_1testRemoveObserver(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  JNITestEntrance::testRemoveObserver(arg1);
}


SWIGEXPORT jlong JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_new_1JNITestEntrance(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  JNITestEntrance *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (JNITestEntrance *)new JNITestEntrance();
  *(JNITestEntrance **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_delete_1JNITestEntrance(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  JNITestEntrance *arg1 = (JNITestEntrance *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(JNITestEntrance **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_N2CTestItem_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< N2CTestItem > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< N2CTestItem > **)&jarg1;
    *(std::shared_ptr< ITestItem > **)&baseptr = argp1 ? new std::shared_ptr< ITestItem >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_N2CItemIcon_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< N2CItemIcon > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< N2CItemIcon > **)&jarg1;
    *(std::shared_ptr< IItemIcon > **)&baseptr = argp1 ? new std::shared_ptr< IItemIcon >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_N2CTestColor_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< N2CTestColor > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< N2CTestColor > **)&jarg1;
    *(std::shared_ptr< ITestColor > **)&baseptr = argp1 ? new std::shared_ptr< ITestColor >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT void JNICALL Java_com_example_jni_1test_model_JNIItemTestJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[31] = {
    {
      "SwigDirector_TestObserverBridge_onCall", "(Lcom/example/jni_test/model/TestObserverBridge;I)V" 
    },
    {
      "SwigDirector_IItemIcon_getName", "(Lcom/example/jni_test/model/IItemIcon;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_IItemIcon_getIcon", "(Lcom/example/jni_test/model/IItemIcon;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_ITestItem_getId", "(Lcom/example/jni_test/model/ITestItem;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_ITestItem_getTitle", "(Lcom/example/jni_test/model/ITestItem;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_ITestItem_getEnvelopePic", "(Lcom/example/jni_test/model/ITestItem;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_ITestItem_getDesc", "(Lcom/example/jni_test/model/ITestItem;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_ITestItem_getNiceDate", "(Lcom/example/jni_test/model/ITestItem;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_ITestItem_getAuthor", "(Lcom/example/jni_test/model/ITestItem;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_ITestItem_getTags", "(Lcom/example/jni_test/model/ITestItem;)J" 
    },
    {
      "SwigDirector_ITestItem_getIcons", "(Lcom/example/jni_test/model/ITestItem;)J" 
    },
    {
      "SwigDirector_IC2NTestItemFactory_create", "(Lcom/example/jni_test/model/IC2NTestItemFactory;I)J" 
    },
    {
      "SwigDirector_N2CTestItem_getId", "(Lcom/example/jni_test/model/N2CTestItem;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_N2CTestItem_getTitle", "(Lcom/example/jni_test/model/N2CTestItem;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_N2CTestItem_getEnvelopePic", "(Lcom/example/jni_test/model/N2CTestItem;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_N2CTestItem_getDesc", "(Lcom/example/jni_test/model/N2CTestItem;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_N2CTestItem_getNiceDate", "(Lcom/example/jni_test/model/N2CTestItem;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_N2CTestItem_getAuthor", "(Lcom/example/jni_test/model/N2CTestItem;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_N2CTestItem_getTags", "(Lcom/example/jni_test/model/N2CTestItem;)J" 
    },
    {
      "SwigDirector_N2CTestItem_getIcons", "(Lcom/example/jni_test/model/N2CTestItem;)J" 
    },
    {
      "SwigDirector_N2CItemIcon_getName", "(Lcom/example/jni_test/model/N2CItemIcon;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_N2CItemIcon_getIcon", "(Lcom/example/jni_test/model/N2CItemIcon;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_ITestColor_getRandomColor", "(Lcom/example/jni_test/model/ITestColor;)I" 
    },
    {
      "SwigDirector_ITestColor_add", "(Lcom/example/jni_test/model/ITestColor;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_N2CTestColor_getRandomColor", "(Lcom/example/jni_test/model/N2CTestColor;)I" 
    },
    {
      "SwigDirector_N2CTestColor_add", "(Lcom/example/jni_test/model/N2CTestColor;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_ITestObserver2Bridge_onCall", "(Lcom/example/jni_test/model/ITestObserver2Bridge;I)V" 
    },
    {
      "SwigDirector_IObserverManager_addObserver", "(Lcom/example/jni_test/model/IObserverManager;J)V" 
    },
    {
      "SwigDirector_IObserverManager_removeObserver", "(Lcom/example/jni_test/model/IObserverManager;J)V" 
    },
    {
      "SwigDirector_IObserverManager_addObserver2", "(Lcom/example/jni_test/model/IObserverManager;J)V" 
    },
    {
      "SwigDirector_IObserverManager_removeObserver2", "(Lcom/example/jni_test/model/IObserverManager;J)V" 
    }
  };
  Swig::jclass_JNIItemTestJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_JNIItemTestJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_method_ids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_method_ids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

