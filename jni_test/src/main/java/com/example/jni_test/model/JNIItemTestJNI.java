/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.3.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.example.jni_test.model;

public class JNIItemTestJNI {
  public final static native void delete_SwigDirectorWrapper(long jarg1);
  public final static native long new_SwigDirectorWrapper(long jarg1, SwigDirectorWrapper jarg1_);
  public final static native boolean SwigDirectorWrapper_IsJObject(long jarg1, SwigDirectorWrapper jarg1_);
  public final static native boolean SwigDirectorWrapper_IsCPtr(long jarg1, SwigDirectorWrapper jarg1_);
  public final static native Object SwigDirectorWrapper_GetJObject(long jarg1, SwigDirectorWrapper jarg1_);
  public final static native long SwigDirectorWrapper_GetCPtr(long jarg1, SwigDirectorWrapper jarg1_);
  public final static native long new_StringVector__SWIG_0();
  public final static native long new_StringVector__SWIG_1(long jarg1, StringVector jarg1_);
  public final static native boolean StringVector_isEmpty(long jarg1, StringVector jarg1_);
  public final static native void StringVector_clear(long jarg1, StringVector jarg1_);
  public final static native long new_StringVector__SWIG_2(int jarg1, String jarg2);
  public final static native int StringVector_doCapacity(long jarg1, StringVector jarg1_);
  public final static native void StringVector_doReserve(long jarg1, StringVector jarg1_, int jarg2);
  public final static native int StringVector_doSize(long jarg1, StringVector jarg1_);
  public final static native void StringVector_doAdd__SWIG_0(long jarg1, StringVector jarg1_, String jarg2);
  public final static native void StringVector_doAdd__SWIG_1(long jarg1, StringVector jarg1_, int jarg2, String jarg3);
  public final static native String StringVector_doRemove(long jarg1, StringVector jarg1_, int jarg2);
  public final static native String StringVector_doGet(long jarg1, StringVector jarg1_, int jarg2);
  public final static native String StringVector_doSet(long jarg1, StringVector jarg1_, int jarg2, String jarg3);
  public final static native void StringVector_doRemoveRange(long jarg1, StringVector jarg1_, int jarg2, int jarg3);
  public final static native void delete_StringVector(long jarg1);
  public final static native long new_IItemIconVector__SWIG_0();
  public final static native long new_IItemIconVector__SWIG_1(long jarg1, IItemIconVector jarg1_);
  public final static native boolean IItemIconVector_isEmpty(long jarg1, IItemIconVector jarg1_);
  public final static native void IItemIconVector_clear(long jarg1, IItemIconVector jarg1_);
  public final static native long new_IItemIconVector__SWIG_2(int jarg1, long jarg2, IItemIcon jarg2_);
  public final static native int IItemIconVector_doCapacity(long jarg1, IItemIconVector jarg1_);
  public final static native void IItemIconVector_doReserve(long jarg1, IItemIconVector jarg1_, int jarg2);
  public final static native int IItemIconVector_doSize(long jarg1, IItemIconVector jarg1_);
  public final static native void IItemIconVector_doAdd__SWIG_0(long jarg1, IItemIconVector jarg1_, long jarg2, IItemIcon jarg2_);
  public final static native void IItemIconVector_doAdd__SWIG_1(long jarg1, IItemIconVector jarg1_, int jarg2, long jarg3, IItemIcon jarg3_);
  public final static native long IItemIconVector_doRemove(long jarg1, IItemIconVector jarg1_, int jarg2);
  public final static native long IItemIconVector_doGet(long jarg1, IItemIconVector jarg1_, int jarg2);
  public final static native long IItemIconVector_doSet(long jarg1, IItemIconVector jarg1_, int jarg2, long jarg3, IItemIcon jarg3_);
  public final static native void IItemIconVector_doRemoveRange(long jarg1, IItemIconVector jarg1_, int jarg2, int jarg3);
  public final static native void delete_IItemIconVector(long jarg1);
  public final static native long new_TestObserverBridge();
  public final static native void delete_TestObserverBridge(long jarg1);
  public final static native void TestObserverBridge_onCall(long jarg1, TestObserverBridge jarg1_, int jarg2);
  public final static native int TestObserverBridge_calculateHash(long jarg1, TestObserverBridge jarg1_);
  public final static native boolean TestObserverBridge_isEquals(long jarg1, TestObserverBridge jarg1_, long jarg2, TestObserverBridge jarg2_);
  public final static native void TestObserverBridge_director_connect(TestObserverBridge obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TestObserverBridge_change_ownership(TestObserverBridge obj, long cptr, boolean take_or_release);
  public final static native long new_TestObserver2Bridge();
  public final static native void delete_TestObserver2Bridge(long jarg1);
  public final static native void TestObserver2Bridge_onCall(long jarg1, TestObserver2Bridge jarg1_, long jarg2, TestObserver2Data jarg2_);
  public final static native int TestObserver2Bridge_calculateHash(long jarg1, TestObserver2Bridge jarg1_);
  public final static native boolean TestObserver2Bridge_isEquals(long jarg1, TestObserver2Bridge jarg1_, long jarg2, TestObserver2Bridge jarg2_);
  public final static native void TestObserver2Bridge_director_connect(TestObserver2Bridge obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TestObserver2Bridge_change_ownership(TestObserver2Bridge obj, long cptr, boolean take_or_release);
  public final static native long new_TestObserver2Vector__SWIG_0();
  public final static native long new_TestObserver2Vector__SWIG_1(long jarg1, TestObserver2Vector jarg1_);
  public final static native boolean TestObserver2Vector_isEmpty(long jarg1, TestObserver2Vector jarg1_);
  public final static native void TestObserver2Vector_clear(long jarg1, TestObserver2Vector jarg1_);
  public final static native long new_TestObserver2Vector__SWIG_2(int jarg1, long jarg2, TestObserver2Bridge jarg2_);
  public final static native int TestObserver2Vector_doCapacity(long jarg1, TestObserver2Vector jarg1_);
  public final static native void TestObserver2Vector_doReserve(long jarg1, TestObserver2Vector jarg1_, int jarg2);
  public final static native int TestObserver2Vector_doSize(long jarg1, TestObserver2Vector jarg1_);
  public final static native void TestObserver2Vector_doAdd__SWIG_0(long jarg1, TestObserver2Vector jarg1_, long jarg2, TestObserver2Bridge jarg2_);
  public final static native void TestObserver2Vector_doAdd__SWIG_1(long jarg1, TestObserver2Vector jarg1_, int jarg2, long jarg3, TestObserver2Bridge jarg3_);
  public final static native long TestObserver2Vector_doRemove(long jarg1, TestObserver2Vector jarg1_, int jarg2);
  public final static native long TestObserver2Vector_doGet(long jarg1, TestObserver2Vector jarg1_, int jarg2);
  public final static native long TestObserver2Vector_doSet(long jarg1, TestObserver2Vector jarg1_, int jarg2, long jarg3, TestObserver2Bridge jarg3_);
  public final static native void TestObserver2Vector_doRemoveRange(long jarg1, TestObserver2Vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_TestObserver2Vector(long jarg1);
  public final static native long new_IntLiveDataObserver();
  public final static native void delete_IntLiveDataObserver(long jarg1);
  public final static native void IntLiveDataObserver_onCall(long jarg1, IntLiveDataObserver jarg1_, int jarg2);
  public final static native int IntLiveDataObserver_calculateHash(long jarg1, IntLiveDataObserver jarg1_);
  public final static native boolean IntLiveDataObserver_isEquals(long jarg1, IntLiveDataObserver jarg1_, long jarg2, IntLiveDataObserver jarg2_);
  public final static native void IntLiveDataObserver_director_connect(IntLiveDataObserver obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IntLiveDataObserver_change_ownership(IntLiveDataObserver obj, long cptr, boolean take_or_release);
  public final static native long new_StringLiveDataObserver();
  public final static native void delete_StringLiveDataObserver(long jarg1);
  public final static native void StringLiveDataObserver_onCall(long jarg1, StringLiveDataObserver jarg1_, String jarg2);
  public final static native int StringLiveDataObserver_calculateHash(long jarg1, StringLiveDataObserver jarg1_);
  public final static native boolean StringLiveDataObserver_isEquals(long jarg1, StringLiveDataObserver jarg1_, long jarg2, StringLiveDataObserver jarg2_);
  public final static native void StringLiveDataObserver_director_connect(StringLiveDataObserver obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void StringLiveDataObserver_change_ownership(StringLiveDataObserver obj, long cptr, boolean take_or_release);
  public final static native long new_OptionalStringLiveDataObserver();
  public final static native void delete_OptionalStringLiveDataObserver(long jarg1);
  public final static native void OptionalStringLiveDataObserver_onCall(long jarg1, OptionalStringLiveDataObserver jarg1_, String jarg2);
  public final static native int OptionalStringLiveDataObserver_calculateHash(long jarg1, OptionalStringLiveDataObserver jarg1_);
  public final static native boolean OptionalStringLiveDataObserver_isEquals(long jarg1, OptionalStringLiveDataObserver jarg1_, long jarg2, OptionalStringLiveDataObserver jarg2_);
  public final static native void OptionalStringLiveDataObserver_director_connect(OptionalStringLiveDataObserver obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void OptionalStringLiveDataObserver_change_ownership(OptionalStringLiveDataObserver obj, long cptr, boolean take_or_release);
  public final static native long new_BaseFiledKeyVector__SWIG_0();
  public final static native long new_BaseFiledKeyVector__SWIG_1(long jarg1, BaseFiledKeyVector jarg1_);
  public final static native boolean BaseFiledKeyVector_isEmpty(long jarg1, BaseFiledKeyVector jarg1_);
  public final static native void BaseFiledKeyVector_clear(long jarg1, BaseFiledKeyVector jarg1_);
  public final static native long new_BaseFiledKeyVector__SWIG_2(int jarg1, long jarg2, BaseFiledKey jarg2_);
  public final static native int BaseFiledKeyVector_doCapacity(long jarg1, BaseFiledKeyVector jarg1_);
  public final static native void BaseFiledKeyVector_doReserve(long jarg1, BaseFiledKeyVector jarg1_, int jarg2);
  public final static native int BaseFiledKeyVector_doSize(long jarg1, BaseFiledKeyVector jarg1_);
  public final static native void BaseFiledKeyVector_doAdd__SWIG_0(long jarg1, BaseFiledKeyVector jarg1_, long jarg2, BaseFiledKey jarg2_);
  public final static native void BaseFiledKeyVector_doAdd__SWIG_1(long jarg1, BaseFiledKeyVector jarg1_, int jarg2, long jarg3, BaseFiledKey jarg3_);
  public final static native long BaseFiledKeyVector_doRemove(long jarg1, BaseFiledKeyVector jarg1_, int jarg2);
  public final static native long BaseFiledKeyVector_doGet(long jarg1, BaseFiledKeyVector jarg1_, int jarg2);
  public final static native long BaseFiledKeyVector_doSet(long jarg1, BaseFiledKeyVector jarg1_, int jarg2, long jarg3, BaseFiledKey jarg3_);
  public final static native void BaseFiledKeyVector_doRemoveRange(long jarg1, BaseFiledKeyVector jarg1_, int jarg2, int jarg3);
  public final static native void delete_BaseFiledKeyVector(long jarg1);
  public final static native void delete_BaseFiledKey(long jarg1);
  public final static native int BaseFiledKey_getKey(long jarg1, BaseFiledKey jarg1_);
  public final static native long new_FieldDataModel(long jarg1, BaseFiledKeyVector jarg1_);
  public final static native long FieldDataModel_getIntFiledValue(long jarg1, FieldDataModel jarg1_, long jarg2, IntFiledKey jarg2_);
  public final static native long FieldDataModel_getStringFiledValue(long jarg1, FieldDataModel jarg1_, long jarg2, StringFiledKey jarg2_);
  public final static native long FieldDataModel_getOptionalStringFiledValue(long jarg1, FieldDataModel jarg1_, long jarg2, OptionalStringFiledKey jarg2_);
  public final static native void delete_FieldDataModel(long jarg1);
  public final static native long new_MutableFieldDataModel(long jarg1, BaseFiledKeyVector jarg1_);
  public final static native long MutableFieldDataModel_getIntFiledValue(long jarg1, MutableFieldDataModel jarg1_, long jarg2, IntFiledKey jarg2_);
  public final static native long MutableFieldDataModel_getStringFiledValue(long jarg1, MutableFieldDataModel jarg1_, long jarg2, StringFiledKey jarg2_);
  public final static native long MutableFieldDataModel_getOptionalStringFiledValue(long jarg1, MutableFieldDataModel jarg1_, long jarg2, OptionalStringFiledKey jarg2_);
  public final static native void delete_MutableFieldDataModel(long jarg1);
  public final static native long price_get();
  public final static native long name_get();
  public final static native long description_get();
  public final static native void delete_IItemIcon(long jarg1);
  public final static native String IItemIcon_getName(long jarg1, IItemIcon jarg1_);
  public final static native String IItemIcon_getIcon(long jarg1, IItemIcon jarg1_);
  public final static native long new_IItemIcon();
  public final static native void IItemIcon_director_connect(IItemIcon obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IItemIcon_change_ownership(IItemIcon obj, long cptr, boolean take_or_release);
  public final static native void delete_ITestItem(long jarg1);
  public final static native String ITestItem_getId(long jarg1, ITestItem jarg1_);
  public final static native String ITestItem_getTitle(long jarg1, ITestItem jarg1_);
  public final static native String ITestItem_getEnvelopePic(long jarg1, ITestItem jarg1_);
  public final static native String ITestItem_getDesc(long jarg1, ITestItem jarg1_);
  public final static native String ITestItem_getNiceDate(long jarg1, ITestItem jarg1_);
  public final static native String ITestItem_getAuthor(long jarg1, ITestItem jarg1_);
  public final static native long ITestItem_getTags(long jarg1, ITestItem jarg1_);
  public final static native long ITestItem_getIcons(long jarg1, ITestItem jarg1_);
  public final static native long new_ITestItem();
  public final static native void ITestItem_director_connect(ITestItem obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void ITestItem_change_ownership(ITestItem obj, long cptr, boolean take_or_release);
  public final static native void delete_IC2NTestItemFactory(long jarg1);
  public final static native long IC2NTestItemFactory_create(long jarg1, IC2NTestItemFactory jarg1_, int jarg2);
  public final static native long new_IC2NTestItemFactory();
  public final static native void IC2NTestItemFactory_director_connect(IC2NTestItemFactory obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IC2NTestItemFactory_change_ownership(IC2NTestItemFactory obj, long cptr, boolean take_or_release);
  public final static native void C2NTestItemFactory_init(long jarg1, IC2NTestItemFactory jarg1_);
  public final static native long C2NTestItemFactory_create(int jarg1);
  public final static native long new_C2NTestItemFactory();
  public final static native void delete_C2NTestItemFactory(long jarg1);
  public final static native long new_N2CTestItem(int jarg1);
  public final static native void delete_N2CTestItem(long jarg1);
  public final static native String N2CTestItem_getId(long jarg1, N2CTestItem jarg1_);
  public final static native String N2CTestItem_getIdSwigExplicitN2CTestItem(long jarg1, N2CTestItem jarg1_);
  public final static native String N2CTestItem_getTitle(long jarg1, N2CTestItem jarg1_);
  public final static native String N2CTestItem_getTitleSwigExplicitN2CTestItem(long jarg1, N2CTestItem jarg1_);
  public final static native String N2CTestItem_getEnvelopePic(long jarg1, N2CTestItem jarg1_);
  public final static native String N2CTestItem_getEnvelopePicSwigExplicitN2CTestItem(long jarg1, N2CTestItem jarg1_);
  public final static native String N2CTestItem_getDesc(long jarg1, N2CTestItem jarg1_);
  public final static native String N2CTestItem_getDescSwigExplicitN2CTestItem(long jarg1, N2CTestItem jarg1_);
  public final static native String N2CTestItem_getNiceDate(long jarg1, N2CTestItem jarg1_);
  public final static native String N2CTestItem_getNiceDateSwigExplicitN2CTestItem(long jarg1, N2CTestItem jarg1_);
  public final static native String N2CTestItem_getAuthor(long jarg1, N2CTestItem jarg1_);
  public final static native String N2CTestItem_getAuthorSwigExplicitN2CTestItem(long jarg1, N2CTestItem jarg1_);
  public final static native long N2CTestItem_getTags(long jarg1, N2CTestItem jarg1_);
  public final static native long N2CTestItem_getTagsSwigExplicitN2CTestItem(long jarg1, N2CTestItem jarg1_);
  public final static native long N2CTestItem_getIcons(long jarg1, N2CTestItem jarg1_);
  public final static native long N2CTestItem_getIconsSwigExplicitN2CTestItem(long jarg1, N2CTestItem jarg1_);
  public final static native void N2CTestItem_director_connect(N2CTestItem obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void N2CTestItem_change_ownership(N2CTestItem obj, long cptr, boolean take_or_release);
  public final static native long new_N2CItemIcon(int jarg1);
  public final static native String N2CItemIcon_getName(long jarg1, N2CItemIcon jarg1_);
  public final static native String N2CItemIcon_getNameSwigExplicitN2CItemIcon(long jarg1, N2CItemIcon jarg1_);
  public final static native String N2CItemIcon_getIcon(long jarg1, N2CItemIcon jarg1_);
  public final static native String N2CItemIcon_getIconSwigExplicitN2CItemIcon(long jarg1, N2CItemIcon jarg1_);
  public final static native void delete_N2CItemIcon(long jarg1);
  public final static native void N2CItemIcon_director_connect(N2CItemIcon obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void N2CItemIcon_change_ownership(N2CItemIcon obj, long cptr, boolean take_or_release);
  public final static native void delete_ITestColor(long jarg1);
  public final static native int ITestColor_getRandomColor(long jarg1, ITestColor jarg1_);
  public final static native String ITestColor_add(long jarg1, ITestColor jarg1_, String jarg2, String jarg3);
  public final static native long new_ITestColor();
  public final static native void ITestColor_director_connect(ITestColor obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void ITestColor_change_ownership(ITestColor obj, long cptr, boolean take_or_release);
  public final static native int N2CTestColor_getRandomColor(long jarg1, N2CTestColor jarg1_);
  public final static native int N2CTestColor_getRandomColorSwigExplicitN2CTestColor(long jarg1, N2CTestColor jarg1_);
  public final static native String N2CTestColor_add(long jarg1, N2CTestColor jarg1_, String jarg2, String jarg3);
  public final static native String N2CTestColor_addSwigExplicitN2CTestColor(long jarg1, N2CTestColor jarg1_, String jarg2, String jarg3);
  public final static native long new_N2CTestColor();
  public final static native void delete_N2CTestColor(long jarg1);
  public final static native void N2CTestColor_director_connect(N2CTestColor obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void N2CTestColor_change_ownership(N2CTestColor obj, long cptr, boolean take_or_release);
  public final static native void TestColorFactory_init(long jarg1, ITestColor jarg1_);
  public final static native long TestColorFactory_create();
  public final static native long new_TestColorFactory();
  public final static native void delete_TestColorFactory(long jarg1);
  public final static native int TestObserver2Data_a_get(long jarg1, TestObserver2Data jarg1_);
  public final static native long new_TestObserver2Data(int jarg1);
  public final static native void delete_TestObserver2Data(long jarg1);
  public final static native int TestEnum1_AllTradingTime_get();
  public final static native int TestEnum1_UsPreMarketAfter_get();
  public final static native int TestEnum2_AllTradingTime_get();
  public final static native int TestEnum2_UsPreMarketAfter_get();
  public final static native void TestStruct_groupName_set(long jarg1, TestStruct jarg1_, String jarg2);
  public final static native String TestStruct_groupName_get(long jarg1, TestStruct jarg1_);
  public final static native long new_TestStruct();
  public final static native void delete_TestStruct(long jarg1);
  public final static native void TestOptionalBridge_enum1_set(long jarg1, TestOptionalBridge jarg1_, int jarg2);
  public final static native int TestOptionalBridge_enum1_get(long jarg1, TestOptionalBridge jarg1_);
  public final static native void TestOptionalBridge_enum11_set(long jarg1, TestOptionalBridge jarg1_, int jarg2);
  public final static native int TestOptionalBridge_enum11_get(long jarg1, TestOptionalBridge jarg1_);
  public final static native long new_TestOptionalBridge();
  public final static native void delete_TestOptionalBridge(long jarg1);
  public final static native void delete_ITestObserver2Bridge(long jarg1);
  public final static native void ITestObserver2Bridge_onCall(long jarg1, ITestObserver2Bridge jarg1_, int jarg2);
  public final static native int ITestObserver2Bridge_calculateHash(long jarg1, ITestObserver2Bridge jarg1_);
  public final static native boolean ITestObserver2Bridge_isEquals(long jarg1, ITestObserver2Bridge jarg1_, long jarg2, ITestObserver2Bridge jarg2_);
  public final static native long new_ITestObserver2Bridge();
  public final static native void ITestObserver2Bridge_director_connect(ITestObserver2Bridge obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void ITestObserver2Bridge_change_ownership(ITestObserver2Bridge obj, long cptr, boolean take_or_release);
  public final static native void delete_IObserverManager(long jarg1);
  public final static native void IObserverManager_addObserver(long jarg1, IObserverManager jarg1_, long jarg2, TestObserverBridge jarg2_);
  public final static native void IObserverManager_removeObserver(long jarg1, IObserverManager jarg1_, long jarg2, TestObserverBridge jarg2_);
  public final static native void IObserverManager_addObserver2(long jarg1, IObserverManager jarg1_, long jarg2, ITestObserver2Bridge jarg2_);
  public final static native void IObserverManager_removeObserver2(long jarg1, IObserverManager jarg1_, long jarg2, ITestObserver2Bridge jarg2_);
  public final static native long IObserverManager_add1(long jarg1, IObserverManager jarg1_, long jarg2, long jarg3);
  public final static native long IObserverManager_add11(long jarg1, IObserverManager jarg1_, long jarg2, long jarg3);
  public final static native long IObserverManager_add2(long jarg1, IObserverManager jarg1_, long jarg2, long jarg3);
  public final static native long IObserverManager_add22(long jarg1, IObserverManager jarg1_, long jarg2, long jarg3);
  public final static native long IObserverManager_add3(long jarg1, IObserverManager jarg1_, long jarg2, long jarg3);
  public final static native long IObserverManager_add33(long jarg1, IObserverManager jarg1_, long jarg2, long jarg3);
  public final static native void IObserverManager_byteTest1(long jarg1, IObserverManager jarg1_, byte[] jarg2);
  public final static native void IObserverManager_byteTest2(long jarg1, IObserverManager jarg1_, byte[] jarg2);
  public final static native byte[] IObserverManager_byteTest3(long jarg1, IObserverManager jarg1_);
  public final static native void IObserverManager_setTestObserver2List(long jarg1, IObserverManager jarg1_, long jarg2, TestObserver2Vector jarg2_);
  public final static native int IObserverManager_optionalEnum33(long jarg1, IObserverManager jarg1_);
  public final static native long new_IObserverManager();
  public final static native void IObserverManager_director_connect(IObserverManager obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IObserverManager_change_ownership(IObserverManager obj, long cptr, boolean take_or_release);
  public final static native void ObserverManager_init(long jarg1, IObserverManager jarg1_);
  public final static native void ObserverManager_addObserver(long jarg1, TestObserverBridge jarg1_);
  public final static native void ObserverManager_removeObserver(long jarg1, TestObserverBridge jarg1_);
  public final static native void ObserverManager_addObserver2(long jarg1, ITestObserver2Bridge jarg1_);
  public final static native void ObserverManager_removeObserver2(long jarg1, ITestObserver2Bridge jarg1_);
  public final static native long ObserverManager_add1(long jarg1, long jarg2);
  public final static native long ObserverManager_add11(long jarg1, long jarg2);
  public final static native long ObserverManager_add2(long jarg1, long jarg2);
  public final static native long ObserverManager_add22(long jarg1, long jarg2);
  public final static native long ObserverManager_add3(long jarg1, long jarg2);
  public final static native long ObserverManager_add33(long jarg1, long jarg2);
  public final static native void ObserverManager_byteTest1(byte[] jarg1);
  public final static native void ObserverManager_byteTest2(byte[] jarg1);
  public final static native byte[] ObserverManager_byteTest3();
  public final static native long new_ObserverManager();
  public final static native void delete_ObserverManager(long jarg1);
  public final static native void JNITestEntrance_testAddObserver(int jarg1);
  public final static native void JNITestEntrance_testRemoveObserver(int jarg1);
  public final static native long new_JNITestEntrance();
  public final static native void delete_JNITestEntrance(long jarg1);
  public final static native int IntFiledKey_getKey(long jarg1, IntFiledKey jarg1_);
  public final static native int IntFiledKey_getDefaultValue(long jarg1, IntFiledKey jarg1_);
  public final static native void delete_IntFiledKey(long jarg1);
  public final static native int StringFiledKey_getKey(long jarg1, StringFiledKey jarg1_);
  public final static native String StringFiledKey_getDefaultValue(long jarg1, StringFiledKey jarg1_);
  public final static native void delete_StringFiledKey(long jarg1);
  public final static native int OptionalStringFiledKey_getKey(long jarg1, OptionalStringFiledKey jarg1_);
  public final static native String OptionalStringFiledKey_getDefaultValue(long jarg1, OptionalStringFiledKey jarg1_);
  public final static native void delete_OptionalStringFiledKey(long jarg1);
  public final static native void delete_IntLiveData(long jarg1);
  public final static native long new_IntLiveData(int jarg1);
  public final static native int IntLiveData_GetValue(long jarg1, IntLiveData jarg1_);
  public final static native int IntLiveData_GetValueSwigExplicitIntLiveData(long jarg1, IntLiveData jarg1_);
  public final static native void IntLiveData_AddObserver(long jarg1, IntLiveData jarg1_, long jarg2, IntLiveDataObserver jarg2_, boolean jarg3);
  public final static native void IntLiveData_RemoveObserver(long jarg1, IntLiveData jarg1_, long jarg2, IntLiveDataObserver jarg2_);
  public final static native void IntLiveData_director_connect(IntLiveData obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IntLiveData_change_ownership(IntLiveData obj, long cptr, boolean take_or_release);
  public final static native void delete_StringLiveData(long jarg1);
  public final static native long new_StringLiveData(String jarg1);
  public final static native String StringLiveData_GetValue(long jarg1, StringLiveData jarg1_);
  public final static native String StringLiveData_GetValueSwigExplicitStringLiveData(long jarg1, StringLiveData jarg1_);
  public final static native void StringLiveData_AddObserver(long jarg1, StringLiveData jarg1_, long jarg2, StringLiveDataObserver jarg2_, boolean jarg3);
  public final static native void StringLiveData_RemoveObserver(long jarg1, StringLiveData jarg1_, long jarg2, StringLiveDataObserver jarg2_);
  public final static native void StringLiveData_director_connect(StringLiveData obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void StringLiveData_change_ownership(StringLiveData obj, long cptr, boolean take_or_release);
  public final static native void delete_OptionalStringLiveData(long jarg1);
  public final static native long new_OptionalStringLiveData(String jarg1);
  public final static native String OptionalStringLiveData_GetValue(long jarg1, OptionalStringLiveData jarg1_);
  public final static native String OptionalStringLiveData_GetValueSwigExplicitOptionalStringLiveData(long jarg1, OptionalStringLiveData jarg1_);
  public final static native void OptionalStringLiveData_AddObserver(long jarg1, OptionalStringLiveData jarg1_, long jarg2, OptionalStringLiveDataObserver jarg2_, boolean jarg3);
  public final static native void OptionalStringLiveData_RemoveObserver(long jarg1, OptionalStringLiveData jarg1_, long jarg2, OptionalStringLiveDataObserver jarg2_);
  public final static native void OptionalStringLiveData_director_connect(OptionalStringLiveData obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void OptionalStringLiveData_change_ownership(OptionalStringLiveData obj, long cptr, boolean take_or_release);
  public final static native long new_MutableIntLiveData(int jarg1);
  public final static native void MutableIntLiveData_SetValue(long jarg1, MutableIntLiveData jarg1_, int jarg2);
  public final static native void delete_MutableIntLiveData(long jarg1);
  public final static native void MutableIntLiveData_director_connect(MutableIntLiveData obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void MutableIntLiveData_change_ownership(MutableIntLiveData obj, long cptr, boolean take_or_release);
  public final static native long new_MutableStringLiveData(String jarg1);
  public final static native void MutableStringLiveData_SetValue(long jarg1, MutableStringLiveData jarg1_, String jarg2);
  public final static native void delete_MutableStringLiveData(long jarg1);
  public final static native void MutableStringLiveData_director_connect(MutableStringLiveData obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void MutableStringLiveData_change_ownership(MutableStringLiveData obj, long cptr, boolean take_or_release);
  public final static native long new_MutableOptionalStringLiveData(String jarg1);
  public final static native void MutableOptionalStringLiveData_SetValue(long jarg1, MutableOptionalStringLiveData jarg1_, String jarg2);
  public final static native void delete_MutableOptionalStringLiveData(long jarg1);
  public final static native void MutableOptionalStringLiveData_director_connect(MutableOptionalStringLiveData obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void MutableOptionalStringLiveData_change_ownership(MutableOptionalStringLiveData obj, long cptr, boolean take_or_release);
  public final static native long MutableFieldDataModel_SWIGUpcast(long jarg1);
  public final static native long N2CTestItem_SWIGSmartPtrUpcast(long jarg1);
  public final static native long N2CItemIcon_SWIGSmartPtrUpcast(long jarg1);
  public final static native long N2CTestColor_SWIGSmartPtrUpcast(long jarg1);
  public final static native long IntFiledKey_SWIGSmartPtrUpcast(long jarg1);
  public final static native long StringFiledKey_SWIGSmartPtrUpcast(long jarg1);
  public final static native long OptionalStringFiledKey_SWIGSmartPtrUpcast(long jarg1);
  public final static native long MutableIntLiveData_SWIGSmartPtrUpcast(long jarg1);
  public final static native long MutableStringLiveData_SWIGSmartPtrUpcast(long jarg1);
  public final static native long MutableOptionalStringLiveData_SWIGSmartPtrUpcast(long jarg1);

  public static void SwigDirector_TestObserverBridge_onCall(TestObserverBridge jself, int data) {
    jself.onCall(data);
  }
  public static void SwigDirector_TestObserver2Bridge_onCall(TestObserver2Bridge jself, long data) {
    jself.onCall(new TestObserver2Data(data, false));
  }
  public static void SwigDirector_IntLiveDataObserver_onCall(IntLiveDataObserver jself, int value) {
    jself.onCall(value);
  }
  public static void SwigDirector_StringLiveDataObserver_onCall(StringLiveDataObserver jself, String value) {
    jself.onCall(value);
  }
  public static void SwigDirector_OptionalStringLiveDataObserver_onCall(OptionalStringLiveDataObserver jself, String value) {
    jself.onCall(value);
  }
  public static String SwigDirector_IItemIcon_getName(IItemIcon jself) {
    return jself.getName();
  }
  public static String SwigDirector_IItemIcon_getIcon(IItemIcon jself) {
    return jself.getIcon();
  }
  public static String SwigDirector_ITestItem_getId(ITestItem jself) {
    return jself.getId();
  }
  public static String SwigDirector_ITestItem_getTitle(ITestItem jself) {
    return jself.getTitle();
  }
  public static String SwigDirector_ITestItem_getEnvelopePic(ITestItem jself) {
    return jself.getEnvelopePic();
  }
  public static String SwigDirector_ITestItem_getDesc(ITestItem jself) {
    return jself.getDesc();
  }
  public static String SwigDirector_ITestItem_getNiceDate(ITestItem jself) {
    return jself.getNiceDate();
  }
  public static String SwigDirector_ITestItem_getAuthor(ITestItem jself) {
    return jself.getAuthor();
  }
  public static long SwigDirector_ITestItem_getTags(ITestItem jself) {
    return StringVector.getCPtr(jself.getTags());
  }
  public static long SwigDirector_ITestItem_getIcons(ITestItem jself) {
    return IItemIconVector.getCPtr(jself.getIcons());
  }
  public static long SwigDirector_IC2NTestItemFactory_create(IC2NTestItemFactory jself, int index) {
    return ITestItem.getCPtr(jself.create(index));
  }
  public static String SwigDirector_N2CTestItem_getId(N2CTestItem jself) {
    return jself.getId();
  }
  public static String SwigDirector_N2CTestItem_getTitle(N2CTestItem jself) {
    return jself.getTitle();
  }
  public static String SwigDirector_N2CTestItem_getEnvelopePic(N2CTestItem jself) {
    return jself.getEnvelopePic();
  }
  public static String SwigDirector_N2CTestItem_getDesc(N2CTestItem jself) {
    return jself.getDesc();
  }
  public static String SwigDirector_N2CTestItem_getNiceDate(N2CTestItem jself) {
    return jself.getNiceDate();
  }
  public static String SwigDirector_N2CTestItem_getAuthor(N2CTestItem jself) {
    return jself.getAuthor();
  }
  public static long SwigDirector_N2CTestItem_getTags(N2CTestItem jself) {
    return StringVector.getCPtr(jself.getTags());
  }
  public static long SwigDirector_N2CTestItem_getIcons(N2CTestItem jself) {
    return IItemIconVector.getCPtr(jself.getIcons());
  }
  public static String SwigDirector_N2CItemIcon_getName(N2CItemIcon jself) {
    return jself.getName();
  }
  public static String SwigDirector_N2CItemIcon_getIcon(N2CItemIcon jself) {
    return jself.getIcon();
  }
  public static int SwigDirector_ITestColor_getRandomColor(ITestColor jself) {
    return jself.getRandomColor();
  }
  public static String SwigDirector_ITestColor_add(ITestColor jself, String a, String b) {
    return jself.add(a, b);
  }
  public static int SwigDirector_N2CTestColor_getRandomColor(N2CTestColor jself) {
    return jself.getRandomColor();
  }
  public static String SwigDirector_N2CTestColor_add(N2CTestColor jself, String a, String b) {
    return jself.add(a, b);
  }
  public static void SwigDirector_ITestObserver2Bridge_onCall(ITestObserver2Bridge jself, int data) {
    jself.onCall(data);
  }
  public static void SwigDirector_IObserverManager_addObserver(IObserverManager jself, long observer) {
    jself.addObserver((observer == 0) ? null : new TestObserverBridge(observer, true));
  }
  public static void SwigDirector_IObserverManager_removeObserver(IObserverManager jself, long observer) {
    jself.removeObserver((observer == 0) ? null : new TestObserverBridge(observer, true));
  }
  public static void SwigDirector_IObserverManager_addObserver2(IObserverManager jself, long observer) {
    jself.addObserver2((observer == 0) ? null : new ITestObserver2Bridge(observer, true));
  }
  public static void SwigDirector_IObserverManager_removeObserver2(IObserverManager jself, long observer) {
    jself.removeObserver2((observer == 0) ? null : new ITestObserver2Bridge(observer, true));
  }
  public static long SwigDirector_IObserverManager_add1(IObserverManager jself, long a, long b) {
    return jself.add1(a, b);
  }
  public static long SwigDirector_IObserverManager_add11(IObserverManager jself, long a, long b) {
    return jself.add11(a, b);
  }
  public static long SwigDirector_IObserverManager_add2(IObserverManager jself, long a, long b) {
    return jself.add2(a, b);
  }
  public static long SwigDirector_IObserverManager_add22(IObserverManager jself, long a, long b) {
    return jself.add22(a, b);
  }
  public static long SwigDirector_IObserverManager_add3(IObserverManager jself, long a, long b) {
    return jself.add3(a, b);
  }
  public static long SwigDirector_IObserverManager_add33(IObserverManager jself, long a, long b) {
    return jself.add33(a, b);
  }
  public static void SwigDirector_IObserverManager_byteTest1(IObserverManager jself, byte[] byteArray) {
    jself.byteTest1(byteArray);
  }
  public static void SwigDirector_IObserverManager_byteTest2(IObserverManager jself, byte[] byteArray) {
    jself.byteTest2(byteArray);
  }
  public static byte[] SwigDirector_IObserverManager_byteTest3(IObserverManager jself) {
    return jself.byteTest3();
  }
  public static void SwigDirector_IObserverManager_setTestObserver2List(IObserverManager jself, long arg0) {
    jself.setTestObserver2List(new TestObserver2Vector(arg0, true));
  }
  public static int SwigDirector_IObserverManager_optionalEnum33(IObserverManager jself) {
    return (jself.optionalEnum33()).swigValue();
  }
  public static int SwigDirector_IntLiveData_GetValue(IntLiveData jself) {
    return jself.GetValue();
  }
  public static String SwigDirector_StringLiveData_GetValue(StringLiveData jself) {
    return jself.GetValue();
  }
  public static String SwigDirector_OptionalStringLiveData_GetValue(OptionalStringLiveData jself) {
    return jself.GetValue();
  }
  public static int SwigDirector_MutableIntLiveData_GetValue(MutableIntLiveData jself) {
    return jself.GetValue();
  }
  public static String SwigDirector_MutableStringLiveData_GetValue(MutableStringLiveData jself) {
    return jself.GetValue();
  }
  public static String SwigDirector_MutableOptionalStringLiveData_GetValue(MutableOptionalStringLiveData jself) {
    return jself.GetValue();
  }

  private final static native void swig_module_init();
  static {
    swig_module_init();
  }
}
